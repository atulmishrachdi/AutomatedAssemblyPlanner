<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TessellationAndVoxelizationGeometryLibrary</name>
    </assembly>
    <members>
        <member name="T:TVGL.Boolean_Operations.CoincidentEdgeContactElement">
            <summary>
            The contact element corresponds to an existing edge within the solid.
            </summary>
        </member>
        <member name="T:TVGL.Boolean_Operations.ContactElement">
            <summary>
            A ContactElement describes the atomic class for the collective ContactData class which describes
            how a slice affects the solid. A ContactElement is basically an edge that may or may not correspond
            to a real edge in the solid. Additionally, it has properties that reference pertinent data in the solid.
            </summary>
        </member>
        <member name="M:TVGL.Boolean_Operations.ContactElement.GetInPlaneFlat(TVGL.Tessellation.PolygonalFace)">
            <summary>
            Gets the in plane flat.
            </summary>
            <param name="startFace">The start face.</param>
            <returns>Flat.</returns>
        </member>
        <member name="P:TVGL.Boolean_Operations.ContactElement.ContactEdge">
            <summary>
            Gets the edge corresponds to the surface of the solid within the designated slice.
            </summary>
            <value>The contact edge.</value>
        </member>
        <member name="P:TVGL.Boolean_Operations.ContactElement.SplitFacePositive">
            <summary>
            Gets the split face.
            </summary>
            <value>The split face.</value>                
        </member>
        <member name="P:TVGL.Boolean_Operations.CoincidentEdgeContactElement.EndVertex">
            <summary>
            Gets or sets the reference vertex at the other end (use in conjunction
            with ReferenceVertex).
            </summary>
            <value>The reference end.</value>
        </member>
        <!-- Badly formed XML comment ignored for member "T:TVGL.Boolean_Operations.ThroughFaceContactElement" -->
        <member name="P:TVGL.Boolean_Operations.ThroughFaceContactElement.SplitEdge">
            <summary>
            Gets the split edge.
            </summary>
            <value>The split edge.</value>
        </member>
        <member name="T:TVGL.Boolean_Operations.ThroughVertexContactElement">
            <summary>
            The contact element passed through a vertex in the solid.
            </summary>
        </member>
        <member name="T:TVGL.Boolean_Operations.ArtificialContactElement">
            <summary>
            The contact element is created artificially and doesn't correspond to elements
            within the real solid.
            </summary>
        </member>
        <member name="T:TVGL.Boolean_Operations.ContactData">
            <summary>
            A ContactData object represents a 2D path on the surface of the tesselated solid. 
            It is notably comprised of loops (both positive and negative) and loops are comprised
            of contact elements).
            </summary>
        </member>
        <member name="M:TVGL.Boolean_Operations.ContactData.#ctor(System.Collections.Generic.List{TVGL.Boolean_Operations.Loop},System.Collections.Generic.List{TVGL.Tessellation.Edge})">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.Boolean_Operations.ContactData"/> class.
            </summary>
            <param name="loops">The loops.</param>
            <param name="additionalEdges">The additional edges.</param>
        </member>
        <member name="F:TVGL.Boolean_Operations.ContactData.Perimeter">
            <summary>
            The combined perimeter of the 2D loops defined with the Contact Data.
            </summary>
        </member>
        <member name="F:TVGL.Boolean_Operations.ContactData.Area">
            <summary>
            The combined area of the 2D loops defined with the Contact Data
            </summary>
        </member>
        <member name="P:TVGL.Boolean_Operations.ContactData.PositiveLoops">
            <summary>
            Gets the positive loops.
            </summary>
            <value>The positive loops.</value>
        </member>
        <member name="P:TVGL.Boolean_Operations.ContactData.NegativeLoops">
            <summary>
            Gets the loops of negative area (i.e. holes).
            </summary>
            <value>The negative loops.</value>                    
        </member>
        <member name="P:TVGL.Boolean_Operations.ContactData.AllLoops">
            <summary>
            Gets all loops in one list (the positive loops are followed by the
            negative loops).
            </summary>
            <value>All loops.</value>
        </member>
        <member name="T:TVGL.Boolean_Operations.Loop">
            <summary>
            The Loop class is basically a list of ContactElements that form a path. Usually, this path
            is closed, hence the name "loop", but it may be used and useful for open paths as well.
            </summary>
        </member>
        <member name="F:TVGL.Boolean_Operations.Loop.IsPositive">
            <summary>
            Is the loop positive - meaning does it enclose material versus representing a hole
            </summary>
        </member>
        <member name="F:TVGL.Boolean_Operations.Loop.Perimeter">
            <summary>
            The length of the loop.
            </summary>
        </member>
        <member name="F:TVGL.Boolean_Operations.Loop.Area">
            <summary>
            The area of the loop
            </summary>
        </member>
        <member name="F:TVGL.Boolean_Operations.Loop.IsClosed">
            <summary>
            Is the loop closed?
            </summary>
        </member>
        <member name="F:TVGL.Boolean_Operations.Loop.ArtificiallyClosed">
            <summary>
            Was the loop closed by artificial ContactElements
            </summary>
        </member>
        <member name="M:TVGL.Boolean_Operations.Loop.#ctor(System.Collections.Generic.ICollection{TVGL.Boolean_Operations.ContactElement},System.Double[],System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.Boolean_Operations.Loop"/> class.
            </summary>
            <param name="contactElements">The contact elements.</param>
            <param name="normal">The normal.</param>
            <param name="isClosed">is closed.</param>
            <param name="artificiallyClosed">is artificially closed.</param>
        </member>
        <member name="T:TVGL.Boolean_Operations.Slice">
            <summary>
            The Slice class includes static functions for cutting a tessellated solid.
            </summary>
        </member>
        <member name="M:TVGL.Boolean_Operations.Slice.DefineContact(TVGL.Flat,TVGL.Tessellation.TessellatedSolid)">
            <summary>
            When the tessellated solid is sliced at the specified plane, the contact surfaces are
            described by the return ContactData object. This is a non-destructive function typically
            used to find the shape and size of 2D surface on the prescribed plane..
            </summary>
            <param name="plane">The plane.</param>
            <param name="ts">The ts.</param>
            <returns>ContactData.</returns>
            <exception cref="T:System.Exception">Contact Edges found that are not contained in loop.</exception>
        </member>
        <member name="M:TVGL.Boolean_Operations.Slice.FindLoop(TVGL.Flat,System.Collections.Generic.List{TVGL.Boolean_Operations.ContactElement},System.Double[])">
            <summary>
            Finds the loop.
            </summary>
            <param name="plane">The plane.</param>
            <param name="contacts">The contacts.</param>
            <param name="vertexDistancesToPlane"></param>
            <returns>Loop.</returns>
        </member>
        <member name="M:TVGL.Boolean_Operations.Slice.OnFlat(TVGL.Tessellation.TessellatedSolid,TVGL.Flat,System.Collections.Generic.List{TVGL.Tessellation.TessellatedSolid}@,System.Collections.Generic.List{TVGL.Tessellation.TessellatedSolid}@)">
            <summary>
            Performs the slicing operation on the prescribed flat plane. This destructively alters
            the tessellated solid into one or more solids which are returned in the "out" parameter
            lists.
            </summary>
            <param name="oldSolid">The old solid.</param>
            <param name="plane">The plane.</param>
            <param name="positiveSideSolids">The solids that are on the positive side of the plane
            This means that are on the side that the normal faces.</param>
            <param name="negativeSideSolids">The solids on the negative side of the plane.</param>
        </member>
        <member name="M:TVGL.Boolean_Operations.Slice.DivideUpContact(TVGL.Tessellation.TessellatedSolid,TVGL.Boolean_Operations.ContactData,TVGL.Flat)">
            <summary>
            Divides up contact.
            </summary>
            <param name="ts">The ts.</param>
            <param name="contactData">The contact data.</param>
            <param name="plane">The plane.</param>
            <exception cref="T:System.Exception">face is supposed to be split at plane but lives only on one side</exception>
        </member>
        <member name="T:ClassesFor_3mf_Files.CT_Model">
            <summary>
            Class CT_Model.
            </summary>
        </member>
        <member name="M:ClassesFor_3mf_Files.CT_Model.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ClassesFor_3mf_Files.CT_Model"/> class.
            </summary>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Model.metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Model.resources">
            <summary>
            Gets or sets the resources.
            </summary>
            <value>The resources.</value>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Model.build">
            <summary>
            Gets or sets the build.
            </summary>
            <value>The build.</value>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Model.unit">
            <summary>
            Gets or sets the unit.
            </summary>
            <value>The unit.</value>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Model.lang">
            <summary>
            Gets or sets the language.
            </summary>
            <value>The language.</value>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Model.requiredextensions">
            <summary>
            Gets or sets the requiredextensions.
            </summary>
            <value>The requiredextensions.</value>
        </member>
        <member name="T:ClassesFor_3mf_Files.CT_Metadata">
            <summary>
            Class CT_Metadata.
            </summary>
        </member>
        <member name="M:ClassesFor_3mf_Files.CT_Metadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ClassesFor_3mf_Files.CT_Metadata"/> class.
            </summary>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Metadata.name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Metadata.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:ClassesFor_3mf_Files.CT_Item">
            <summary>
            Class CT_Item.
            </summary>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Item.objectid">
            <summary>
            Gets or sets the objectid.
            </summary>
            <value>The objectid.</value>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Item.transform">
            <summary>
            Gets or sets the transform.
            </summary>
            <value>The transform.</value>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Item.itemref">
            <summary>
            Gets or sets the itemref.
            </summary>
            <value>The itemref.</value>
        </member>
        <member name="T:ClassesFor_3mf_Files.CT_Build">
            <summary>
            Class CT_Build.
            </summary>
        </member>
        <member name="M:ClassesFor_3mf_Files.CT_Build.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ClassesFor_3mf_Files.CT_Build"/> class.
            </summary>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Build.item">
            <summary>
            Gets or sets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="T:ClassesFor_3mf_Files.CT_Components">
            <summary>
            Class CT_Components.
            </summary>
        </member>
        <member name="M:ClassesFor_3mf_Files.CT_Components.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ClassesFor_3mf_Files.CT_Components"/> class.
            </summary>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Components.component">
            <summary>
            Gets or sets the component.
            </summary>
            <value>The component.</value>
        </member>
        <member name="T:ClassesFor_3mf_Files.CT_Component">
            <summary>
            Class CT_Component.
            </summary>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Component.objectid">
            <summary>
            Gets or sets the objectid.
            </summary>
            <value>The objectid.</value>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Component.transform">
            <summary>
            Gets or sets the transform.
            </summary>
            <value>The transform.</value>
        </member>
        <member name="T:ClassesFor_3mf_Files.CT_Triangle">
            <summary>
            Class CT_Triangle.
            </summary>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Triangle.v1">
            <summary>
            Gets or sets the v1.
            </summary>
            <value>The v1.</value>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Triangle.v2">
            <summary>
            Gets or sets the v2.
            </summary>
            <value>The v2.</value>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Triangle.v3">
            <summary>
            Gets or sets the v3.
            </summary>
            <value>The v3.</value>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Triangle.p1">
            <summary>
            Gets or sets the p1.
            </summary>
            <value>The p1.</value>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Triangle.p2">
            <summary>
            Gets or sets the p2.
            </summary>
            <value>The p2.</value>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Triangle.p3">
            <summary>
            Gets or sets the p3.
            </summary>
            <value>The p3.</value>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Triangle.pid">
            <summary>
            Gets or sets the pid.
            </summary>
            <value>The pid.</value>
        </member>
        <member name="T:ClassesFor_3mf_Files.CT_Vertex">
            <summary>
            Class CT_Vertex.
            </summary>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Vertex.x">
            <summary>
            Gets or sets the x.
            </summary>
            <value>The x.</value>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Vertex.y">
            <summary>
            Gets or sets the y.
            </summary>
            <value>The y.</value>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Vertex.z">
            <summary>
            Gets or sets the z.
            </summary>
            <value>The z.</value>
        </member>
        <member name="T:ClassesFor_3mf_Files.CT_Mesh">
            <summary>
            Class CT_Mesh.
            </summary>
        </member>
        <member name="M:ClassesFor_3mf_Files.CT_Mesh.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ClassesFor_3mf_Files.CT_Mesh"/> class.
            </summary>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Mesh.vertices">
            <summary>
            Gets or sets the vertices.
            </summary>
            <value>The vertices.</value>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Mesh.triangles">
            <summary>
            Gets or sets the triangles.
            </summary>
            <value>The triangles.</value>
        </member>
        <member name="T:ClassesFor_3mf_Files.CT_Object">
            <summary>
            Class CT_Object.
            </summary>
        </member>
        <member name="M:ClassesFor_3mf_Files.CT_Object.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ClassesFor_3mf_Files.CT_Object"/> class.
            </summary>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Object.Item">
            <summary>
            Gets or sets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Object.id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Object.type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Object.matid">
            <summary>
            Gets or sets the matid.
            </summary>
            <value>The matid.</value>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Object.matindex">
            <summary>
            Gets or sets the matindex.
            </summary>
            <value>The matindex.</value>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Object.thumbnail">
            <summary>
            Gets or sets the thumbnail.
            </summary>
            <value>The thumbnail.</value>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Object.partnumber">
            <summary>
            Gets or sets the partnumber.
            </summary>
            <value>The partnumber.</value>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Object.name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:ClassesFor_3mf_Files.ST_ObjectType">
            <summary>
            Enum ST_ObjectType
            </summary>
        </member>
        <member name="F:ClassesFor_3mf_Files.ST_ObjectType.model">
            <summary>
            The model
            </summary>
        </member>
        <member name="F:ClassesFor_3mf_Files.ST_ObjectType.support">
            <summary>
            The support
            </summary>
        </member>
        <member name="F:ClassesFor_3mf_Files.ST_ObjectType.other">
            <summary>
            The other
            </summary>
        </member>
        <member name="T:ClassesFor_3mf_Files.CT_Base">
            <summary>
            Class CT_Base.
            </summary>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Base.name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Base.displaycolor">
            <summary>
            Gets or sets the displaycolor.
            </summary>
            <value>The displaycolor.</value>
        </member>
        <member name="T:ClassesFor_3mf_Files.CT_BaseMaterials">
            <summary>
            Class CT_BaseMaterials.
            </summary>
        </member>
        <member name="M:ClassesFor_3mf_Files.CT_BaseMaterials.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ClassesFor_3mf_Files.CT_BaseMaterials"/> class.
            </summary>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_BaseMaterials.base">
            <summary>
            Gets or sets the base.
            </summary>
            <value>The base.</value>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_BaseMaterials.id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="T:ClassesFor_3mf_Files.CT_Resources">
            <summary>
            Class CT_Resources.
            </summary>
        </member>
        <member name="M:ClassesFor_3mf_Files.CT_Resources.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ClassesFor_3mf_Files.CT_Resources"/> class.
            </summary>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Resources.basematerials">
            <summary>
            Gets or sets the basematerials.
            </summary>
            <value>The basematerials.</value>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Resources.object">
            <summary>
            Gets or sets the object.
            </summary>
            <value>The object.</value>
        </member>
        <member name="T:ClassesFor_3mf_Files.ST_Unit">
            <summary>
            Enum ST_Unit
            </summary>
        </member>
        <member name="F:ClassesFor_3mf_Files.ST_Unit.micron">
            <summary>
            The micron
            </summary>
        </member>
        <member name="F:ClassesFor_3mf_Files.ST_Unit.millimeter">
            <summary>
            The millimeter
            </summary>
        </member>
        <member name="F:ClassesFor_3mf_Files.ST_Unit.centimeter">
            <summary>
            The centimeter
            </summary>
        </member>
        <member name="F:ClassesFor_3mf_Files.ST_Unit.inch">
            <summary>
            The inch
            </summary>
        </member>
        <member name="F:ClassesFor_3mf_Files.ST_Unit.foot">
            <summary>
            The foot
            </summary>
        </member>
        <member name="F:ClassesFor_3mf_Files.ST_Unit.meter">
            <summary>
            The meter
            </summary>
        </member>
        <member name="T:ClassesFor_3mf_Files.CT_Vertices">
            <summary>
            Class CT_Vertices.
            </summary>
        </member>
        <member name="M:ClassesFor_3mf_Files.CT_Vertices.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ClassesFor_3mf_Files.CT_Vertices"/> class.
            </summary>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Vertices.vertex">
            <summary>
            Gets or sets the vertex.
            </summary>
            <value>The vertex.</value>
        </member>
        <member name="T:ClassesFor_3mf_Files.CT_Triangles">
            <summary>
            Class CT_Triangles.
            </summary>
        </member>
        <member name="M:ClassesFor_3mf_Files.CT_Triangles.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ClassesFor_3mf_Files.CT_Triangles"/> class.
            </summary>
        </member>
        <member name="P:ClassesFor_3mf_Files.CT_Triangles.triangle">
            <summary>
            Gets or sets the triangle.
            </summary>
            <value>The triangle.</value>
        </member>
        <member name="T:amf.AMF_Object">
            <summary>
                Class AMF_Object.
            </summary>
        </member>
        <member name="F:amf.AMF_Object.id">
            <summary>
                The identifier
            </summary>
        </member>
        <member name="F:amf.AMF_Object.mesh">
            <summary>
                The mesh
            </summary>
        </member>
        <member name="T:amf.AMF_Mesh">
            <summary>
                Class AMF_Mesh.
            </summary>
        </member>
        <member name="F:amf.AMF_Mesh.vertices">
            <summary>
                The vertices
            </summary>
        </member>
        <member name="F:amf.AMF_Mesh.volume">
            <summary>
                The volume
            </summary>
        </member>
        <member name="T:amf.AMF_Vertices">
            <summary>
                Class AMF_Vertices.
            </summary>
        </member>
        <member name="F:amf.AMF_Vertices.Edges">
            <summary>
                The edges
            </summary>
        </member>
        <member name="F:amf.AMF_Vertices.Vertices">
            <summary>
                The vertices
            </summary>
        </member>
        <member name="M:amf.AMF_Vertices.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:amf.AMF_Vertices"/> class.
            </summary>
        </member>
        <member name="T:amf.AMF_Triangle">
            <summary>
                Class AMF_Triangle.
            </summary>
        </member>
        <member name="F:amf.AMF_Triangle.color">
            <summary>
                The color
            </summary>
        </member>
        <member name="F:amf.AMF_Triangle.texmap">
            <summary>
                The texmap
            </summary>
        </member>
        <member name="F:amf.AMF_Triangle.v1">
            <summary>
                The v1
            </summary>
        </member>
        <member name="F:amf.AMF_Triangle.v2">
            <summary>
                The v2
            </summary>
        </member>
        <member name="F:amf.AMF_Triangle.v3">
            <summary>
                The v3
            </summary>
        </member>
        <member name="P:amf.AMF_Triangle.VertexIndices">
            <summary>
                Gets the vertex indices.
            </summary>
            <value>The vertex indices.</value>
        </member>
        <member name="T:amf.AMF_Color">
            <summary>
                Class AMF_Color.
            </summary>
        </member>
        <member name="F:amf.AMF_Color.a">
            <summary>
                a
            </summary>
        </member>
        <member name="F:amf.AMF_Color.b">
            <summary>
                The b
            </summary>
        </member>
        <member name="F:amf.AMF_Color.g">
            <summary>
                The g
            </summary>
        </member>
        <member name="F:amf.AMF_Color.r">
            <summary>
                The r
            </summary>
        </member>
        <member name="T:amf.AMF_Volume">
            <summary>
                Class AMF_Volume.
            </summary>
        </member>
        <member name="F:amf.AMF_Volume.color">
            <summary>
                The color
            </summary>
        </member>
        <member name="F:amf.AMF_Volume.materialid">
            <summary>
                The materialid
            </summary>
        </member>
        <member name="F:amf.AMF_Volume.Triangles">
            <summary>
                The triangles
            </summary>
        </member>
        <member name="F:amf.AMF_Volume.type">
            <summary>
                The type
            </summary>
        </member>
        <member name="F:amf.AMF_Volume.typeSpecified">
            <summary>
                The type specified
            </summary>
        </member>
        <member name="M:amf.AMF_Volume.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:amf.AMF_Volume"/> class.
            </summary>
        </member>
        <member name="T:amf.AMF_VolumeType">
            <summary>
                Enum AMF_VolumeType
            </summary>
        </member>
        <member name="F:amf.AMF_VolumeType.object">
            <summary>
                The object
            </summary>
        </member>
        <member name="F:amf.AMF_VolumeType.support">
            <summary>
                The support
            </summary>
        </member>
        <member name="T:amf.AMF_Edge">
            <summary>
                Class AMF_Edge.
            </summary>
        </member>
        <member name="F:amf.AMF_Edge.dx1">
            <summary>
                The DX1
            </summary>
        </member>
        <member name="F:amf.AMF_Edge.dx2">
            <summary>
                The DX2
            </summary>
        </member>
        <member name="F:amf.AMF_Edge.dy1">
            <summary>
                The dy1
            </summary>
        </member>
        <member name="F:amf.AMF_Edge.dy2">
            <summary>
                The dy2
            </summary>
        </member>
        <member name="F:amf.AMF_Edge.dz1">
            <summary>
                The DZ1
            </summary>
        </member>
        <member name="F:amf.AMF_Edge.dz2">
            <summary>
                The DZ2
            </summary>
        </member>
        <member name="F:amf.AMF_Edge.v1">
            <summary>
                The v1
            </summary>
        </member>
        <member name="F:amf.AMF_Edge.v2">
            <summary>
                The v2
            </summary>
        </member>
        <member name="T:amf.AMF_Normal">
            <summary>
                Class AMF_Normal.
            </summary>
        </member>
        <member name="F:amf.AMF_Normal.nx">
            <summary>
                The nx
            </summary>
        </member>
        <member name="F:amf.AMF_Normal.ny">
            <summary>
                The ny
            </summary>
        </member>
        <member name="F:amf.AMF_Normal.nz">
            <summary>
                The nz
            </summary>
        </member>
        <member name="T:amf.AMF_Coordinates">
            <summary>
                Class AMF_Coordinates.
            </summary>
        </member>
        <member name="F:amf.AMF_Coordinates.x">
            <summary>
                The x
            </summary>
        </member>
        <member name="F:amf.AMF_Coordinates.y">
            <summary>
                The y
            </summary>
        </member>
        <member name="F:amf.AMF_Coordinates.z">
            <summary>
                The z
            </summary>
        </member>
        <member name="P:amf.AMF_Coordinates.AsArray">
            <summary>
                Gets as array.
            </summary>
            <value>As array.</value>
        </member>
        <member name="T:amf.AMF_Vertex">
            <summary>
                Class AMF_Vertex.
            </summary>
        </member>
        <member name="F:amf.AMF_Vertex.coordinates">
            <summary>
                The coordinates
            </summary>
        </member>
        <member name="T:amf.AMF_Constellation">
            <summary>
                Class AMF_Constellation.
            </summary>
        </member>
        <member name="F:amf.AMF_Constellation.id">
            <summary>
                The identifier
            </summary>
        </member>
        <member name="F:amf.AMF_Constellation.instance">
            <summary>
                The instance
            </summary>
        </member>
        <member name="M:amf.AMF_Constellation.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:amf.AMF_Constellation"/> class.
            </summary>
        </member>
        <member name="T:amf.AMF_Instance">
            <summary>
                Class AMF_Instance.
            </summary>
        </member>
        <member name="F:amf.AMF_Instance.deltax">
            <summary>
                The deltax
            </summary>
        </member>
        <member name="F:amf.AMF_Instance.deltaxSpecified">
            <summary>
                The deltax specified
            </summary>
        </member>
        <member name="F:amf.AMF_Instance.deltay">
            <summary>
                The deltay
            </summary>
        </member>
        <member name="F:amf.AMF_Instance.deltaySpecified">
            <summary>
                The deltay specified
            </summary>
        </member>
        <member name="F:amf.AMF_Instance.deltaz">
            <summary>
                The deltaz
            </summary>
        </member>
        <member name="F:amf.AMF_Instance.deltazSpecified">
            <summary>
                The deltaz specified
            </summary>
        </member>
        <member name="F:amf.AMF_Instance.objectid">
            <summary>
                The objectid
            </summary>
        </member>
        <member name="F:amf.AMF_Instance.rx">
            <summary>
                The rx
            </summary>
        </member>
        <member name="F:amf.AMF_Instance.rxSpecified">
            <summary>
                The rx specified
            </summary>
        </member>
        <member name="F:amf.AMF_Instance.ry">
            <summary>
                The ry
            </summary>
        </member>
        <member name="F:amf.AMF_Instance.rySpecified">
            <summary>
                The ry specified
            </summary>
        </member>
        <member name="F:amf.AMF_Instance.rz">
            <summary>
                The rz
            </summary>
        </member>
        <member name="F:amf.AMF_Instance.rzSpecified">
            <summary>
                The rz specified
            </summary>
        </member>
        <member name="T:amf.AMF_Texture">
            <summary>
                Class AMF_Texture.
            </summary>
        </member>
        <member name="F:amf.AMF_Texture.depth">
            <summary>
                The depth
            </summary>
        </member>
        <member name="F:amf.AMF_Texture.height">
            <summary>
                The height
            </summary>
        </member>
        <member name="F:amf.AMF_Texture.id">
            <summary>
                The identifier
            </summary>
        </member>
        <member name="F:amf.AMF_Texture.tiled">
            <summary>
                The tiled
            </summary>
        </member>
        <member name="F:amf.AMF_Texture.type">
            <summary>
                The type
            </summary>
        </member>
        <member name="F:amf.AMF_Texture.Value">
            <summary>
                The value
            </summary>
        </member>
        <member name="F:amf.AMF_Texture.width">
            <summary>
                The width
            </summary>
        </member>
        <member name="T:amf.AMF_TextureType">
            <summary>
                Enum AMF_TextureType
            </summary>
        </member>
        <member name="F:amf.AMF_TextureType.grayscale">
            <summary>
                The grayscale
            </summary>
        </member>
        <member name="T:amf.AMF_Composite">
            <summary>
                Class AMF_Composite.
            </summary>
        </member>
        <member name="F:amf.AMF_Composite.materialid">
            <summary>
                The materialid
            </summary>
        </member>
        <member name="F:amf.AMF_Composite.Value">
            <summary>
                The value
            </summary>
        </member>
        <member name="T:amf.AMF_Material">
            <summary>
                Class AMF_Material.
            </summary>
        </member>
        <member name="F:amf.AMF_Material.composite">
            <summary>
                The composite
            </summary>
        </member>
        <member name="F:amf.AMF_Material.id">
            <summary>
                The identifier
            </summary>
        </member>
        <member name="F:amf.AMF_Material.metadata">
            <summary>
                The metadata
            </summary>
        </member>
        <member name="M:amf.AMF_Material.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:amf.AMF_Material"/> class.
            </summary>
        </member>
        <member name="T:amf.AMF_Metadata">
            <summary>
                Class AMF_Metadata.
            </summary>
        </member>
        <member name="F:amf.AMF_Metadata.type">
            <summary>
                The type
            </summary>
        </member>
        <member name="F:amf.AMF_Metadata.Value">
            <summary>
                The value
            </summary>
        </member>
        <member name="T:amf.AMF_TexMap">
            <summary>
                Class AMF_TexMap.
            </summary>
        </member>
        <member name="F:amf.AMF_TexMap.atexid">
            <summary>
                The atexid
            </summary>
        </member>
        <member name="F:amf.AMF_TexMap.btexid">
            <summary>
                The btexid
            </summary>
        </member>
        <member name="F:amf.AMF_TexMap.gtexid">
            <summary>
                The gtexid
            </summary>
        </member>
        <member name="F:amf.AMF_TexMap.rtexid">
            <summary>
                The rtexid
            </summary>
        </member>
        <member name="F:amf.AMF_TexMap.utex1">
            <summary>
                The utex1
            </summary>
        </member>
        <member name="F:amf.AMF_TexMap.utex2">
            <summary>
                The utex2
            </summary>
        </member>
        <member name="F:amf.AMF_TexMap.utex3">
            <summary>
                The utex3
            </summary>
        </member>
        <member name="F:amf.AMF_TexMap.vtex1">
            <summary>
                The vtex1
            </summary>
        </member>
        <member name="F:amf.AMF_TexMap.vtex2">
            <summary>
                The vtex2
            </summary>
        </member>
        <member name="F:amf.AMF_TexMap.vtex3">
            <summary>
                The vtex3
            </summary>
        </member>
        <member name="F:amf.AMF_TexMap.wtex1">
            <summary>
                The wtex1
            </summary>
        </member>
        <member name="F:amf.AMF_TexMap.wtex1Specified">
            <summary>
                The wtex1 specified
            </summary>
        </member>
        <member name="F:amf.AMF_TexMap.wtex2">
            <summary>
                The wtex2
            </summary>
        </member>
        <member name="F:amf.AMF_TexMap.wtex2Specified">
            <summary>
                The wtex2 specified
            </summary>
        </member>
        <member name="F:amf.AMF_TexMap.wtex3">
            <summary>
                The wtex3
            </summary>
        </member>
        <member name="F:amf.AMF_TexMap.wtex3Specified">
            <summary>
                The wtex3 specified
            </summary>
        </member>
        <member name="T:amf.AMF_Unit">
            <summary>
                Enum AMF_Unit
            </summary>
        </member>
        <member name="F:amf.AMF_Unit.inch">
            <summary>
                The inch
            </summary>
        </member>
        <member name="F:amf.AMF_Unit.millimeter">
            <summary>
                The millimeter
            </summary>
        </member>
        <member name="F:amf.AMF_Unit.meter">
            <summary>
                The meter
            </summary>
        </member>
        <member name="F:amf.AMF_Unit.feet">
            <summary>
                The feet
            </summary>
        </member>
        <member name="F:amf.AMF_Unit.micron">
            <summary>
                The micron
            </summary>
        </member>
        <member name="T:TVGL.IOFunctions.IO">
            <summary>
             The IO or input/output class contains static functions for saving and loading files in common formats.
             Note that as a Portable class library, these IO functions cannot interact with your file system. In order
             to load or save, the filename is not enough. One needs to provide the stream. 
            </summary>
        </member>
        <member name="M:TVGL.IOFunctions.IO.Open(System.IO.Stream,System.String,System.Boolean)">
            <summary>
                Opens the specified stream, s. Note that as a Portable class library
            </summary>
            <param name="s">The s.</param>
            <param name="filename">The filename.</param>
            <param name="inParallel">The in parallel.</param>
            <returns>TessellatedSolid.</returns>
            <exception cref="T:System.Exception">
                Cannot open file without extension (e.g. f00.stl).
                or
                Cannot determine format from extension (not .stl, .3ds, .lwo, .obj, .objx, or .off.
            </exception>
        </member>
        <member name="M:TVGL.IOFunctions.IO.OpenSTL(System.IO.Stream,System.Boolean)">
            <summary>
                Opens the STL.
            </summary>
            <param name="s">The s.</param>
            <param name="inParallel">The in parallel.</param>
            <returns>TessellatedSolid.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.IO.getNameFromStream(System.IO.Stream)">
            <summary>
            Gets the name from stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.IO.ParseLine(System.String,System.String@,System.String@)">
            <summary>
                Parses the ID and values from the specified line.
            </summary>
            <param name="line">The line.</param>
            <param name="id">The id.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:TVGL.IOFunctions.IO.TryParseDoubleArray(System.String,System.Double[]@)">
            <summary>
            Tries to parse a vertex from a string.
            </summary>
            <param name="line">The input string.</param>
            <param name="doubles">The vertex point.</param>
            <returns>True if parsing was successful.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.IO.TryParseDoubleArray(System.Text.RegularExpressions.Regex,System.String,System.Double[]@)">
            <summary>
                Tries to parse a vertex from a string.
            </summary>
            <param name="parser">The parser.</param>
            <param name="line">The input string.</param>
            <param name="doubles">The vertex point.</param>
            <returns>True if parsing was successful.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.IO.ReadExpectedLine(System.IO.StreamReader,System.String)">
            <summary>
                Reads the next line with the expectation that is starts with the
                "expected" string. If the line does not have the expected value,
                then the StreamReader stays at the same position and
                false is returned.
            </summary>
            <param name="reader">The reader.</param>
            <param name="expected">The expected.</param>
            <returns>Boolean.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.IO.ReadLine(System.IO.StreamReader)">
            <summary>
                Reads the line.
            </summary>
            <param name="reader">The reader.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.IO.Save(System.IO.Stream,TVGL.FileType)">
            <summary>
                Saves the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="fileType">Type of the file.</param>
        </member>
        <member name="M:TVGL.IOFunctions.IO.Save(System.String,TVGL.FileType)">
            <summary>
                Saves the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="fileType">Type of the file.</param>
        </member>
        <member name="M:TVGL.IOFunctions.IO.WriteCoordinates(System.Double[],System.IO.StreamWriter)">
            <summary>
                Writes the coordinates.
            </summary>
            <param name="coordinates">The coordinates.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:TVGL.IOFunctions.IO.WriteCoordinates(System.Double[],System.IO.BinaryWriter)">
            <summary>
                Writes the coordinates.
            </summary>
            <param name="coordinates">The coordinates.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="F:TVGL.IOFunctions.OFFFileData._lastColor">
            <summary>
                The last color
            </summary>
        </member>
        <member name="M:TVGL.IOFunctions.OFFFileData.TryReadBinary(System.IO.Stream,TVGL.IOFunctions.OFFFileData@)">
            <summary>
                Tries the read binary.
            </summary>
            <param name="stream">The stream.</param>
            <param name="offData">The off data.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.IO.EndOfStreamException">Incomplete file</exception>
        </member>
        <member name="P:TVGL.IOFunctions.OFFFileData.HasColorSpecified">
            <summary>
                Gets the has color specified.
            </summary>
            <value>The has color specified.</value>
        </member>
        <member name="P:TVGL.IOFunctions.OFFFileData.Colors">
            <summary>
                Gets or sets the colors.
            </summary>
            <value>The colors.</value>
        </member>
        <member name="P:TVGL.IOFunctions.OFFFileData.Vertices">
            <summary>
                Gets or sets the Vertices.
            </summary>
            <value>The vertices.</value>
        </member>
        <member name="P:TVGL.IOFunctions.OFFFileData.FaceToVertexIndices">
            <summary>
                Gets the face to vertex indices.
            </summary>
            <value>The face to vertex indices.</value>
        </member>
        <member name="P:TVGL.IOFunctions.OFFFileData.Name">
            <summary>
                Gets the file header.
            </summary>
            <value>The header.</value>
        </member>
        <member name="T:TVGL.IOFunctions.AMFFileData">
            <summary>
                Class AMFFileData.
            </summary>
        </member>
        <member name="M:TVGL.IOFunctions.AMFFileData.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.IOFunctions.AMFFileData"/> class.
            </summary>
        </member>
        <member name="M:TVGL.IOFunctions.AMFFileData.TryUnzippedXMLRead(System.IO.Stream,TVGL.IOFunctions.AMFFileData@)">
            <summary>
                Tries the unzipped XML read.
            </summary>
            <param name="stream">The stream.</param>
            <param name="amfFileData">The amf file data.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.AMFFileData.TryZippedXMLRead(System.IO.Stream,TVGL.IOFunctions.AMFFileData@)">
            <summary>
                Tries the zipped XML read.
            </summary>
            <param name="stream">The stream.</param>
            <param name="amfFileData">The amf file data.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:TVGL.IOFunctions.AMFFileData.Objects">
            <summary>
                Gets or sets the objects.
            </summary>
            <value>The objects.</value>
        </member>
        <member name="P:TVGL.IOFunctions.AMFFileData.Textures">
            <summary>
                Gets or sets the textures.
            </summary>
            <value>The textures.</value>
        </member>
        <member name="P:TVGL.IOFunctions.AMFFileData.unit">
            <summary>
                Gets or sets the unit.
            </summary>
            <value>The unit.</value>
        </member>
        <member name="P:TVGL.IOFunctions.AMFFileData.unitSpecified">
            <summary>
                Gets or sets a value indicating whether [unit specified].
            </summary>
            <value><c>true</c> if [unit specified]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TVGL.IOFunctions.AMFFileData.version">
            <summary>
                Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:TVGL.IOFunctions.AMFFileData.versionSpecified">
            <summary>
                Gets or sets a value indicating whether [version specified].
            </summary>
            <value><c>true</c> if [version specified]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TVGL.IOFunctions.AMFFileData.lang">
            <summary>
                Gets or sets the language.
            </summary>
            <value>The language.</value>
        </member>
        <member name="P:TVGL.IOFunctions.AMFFileData.Name">
            <summary>
                Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:TVGL.Torus">
            <summary>
            Class Torus.
            </summary>
        </member>
        <member name="T:TVGL.PrimitiveSurface">
            <summary>
            Class PrimitiveSurface.
            </summary>
        </member>
        <member name="M:TVGL.PrimitiveSurface.#ctor(System.Collections.Generic.IEnumerable{TVGL.Tessellation.PolygonalFace})">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.PrimitiveSurface"/> class.
            </summary>
            <param name="faces">The faces.</param>
        </member>
        <member name="M:TVGL.PrimitiveSurface.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.PrimitiveSurface"/> class.
            </summary>
        </member>
        <member name="P:TVGL.PrimitiveSurface.Area">
            <summary>
            Gets the area.
            </summary>
            <value>
            The area.
            </value>
        </member>
        <member name="P:TVGL.PrimitiveSurface.Faces">
            <summary>
            Gets or sets the polygonal faces.
            </summary>
            <value>
            The polygonal faces.
            </value>
        </member>
        <member name="P:TVGL.PrimitiveSurface.Transformation">
            <summary>
            Gets or sets the transformation.
            </summary>
            <value>
            The transformation.
            </value>
        </member>
        <member name="P:TVGL.PrimitiveSurface.InnerEdges">
            <summary>
            Gets the inner edges.
            </summary>
            <value>
            The inner edges.
            </value>
        </member>
        <member name="P:TVGL.PrimitiveSurface.OuterEdges">
            <summary>
            Gets the outer edges.
            </summary>
            <value>
            The outer edges.
            </value>
        </member>
        <member name="P:TVGL.PrimitiveSurface.Vertices">
            <summary>
            Gets the vertices.
            </summary>
            <value>
            The vertices.
            </value>
        </member>
        <member name="M:TVGL.Torus.#ctor(System.Collections.Generic.IEnumerable{TVGL.Tessellation.PolygonalFace})">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.PrimitiveSurface"/> class.
            </summary>
            <param name="faces">The faces.</param>
        </member>
        <member name="F:TVGL.Torus.IsPositive">
            <summary>
            Is the sphere positive? (false is negative)
            </summary>
        </member>
        <member name="M:TVGL.Torus.IsNewMemberOf(TVGL.Tessellation.PolygonalFace)">
            <summary>
            Determines whether [is new member of] [the specified face].
            </summary>
            <param name="face">The face.</param>
            <returns>Boolean.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TVGL.Torus.UpdateWith(TVGL.Tessellation.PolygonalFace)">
            <summary>
            Updates the with.
            </summary>
            <param name="face">The face.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TVGL.Torus.BuildFromMultipleFaces(System.Collections.Generic.List{TVGL.Tessellation.PolygonalFace})">
            <summary>
            Builds from multiple faces.
            </summary>
            <param name="faces">The faces.</param>
            <returns>PrimitiveSurface.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:TVGL.Torus.Center">
            <summary>
            Gets the center.
            </summary>
            <value>The center.</value>
        </member>
        <member name="P:TVGL.Torus.Axis">
            <summary>
            Gets the axis.
            </summary>
            <value>The axis.</value>
        </member>
        <member name="P:TVGL.Torus.MajorRadius">
            <summary>
            Gets the major radius.
            </summary>
            <value>The major radius.</value>
        </member>
        <member name="P:TVGL.Torus.MinorRadius">
            <summary>
            Gets the minor radius.
            </summary>
            <value>The minor radius.</value>
        </member>
        <member name="M:TVGL.GeometryFunctions.DistancePointToLine(System.Double[],System.Double[],System.Double[])">
            <summary>
            Returns the distance the point to line.
            </summary>
            <param name="qPoint">The q point that is off of the line.</param>
            <param name="lineRefPt">The line reference point on the line.</param>
            <param name="lineVector">The line direction vector.</param>
            <returns></returns>
        </member>
        <member name="M:TVGL.GeometryFunctions.DistancePointToLine(System.Double[],System.Double[],System.Double[],System.Double[]@)">
            <summary>
            Distances the point to line.
            </summary>
            <param name="qPoint">q is the point that is off of the line.</param>
            <param name="lineRefPt">p is a reference point on the line.</param>
            <param name="lineVector">n is the vector of the line direction.</param>
            <param name="pointOnLine">The point on line closest to point, q.</param>
            <returns></returns>
        </member>
        <member name="M:TVGL.GeometryFunctions.DistancePointToPoint(System.Double[],System.Double[])">
            <summary>
            Distances the point to point.
            </summary>
            <param name="p1">point, p1.</param>
            <param name="p2">point, p2.</param>
            <returns>the distance between the two 3D points.</returns>
        </member>
        <member name="T:TVGL.KnownColors">
            <summary>
            Enum KnownColors
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.UnknownColor">
            <summary>
            The unknown color
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Transparent">
            <summary>
            The transparent
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Black">
            <summary>
            The black
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Navy">
            <summary>
            The navy
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkBlue">
            <summary>
            The dark blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.MediumBlue">
            <summary>
            The medium blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Blue">
            <summary>
            The blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkGreen">
            <summary>
            The dark green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Green">
            <summary>
            The green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Teal">
            <summary>
            The teal
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkCyan">
            <summary>
            The dark cyan
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DeepSkyBlue">
            <summary>
            The deep sky blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkTurquoise">
            <summary>
            The dark turquoise
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.MediumSpringGreen">
            <summary>
            The medium spring green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Lime">
            <summary>
            The lime
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.SpringGreen">
            <summary>
            The spring green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Aqua">
            <summary>
            The aqua
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Cyan">
            <summary>
            The cyan
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.MidnightBlue">
            <summary>
            The midnight blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DodgerBlue">
            <summary>
            The dodger blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LightSeaGreen">
            <summary>
            The light sea green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.ForestGreen">
            <summary>
            The forest green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.SeaGreen">
            <summary>
            The sea green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkSlateGray">
            <summary>
            The dark slate gray
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LimeGreen">
            <summary>
            The lime green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.MediumSeaGreen">
            <summary>
            The medium sea green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Turquoise">
            <summary>
            The turquoise
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.RoyalBlue">
            <summary>
            The royal blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.SteelBlue">
            <summary>
            The steel blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkSlateBlue">
            <summary>
            The dark slate blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.MediumTurquoise">
            <summary>
            The medium turquoise
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Indigo">
            <summary>
            The indigo
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkOliveGreen">
            <summary>
            The dark olive green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.CadetBlue">
            <summary>
            The cadet blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.CornflowerBlue">
            <summary>
            The cornflower blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.MediumAquamarine">
            <summary>
            The medium aquamarine
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DimGray">
            <summary>
            The dim gray
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.SlateBlue">
            <summary>
            The slate blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.OliveDrab">
            <summary>
            The olive drab
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.SlateGray">
            <summary>
            The slate gray
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LightSlateGray">
            <summary>
            The light slate gray
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.MediumSlateBlue">
            <summary>
            The medium slate blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LawnGreen">
            <summary>
            The lawn green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Chartreuse">
            <summary>
            The chartreuse
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Aquamarine">
            <summary>
            The aquamarine
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Maroon">
            <summary>
            The maroon
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Purple">
            <summary>
            The purple
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Olive">
            <summary>
            The olive
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Gray">
            <summary>
            The gray
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.SkyBlue">
            <summary>
            The sky blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LightSkyBlue">
            <summary>
            The light sky blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.BlueViolet">
            <summary>
            The blue violet
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkRed">
            <summary>
            The dark red
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkMagenta">
            <summary>
            The dark magenta
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.SaddleBrown">
            <summary>
            The saddle brown
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkSeaGreen">
            <summary>
            The dark sea green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LightGreen">
            <summary>
            The light green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.MediumPurple">
            <summary>
            The medium purple
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkViolet">
            <summary>
            The dark violet
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.PaleGreen">
            <summary>
            The pale green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkOrchid">
            <summary>
            The dark orchid
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.YellowGreen">
            <summary>
            The yellow green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Sienna">
            <summary>
            The sienna
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Brown">
            <summary>
            The brown
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkGray">
            <summary>
            The dark gray
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LightBlue">
            <summary>
            The light blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.GreenYellow">
            <summary>
            The green yellow
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.PaleTurquoise">
            <summary>
            The pale turquoise
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LightSteelBlue">
            <summary>
            The light steel blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.PowderBlue">
            <summary>
            The powder blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Firebrick">
            <summary>
            The firebrick
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkGoldenrod">
            <summary>
            The dark goldenrod
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.MediumOrchid">
            <summary>
            The medium orchid
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.RosyBrown">
            <summary>
            The rosy brown
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkKhaki">
            <summary>
            The dark khaki
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Silver">
            <summary>
            The silver
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.MediumVioletRed">
            <summary>
            The medium violet red
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.IndianRed">
            <summary>
            The indian red
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Peru">
            <summary>
            The peru
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Chocolate">
            <summary>
            The chocolate
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Tan">
            <summary>
            The tan
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LightGray">
            <summary>
            The light gray
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Thistle">
            <summary>
            The thistle
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Orchid">
            <summary>
            The orchid
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Goldenrod">
            <summary>
            The goldenrod
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.PaleVioletRed">
            <summary>
            The pale violet red
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Crimson">
            <summary>
            The crimson
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Gainsboro">
            <summary>
            The gainsboro
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Plum">
            <summary>
            The plum
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.BurlyWood">
            <summary>
            The burly wood
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LightCyan">
            <summary>
            The light cyan
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Lavender">
            <summary>
            The lavender
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkSalmon">
            <summary>
            The dark salmon
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Violet">
            <summary>
            The violet
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.PaleGoldenrod">
            <summary>
            The pale goldenrod
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LightCoral">
            <summary>
            The light coral
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Khaki">
            <summary>
            The khaki
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.AliceBlue">
            <summary>
            The alice blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Honeydew">
            <summary>
            The honeydew
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Azure">
            <summary>
            The azure
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.SandyBrown">
            <summary>
            The sandy brown
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Wheat">
            <summary>
            The wheat
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Beige">
            <summary>
            The beige
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.WhiteSmoke">
            <summary>
            The white smoke
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.MintCream">
            <summary>
            The mint cream
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.GhostWhite">
            <summary>
            The ghost white
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Salmon">
            <summary>
            The salmon
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.AntiqueWhite">
            <summary>
            The antique white
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Linen">
            <summary>
            The linen
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LightGoldenrodYellow">
            <summary>
            The light goldenrod yellow
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.OldLace">
            <summary>
            The old lace
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Red">
            <summary>
            The red
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Fuchsia">
            <summary>
            The fuchsia
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Magenta">
            <summary>
            The magenta
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DeepPink">
            <summary>
            The deep pink
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.OrangeRed">
            <summary>
            The orange red
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Tomato">
            <summary>
            The tomato
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.HotPink">
            <summary>
            The hot pink
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Coral">
            <summary>
            The coral
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkOrange">
            <summary>
            The dark orange
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LightSalmon">
            <summary>
            The light salmon
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Orange">
            <summary>
            The orange
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LightPink">
            <summary>
            The light pink
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Pink">
            <summary>
            The pink
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Gold">
            <summary>
            The gold
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.PeachPuff">
            <summary>
            The peach puff
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.NavajoWhite">
            <summary>
            The navajo white
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Moccasin">
            <summary>
            The moccasin
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Bisque">
            <summary>
            The bisque
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.MistyRose">
            <summary>
            The misty rose
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.BlanchedAlmond">
            <summary>
            The blanched almond
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.PapayaWhip">
            <summary>
            The papaya whip
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LavenderBlush">
            <summary>
            The lavender blush
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.SeaShell">
            <summary>
            The sea shell
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Cornsilk">
            <summary>
            The cornsilk
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LemonChiffon">
            <summary>
            The lemon chiffon
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.FloralWhite">
            <summary>
            The floral white
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Snow">
            <summary>
            The snow
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Yellow">
            <summary>
            The yellow
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LightYellow">
            <summary>
            The light yellow
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Ivory">
            <summary>
            The ivory
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.White">
            <summary>
            The white
            </summary>
        </member>
        <member name="T:TVGL.Color">
            <summary>
            Struct Color
            </summary>
        </member>
        <member name="M:TVGL.Color.#ctor(TVGL.KnownColors)">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.Color"/> struct.
            </summary>
            <param name="knownColor">Color of the known.</param>
        </member>
        <member name="M:TVGL.Color.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.Color"/> struct.
            </summary>
            <param name="argb">The ARGB.</param>
        </member>
        <member name="M:TVGL.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.Color"/> struct.
            </summary>
            <param name="a">a.</param>
            <param name="r">The r.</param>
            <param name="g">The g.</param>
            <param name="b">The b.</param>
        </member>
        <member name="M:TVGL.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.Color"/> struct.
            </summary>
            <param name="a">a.</param>
            <param name="r">The r.</param>
            <param name="g">The g.</param>
            <param name="b">The b.</param>
        </member>
        <member name="M:TVGL.Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.Color"/> struct.
            </summary>
            <param name="r">The r.</param>
            <param name="g">The g.</param>
            <param name="b">The b.</param>
        </member>
        <member name="F:TVGL.Color.A">
            <summary>
            A
            </summary>
        </member>
        <member name="F:TVGL.Color.B">
            <summary>
            A
            </summary>
        </member>
        <member name="F:TVGL.Color.R">
            <summary>
            A
            </summary>
        </member>
        <member name="F:TVGL.Color.G">
            <summary>
            A
            </summary>
        </member>
        <member name="M:TVGL.Color.Convert(System.Byte)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:TVGL.Color.Convert(System.Single)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Byte.</returns>
        </member>
        <member name="P:TVGL.Color.Af">
            <summary>
            Gets or sets the af.
            </summary>
            <value>The Alpha channel as a float whose range is [0..1].
            the value is allowed to be out of range</value>
        </member>
        <member name="P:TVGL.Color.Rf">
            <summary>
            Gets or sets the rf.
            </summary>
            <value>The rf.</value>
        </member>
        <member name="P:TVGL.Color.Gf">
            <summary>
            Gets or sets the gf.
            </summary>
            <value>The gf.</value>
        </member>
        <member name="P:TVGL.Color.Bf">
            <summary>
            Gets or sets the bf.
            </summary>
            <value>The bf.</value>
        </member>
        <member name="T:TVGL.Constants">
            <summary>
                Class Constants.
            </summary>
        </member>
        <member name="F:TVGL.Constants.RegExSolid">
            <summary>
                The reg ex solid
            </summary>
        </member>
        <member name="F:TVGL.Constants.RegExCoord">
            <summary>
                The reg ex coord
            </summary>
        </member>
        <member name="F:TVGL.Constants.NumberStyle">
            <summary>
                The number style
            </summary>
        </member>
        <member name="F:TVGL.Constants.EpsilonSameAngle">
            <summary>
                The epsilon same angle
            </summary>
        </member>
        <member name="F:TVGL.Constants.FloatSize">
            <summary>
                The float size
            </summary>
        </member>
        <member name="F:TVGL.Constants.VertexSize">
            <summary>
                The vertex size
            </summary>
        </member>
        <member name="F:TVGL.Constants.LookUpStringFormat">
            <summary>
                The look up string format
            </summary>
        </member>
        <member name="F:TVGL.Constants.MinProbabilityForPrimitiveClassifer">
            <summary>
                The minimum probability for primitive classifier
            </summary>
        </member>
        <member name="F:TVGL.Constants.ErrorForFaceInSurface">
            <summary>
                The error for face in surface
            </summary>
        </member>
        <member name="F:TVGL.Constants.SurfaceAreaFractionForPrimitive">
            <summary>
                The surface area fraction for primitive
            </summary>
        </member>
        <member name="F:TVGL.Constants.MinProbabilityForPrimitiveOfWingedEdge">
            <summary>
                The minimum probability for primitive of winged edge
            </summary>
        </member>
        <member name="F:TVGL.Constants.MaxNumberEdgesPerFace">
            <summary>
                The maximum number edges per face
            </summary>
        </member>
        <member name="M:TVGL.Constants.FindIndex``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
                Finds the index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="predicate">The predicate.</param>
            <returns>System.Int32.</returns>  
        </member>
        <member name="M:TVGL.Constants.FindIndex``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Finds the index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="predicate">The predicate.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:TVGL.CurvatureType">
            <summary>
                Enum CurvatureType
            </summary>
        </member>
        <member name="F:TVGL.CurvatureType.Concave">
            <summary>
                The concave
            </summary>
        </member>
        <member name="F:TVGL.CurvatureType.SaddleOrFlat">
            <summary>
                The saddle or flat
            </summary>
        </member>
        <member name="F:TVGL.CurvatureType.Convex">
            <summary>
                The convex
            </summary>
        </member>
        <member name="F:TVGL.CurvatureType.Undefined">
            <summary>
                The undefined
            </summary>
        </member>
        <member name="T:TVGL.FileType">
            <summary>
                Enum FileType
            </summary>
        </member>
        <member name="F:TVGL.FileType.Text">
            <summary>
                The file is text.
            </summary>
        </member>
        <member name="F:TVGL.FileType.Binary">
            <summary>
            The file is binary.
            </summary>
        </member>
        <member name="T:TVGL.NoEqualSort">
            <summary>
                A comparer for optimization that can be used for either
                minimization or maximization.
            </summary>
        </member>
        <member name="M:TVGL.NoEqualSort.Compare(System.Double,System.Double)">
            <summary>
                Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
                A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as
                shown in the following table.Value Meaning Less than zero<paramref name="x" /> is less than <paramref name="y" />
                .Zero<paramref name="x" /> equals <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than
                <paramref name="y" />.
            </returns>
        </member>
        <member name="T:TVGL.DenseRegion">
            <summary>
            Class DenseRegion.
            </summary>
        </member>
        <member name="M:TVGL.DenseRegion.IsNewMemberOf(TVGL.Tessellation.PolygonalFace)">
            <summary>
            Determines whether [is new member of] [the specified face].
            </summary>
            <param name="face">The face.</param>
            <returns><c>true</c> if [is new member of] [the specified face]; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TVGL.DenseRegion.UpdateWith(TVGL.Tessellation.PolygonalFace)">
            <summary>
            Updates the with.
            </summary>
            <param name="face">The face.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TVGL.DenseRegion.#ctor(System.Collections.Generic.List{TVGL.Tessellation.PolygonalFace})">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.DenseRegion"/> class.
            </summary>
            <param name="faces">The faces.</param>
        </member>
        <member name="T:TVGL.IOFunctions.STLFileData">
            <summary>
            Provides an importer for StereoLithography .StL files.
            </summary>
            <remarks>The format is documented on <a href="http://en.wikipedia.org/wiki/STL_(file_format)">Wikipedia</a>.</remarks>
        </member>
        <member name="F:TVGL.IOFunctions.STLFileData.NormalRegex">
            <summary>
            The regular expression used to parse normal vectors.
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.STLFileData.VertexRegex">
            <summary>
            The regular expression used to parse vertices.
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.STLFileData._lastColor">
            <summary>
            The last color
            </summary>
        </member>
        <member name="M:TVGL.IOFunctions.STLFileData.ReadTriangle(System.IO.BinaryReader)">
            <summary>
            Reads a triangle from a binary STL file.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:TVGL.IOFunctions.STLFileData.ReadFloatToDouble(System.IO.BinaryReader)">
            <summary>
            Reads a float (4 byte)
            </summary>
            <param name="reader">The reader.</param>
            <returns>The float.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.STLFileData.ReadUInt16(System.IO.BinaryReader)">
            <summary>
            Reads a 16-bit unsigned integer.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The unsigned integer.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.STLFileData.ReadUInt32(System.IO.BinaryReader)">
            <summary>
            Reads a 32-bit unsigned integer.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The unsigned integer.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.STLFileData.ReadFacet(System.IO.StreamReader,System.String)">
            <summary>
            Reads a facet.
            </summary>
            <param name="reader">The stream reader.</param>
            <param name="normal">The normal.</param>
        </member>
        <member name="M:TVGL.IOFunctions.STLFileData.TryReadAscii(System.IO.Stream,System.Collections.Generic.List{TVGL.IOFunctions.STLFileData}@)">
            <summary>
            Reads the model in ASCII format from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="stlData">The STL data.</param>
            <returns>True if the model was loaded successfully.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.STLFileData.TryReadBinary(System.IO.Stream,System.Collections.Generic.List{TVGL.IOFunctions.STLFileData}@)">
            <summary>
            Tries the read binary.
            </summary>
            <param name="stream">The stream.</param>
            <param name="stlData">The STL data.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.IO.EndOfStreamException">Incomplete file</exception>
        </member>
        <member name="P:TVGL.IOFunctions.STLFileData.HasColorSpecified">
            <summary>
            Gets the has color specified.
            </summary>
            <value>The has color specified.</value>
        </member>
        <member name="P:TVGL.IOFunctions.STLFileData.Colors">
            <summary>
            Gets or sets the colors.
            </summary>
            <value>The colors.</value>
        </member>
        <member name="P:TVGL.IOFunctions.STLFileData.Vertices">
            <summary>
            Gets or sets the Vertices.
            </summary>
            <value>The vertices.</value>
        </member>
        <member name="P:TVGL.IOFunctions.STLFileData.Normals">
            <summary>
            Gets or sets the normals.
            </summary>
            <value>The normals.</value>
        </member>
        <member name="P:TVGL.IOFunctions.STLFileData.Name">
            <summary>
            Gets the file header.
            </summary>
            <value>The header.</value>
        </member>
        <member name="T:TVGL.Cone">
            <summary>
            The class for Cone primitives.
            </summary>
        </member>
        <member name="F:TVGL.Cone.IsPositive">
            <summary>
            Is the cone positive? (false is negative)
            </summary>
        </member>
        <member name="P:TVGL.Cone.Aperture">
            <summary>
            Gets the aperture.
            </summary>
            <value>
            The aperture.
            </value>
        </member>
        <member name="P:TVGL.Cone.Apex">
            <summary>
            Gets the apex.
            </summary>
            <value>
            The apex.
            </value>
        </member>
        <member name="P:TVGL.Cone.Axis">
            <summary>
            Gets the axis.
            </summary>
            <value>
            The axis.
            </value>
        </member>
        <member name="T:TVGL.Cylinder">
            <summary>
            The class for Cylinder primitives.
            </summary>
        </member>
        <member name="F:TVGL.Cylinder.IsPositive">
            <summary>
            Is the cylinder positive? (false is negative)
            </summary>
        </member>
        <member name="M:TVGL.Cylinder.#ctor(System.Collections.Generic.IEnumerable{TVGL.Tessellation.PolygonalFace},System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.Cylinder"/> class.
            </summary>
            <param name="facesAll">The faces all.</param>
            <param name="axis">The axis.</param>
        </member>
        <member name="M:TVGL.Cylinder.#ctor(TVGL.Tessellation.Edge)">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.Cylinder"/> class.
            </summary>
            <param name="edge">The edge.</param>
            <exception cref="T:System.Exception">Edge used to define cylinder is flat.</exception>
        </member>
        <member name="M:TVGL.Cylinder.IsNewMemberOf(TVGL.Tessellation.PolygonalFace)">
            <summary>
            Determines whether [is new member of] [the specified face].
            </summary>
            <param name="face">The face.</param>
            <returns><c>true</c> if [is new member of] [the specified face]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TVGL.Cylinder.UpdateWith(TVGL.Tessellation.PolygonalFace)">
            <summary>
            Updates the with.
            </summary>
            <param name="face">The face.</param>
        </member>
        <member name="P:TVGL.Cylinder.Anchor">
            <summary>
            Gets the anchor.
            </summary>
            <value>The anchor.</value>
        </member>
        <member name="P:TVGL.Cylinder.Axis">
            <summary>
            Gets the direction.
            </summary>
            <value>The direction.</value>
        </member>
        <member name="P:TVGL.Cylinder.Radius">
            <summary>
            Gets the radius.
            </summary>
            <value>The radius.</value>
        </member>
        <member name="T:TVGL.Flat">
            <summary>
            Class Flat.
            </summary>
        </member>
        <member name="M:TVGL.Flat.#ctor(System.Collections.Generic.IEnumerable{TVGL.Tessellation.PolygonalFace})">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.Flat"/> class.
            </summary>
            <param name="Faces">The faces.</param>
        </member>
        <member name="M:TVGL.Flat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.Flat"/> class.
            </summary>
        </member>
        <member name="M:TVGL.Flat.#ctor(System.Double,System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.Flat"/> class.
            </summary>
            <param name="distanceToOrigin">The distance to origin.</param>
            <param name="normal">The normal.</param>
        </member>
        <member name="M:TVGL.Flat.#ctor(System.Double[],System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.Flat"/> class.
            </summary>
            <param name="pointOnPlane">a point on plane.</param>
            <param name="normal">The normal.</param>
        </member>
        <member name="M:TVGL.Flat.IsNewMemberOf(TVGL.Tessellation.PolygonalFace)">
            <summary>
            Determines whether [is new member of] [the specified face].
            </summary>
            <param name="face">The face.</param>
            <returns><c>true</c> if [is new member of] [the specified face]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TVGL.Flat.UpdateWith(TVGL.Tessellation.PolygonalFace)">
            <summary>
            Updates the with.
            </summary>
            <param name="face">The face.</param>
        </member>
        <member name="P:TVGL.Flat.DistanceToOrigin">
            <summary>
            Gets or sets the anchor.
            </summary>
            <value>The anchor.</value>
        </member>
        <member name="P:TVGL.Flat.Normal">
            <summary>
            Gets or sets the normal.
            </summary>
            <value>The normal.</value>
        </member>
        <member name="T:TVGL.Sphere">
            <summary>
            Class Sphere.
            </summary>
        </member>
        <member name="F:TVGL.Sphere.IsPositive">
            <summary>
            Is the sphere positive? (false is negative)
            </summary>
        </member>
        <member name="P:TVGL.Sphere.Center">
            <summary>
            Gets the center.
            </summary>
            <value>
            The center.
            </value>
        </member>
        <member name="P:TVGL.Sphere.Radius">
            <summary>
            Gets the radius.
            </summary>
            <value>
            The radius.
            </value>
        </member>
        <member name="T:TVGL.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:TVGL.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TVGL.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:TVGL.BoundingBox">
            <summary>
            The BoundingBox struct is a simple structure for representing an arbitrarily oriented box
            or 3D prismatic rectangle. It simply includes the orientation as three unit vectors in 
            "Directions", the extreme vertices, and the volume.
            </summary>
        </member>
        <member name="F:TVGL.BoundingBox.Volume">
            <summary>
            The volume of the bounding box.
            </summary>
        </member>
        <member name="F:TVGL.BoundingBox.ExtremeVertices">
            <summary>
            The extreme vertices which are vertices of the tessellated solid that are on the faces
            of the bounding box. These are not the corners of the bounding box.
            </summary>
        </member>
        <member name="F:TVGL.BoundingBox.Directions">
            <summary>
            The Directions are the three unit vectors that describe the orientation of the box.
            </summary>
        </member>
        <member name="M:TVGL.BoundingBox.#ctor(System.Double,MIConvexHull.IVertex[],System.Double[][])">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.BoundingBox"/> class.
            </summary>
            <param name="volume">The volume.</param>
            <param name="extremeVertices">The extreme vertices.</param>
            <param name="directions">The directions.</param>
        </member>
        <member name="T:TVGL.MinimumEnclosure">
            <summary>
            The MinimumEnclosure class includes static functions for defining smallest enclosures for a 
            tessellated solid. For example: convex hull, minimum bounding box, or minimum bounding sphere.
            </summary>
            <summary>
            The MinimumEnclosure class includes static functions for defining smallest enclosures for a 
            tesselated solid. For example: convex hull, minimum bounding box, or minimum bounding sphere.
            </summary>
        </member>
        <member name="F:TVGL.MinimumEnclosure.MaxDeltaAngle">
            <summary>
            The maximum delta angle
            </summary>
        </member>
        <member name="M:TVGL.MinimumEnclosure.ConvexHull2D(System.Collections.Generic.IList{MIConvexHull.IVertex},System.Double[])">
            <summary>
            Returns the 2D convex hull for the 3D vertices within the plane defined by the normal, direction.
            The returned points are a List of points (3D double array) that represent the points as they have been
            converted to the 2D plane. The vertices are not altered by this function. This is a simple two-line function
            that first call the non-destructive "Get2DProjectionPoints" and then the overload of "ConvexHull2D".
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="direction">The direction.</param>
            <returns>List&lt;System.Double[]&gt;.</returns>
        </member>
        <member name="M:TVGL.MinimumEnclosure.ConvexHull2D(System.Collections.Generic.IList{System.Double[]})">
            <summary>                   
            Returns the 2D convex hull for the x and y values of the vertices - ignoring their z coordinate. This is essentially
            called by the other overload of "ConvexHull2D".
            </summary>
            <param name="origVertices">The original vertices.</param>
            <returns>List&lt;System.Double[]&gt;.</returns>
        </member>
        <member name="M:TVGL.MinimumEnclosure.OrientedBoundingBox(TVGL.Tessellation.TessellatedSolid)">
            <summary>
            Orienteds the bounding box.
            </summary>
            <param name="ts">The ts.</param>
            <returns>BoundingBox.</returns>
        </member>
        <member name="M:TVGL.MinimumEnclosure.FindOBBAlongDirection(System.Collections.Generic.IList{MIConvexHull.IVertex},System.Double[])">
            <summary>
            Finds the minimum oriented bounding rectangle (2D). The 3D points of a tessellated solid
            are projected to the plane defined by "direction". This returns a BoundingBox structure
            where the first direction is the same as the prescribed direction and the other two are
            in-plane unit vectors.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="direction">The direction.</param>
            <returns>BoundingBox.</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:TVGL.MinimumEnclosure.Get2DProjectionPoints(System.Collections.Generic.IList{MIConvexHull.IVertex},System.Double[],System.Double[0:,0:]@)">
            <summary>
            Transforms the vertices so that they are in the x-y plane (although the z-values will be non-zero)
            This destructively alters the vertices. However, the backTransform is provided to change the points
            back if needed.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="direction">The direction.</param>
            <param name="backTransform">The back transform.</param>
        </member>
        <member name="M:TVGL.MinimumEnclosure.Get2DProjectionPoints(System.Collections.Generic.IList{MIConvexHull.IVertex},System.Double[])">
            <summary>                      
            Returns the positions (array of 3D arrays) of the vertices as that they would be represted in 
            the x-y plane (although the z-values will be non-zero). This does not destructively alter
            the vertices. 
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="direction">The direction.</param>
            <returns>System.Double[][].</returns>
        </member>
        <member name="M:TVGL.MinimumEnclosure.Get2DProjectionPoints(System.Collections.Generic.IList{System.Double[]},System.Double[])">
            <summary>                                  
            Returns the positions (array of 3D arrays) of the vertices as that they would be represted in 
            the x-y plane (although the z-values will be non-zero). This does not destructively alter
            the vertices. 
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="direction">The direction.</param>
            <returns>System.Double[][].</returns>
        </member>
        <member name="M:TVGL.MinimumEnclosure.GetLengthAndExtremeVertices(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{MIConvexHull.IVertex},MIConvexHull.IVertex@,MIConvexHull.IVertex@)">
            <summary>
            Given a direction, dir, this function returns the maximum length along this direction
            for the provided vertices as well as the two vertices that represent the extremes.
            </summary>
            <param name="dir">The dir.</param>
            <param name="vertices">The vertices.</param>
            <param name="vLow">The v low.</param>
            <param name="vHigh">The v high.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TVGL.MinimumEnclosure.RotatingCalipers2DMethod(System.Collections.Generic.IList{System.Double[]},System.Double@)">
            <summary>
            Rotatings the calipers2 d method.
            </summary>
            <param name="points">The points.</param>
            <param name="minArea">The minimum area.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:TVGL.SortedList`2">
            <summary>
                Represents a collection of key/value pairs that are sorted by key based on the associated
                <see cref="T:System.Collections.Generic.IComparer`1" /> implementation.
            </summary>
            <typeparam name="TKey">The type of keys in the collection.</typeparam>
            <typeparam name="TValue">The type of values in the collection.</typeparam>
        </member>
        <member name="M:TVGL.SortedList`2.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2" /> class that is empty, has
                the default initial capacity, and uses the default <see cref="T:System.Collections.Generic.IComparer`1" />.
            </summary>
        </member>
        <member name="M:TVGL.SortedList`2.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2" /> class that is empty, has
                the specified initial capacity, and uses the default <see cref="T:System.Collections.Generic.IComparer`1" />.
            </summary>
            <param name="capacity">
                The initial number of elements that the <see cref="T:System.Collections.Generic.SortedList`2" />
                can contain.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" /> is less than zero.</exception>
        </member>
        <member name="M:TVGL.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2" /> class that is empty, has
                the default initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IComparer`1" />.
            </summary>
            <param name="comparer">
                The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing
                keys.-or-null to use the default <see cref="T:System.Collections.Generic.Comparer`1" /> for the type of the key.
            </param>
        </member>
        <member name="M:TVGL.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2" /> class that is empty, has
                the specified initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IComparer`1" />.
            </summary>
            <param name="capacity">
                The initial number of elements that the <see cref="T:System.Collections.Generic.SortedList`2" />
                can contain.
            </param>
            <param name="comparer">
                The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing
                keys.-or-null to use the default <see cref="T:System.Collections.Generic.Comparer`1" /> for the type of the key.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" /> is less than zero.</exception>
        </member>
        <member name="M:TVGL.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
                Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2" /> class that contains
                elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2" />, has sufficient
                capacity to accommodate the number of elements copied, and uses the default
                <see cref="T:System.Collections.Generic.IComparer`1" />.
            </summary>
            <param name="dictionary">
                The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the
                new <see cref="T:System.Collections.Generic.SortedList`2" />.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dictionary" /> contains one or more duplicate keys.</exception>
        </member>
        <member name="M:TVGL.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2" /> class that contains
                elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2" />, has sufficient
                capacity to accommodate the number of elements copied, and uses the specified
                <see cref="T:System.Collections.Generic.IComparer`1" />.
            </summary>
            <param name="dictionary">
                The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the
                new <see cref="T:System.Collections.Generic.SortedList`2" />.
            </param>
            <param name="comparer">
                The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing
                keys.-or-null to use the default <see cref="T:System.Collections.Generic.Comparer`1" /> for the type of the key.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dictionary" /> contains one or more duplicate keys.</exception>
        </member>
        <member name="M:TVGL.SortedList`2.Add(`0,`1)">
            <summary>
                Adds an element with the specified key and value into the <see cref="T:System.Collections.Generic.SortedList`2" />.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
            <exception cref="T:System.ArgumentException">
                An element with the same key already exists in the
                <see cref="T:System.Collections.Generic.SortedList`2" />.
            </exception>
        </member>
        <member name="M:TVGL.SortedList`2.Clear">
            <summary>
                Removes all elements from the <see cref="T:System.Collections.Generic.SortedList`2" />.
            </summary>
        </member>
        <member name="M:TVGL.SortedList`2.ContainsKey(`0)">
            <summary>
                Determines whether the <see cref="T:System.Collections.Generic.SortedList`2" /> contains a specific key.
            </summary>
            <returns>
                true if the <see cref="T:System.Collections.Generic.SortedList`2" /> contains an element with the specified key;
                otherwise, false.
            </returns>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.SortedList`2" />.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
        </member>
        <member name="M:TVGL.SortedList`2.TryGetValue(`0,`1@)">
            <summary>
                Gets the value associated with the specified key.
            </summary>
            <returns>
                true if the <see cref="T:System.Collections.Generic.SortedList`2" /> contains an element with the specified key;
                otherwise, false.
            </returns>
            <param name="key">The key whose value to get.</param>
            <param name="value">
                When this method returns, the value associated with the specified key, if the key is found;
                otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed
                uninitialized.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
        </member>
        <member name="M:TVGL.SortedList`2.Remove(`0)">
            <summary>
                Removes the element with the specified key from the <see cref="T:System.Collections.Generic.SortedList`2" />.
            </summary>
            <returns>
                true if the element is successfully removed; otherwise, false.  This method also returns false if
                <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.SortedList`2" />.
            </returns>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
        </member>
        <member name="M:TVGL.SortedList`2.ContainsValue(`1)">
            <summary>
                Determines whether the <see cref="T:System.Collections.Generic.SortedList`2" /> contains a specific value.
            </summary>
            <returns>
                true if the <see cref="T:System.Collections.Generic.SortedList`2" /> contains an element with the specified value;
                otherwise, false.
            </returns>
            <param name="value">
                The value to locate in the <see cref="T:System.Collections.Generic.SortedList`2" />. The value can
                be null for reference types.
            </param>
        </member>
        <member name="M:TVGL.SortedList`2.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.SortedList`2" />.
            </summary>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerator`1" /> of type
                <see cref="T:System.Collections.Generic.KeyValuePair`2" /> for the
                <see cref="T:System.Collections.Generic.SortedList`2" />.
            </returns>
        </member>
        <member name="M:TVGL.SortedList`2.IndexOfKey(`0)">
            <summary>
                Searches for the specified key and returns the zero-based index within the entire
                <see cref="T:System.Collections.Generic.SortedList`2" />.
            </summary>
            <returns>
                The zero-based index of <paramref name="key" /> within the entire
                <see cref="T:System.Collections.Generic.SortedList`2" />, if found; otherwise, -1.
            </returns>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.SortedList`2" />.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
        </member>
        <member name="M:TVGL.SortedList`2.IndexOfValue(`1)">
            <summary>
                Searches for the specified value and returns the zero-based index of the first occurrence within the entire
                <see cref="T:System.Collections.Generic.SortedList`2" />.
            </summary>
            <returns>
                The zero-based index of the first occurrence of <paramref name="value" /> within the entire
                <see cref="T:System.Collections.Generic.SortedList`2" />, if found; otherwise, -1.
            </returns>
            <param name="value">
                The value to locate in the <see cref="T:System.Collections.Generic.SortedList`2" />.  The value can
                be null for reference types.
            </param>
        </member>
        <member name="M:TVGL.SortedList`2.RemoveAt(System.Int32)">
            <summary>
                Removes the element at the specified index of the <see cref="T:System.Collections.Generic.SortedList`2" />.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index" /> is less than zero.-or-
                <paramref name="index" /> is equal to or greater than
                <see cref="P:System.Collections.Generic.SortedList`2.Count" />.
            </exception>
        </member>
        <member name="M:TVGL.SortedList`2.TrimExcess">
            <summary>
                Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.SortedList`2" />,
                if that number is less than 90 percent of current capacity.
            </summary>
        </member>
        <member name="P:TVGL.SortedList`2.Capacity">
            <summary>
                Gets or sets the number of elements that the <see cref="T:System.Collections.Generic.SortedList`2" /> can contain.
            </summary>
            <returns>
                The number of elements that the <see cref="T:System.Collections.Generic.SortedList`2" /> can contain.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <see cref="P:System.Collections.Generic.SortedList`2.Capacity" /> is set to a value that is less than
                <see cref="P:System.Collections.Generic.SortedList`2.Count" />.
            </exception>
            <exception cref="T:System.OutOfMemoryException">There is not enough memory available on the system.</exception>
        </member>
        <member name="P:TVGL.SortedList`2.Comparer">
            <summary>
                Gets the <see cref="T:System.Collections.Generic.IComparer`1" /> for the sorted list.
            </summary>
            <returns>
                The <see cref="T:System.IComparable`1" /> for the current <see cref="T:System.Collections.Generic.SortedList`2" />.
            </returns>
        </member>
        <member name="P:TVGL.SortedList`2.Keys">
            <summary>
                Gets a collection containing the keys in the <see cref="T:System.Collections.Generic.SortedList`2" />.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IList`1" /> containing the keys in the
                <see cref="T:System.Collections.Generic.SortedList`2" />.
            </returns>
        </member>
        <member name="P:TVGL.SortedList`2.Values">
            <summary>
                Gets a collection containing the values in the <see cref="T:System.Collections.Generic.SortedList`2" />.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IList`1" /> containing the values in the
                <see cref="T:System.Collections.Generic.SortedList`2" />.
            </returns>
        </member>
        <member name="P:TVGL.SortedList`2.Count">
            <summary>
                Gets the number of key/value pairs contained in the <see cref="T:System.Collections.Generic.SortedList`2" />.
            </summary>
            <returns>
                The number of key/value pairs contained in the <see cref="T:System.Collections.Generic.SortedList`2" />.
            </returns>
        </member>
        <member name="P:TVGL.SortedList`2.Item(`0)">
            <summary>
                Gets or sets the value associated with the specified key.
            </summary>
            <returns>
                The value associated with the specified key. If the specified key is not found, a get operation throws a
                <see cref="T:System.Collections.Generic.KeyNotFoundException" /> and a set operation creates a new element using
                the specified key.
            </returns>
            <param name="key">The key whose value to get or set.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
                The property is retrieved and
                <paramref name="key" /> does not exist in the collection.
            </exception>
        </member>
        <member name="T:TVGL.Tessellation.Edge">
            <summary>
                The straight-line edge class. It connects to two nodes and lies between two faces.
            </summary>
        </member>
        <member name="M:TVGL.Tessellation.Edge.#ctor(TVGL.Tessellation.Vertex,TVGL.Tessellation.Vertex,TVGL.Tessellation.PolygonalFace,TVGL.Tessellation.PolygonalFace,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Tessellation.Edge"/> class.
            </summary>
            <param name="fromVertex">From vertex.</param>
            <param name="toVertex">To vertex.</param>
            <param name="ownedFace">The face.</param>
            <param name="otherFace">The other face.</param>
            <param name="doublyLinkedFaces"></param>
            <param name="doublyLinkedVertices"></param>
        </member>
        <member name="M:TVGL.Tessellation.Edge.OtherVertex(TVGL.Tessellation.Vertex)">
            <summary>
                Others the vertex.
            </summary>
            <param name="v">The v.</param>
            <returns>Vertex.</returns>
            <exception cref="T:System.Exception">OtherVertex: Vertex thought to connect to edge, but it doesn't.</exception>
        </member>
        <member name="F:TVGL.Tessellation.Edge.From">
            <summary>
                Gets the From Vertex.
            </summary>
            <value>
                From.
            </value>
        </member>
        <member name="F:TVGL.Tessellation.Edge.To">
            <summary>
                Gets the To Vertex.
            </summary>
            <value>
                To.
            </value>
        </member>
        <member name="F:TVGL.Tessellation.Edge.Length">
            <summary>
                Gets the length.
            </summary>
            <value>
                The length.
            </value>
        </member>
        <member name="F:TVGL.Tessellation.Edge.Vector">
            <summary>
                Gets the vector.
            </summary>
            <value>
                The vector.
            </value>
        </member>
        <member name="M:TVGL.Tessellation.Edge.DefineInternalEdgeAngle">
            <summary>
                Defines the edge angle.
            </summary>
            <param name="edges">The edges.</param>
        </member>
        <member name="P:TVGL.Tessellation.Edge.OwnedFace">
            <summary>
                Gets the owned face (the face in which the from-to direction makes sense
                - that is, produces the proper cross-product normal).
            </summary>
            <value>
                The owned face.
            </value>
        </member>
        <member name="P:TVGL.Tessellation.Edge.OtherFace">
            <summary>
                Gets the other face (the face in which the from-to direction doesn not
                make sense- that is, produces the negative cross-product normal).
            </summary>
            <value>
                The other face.
            </value>
        </member>
        <member name="P:TVGL.Tessellation.Edge.InternalAngle">
            <summary>
                Gets the internal angle in radians.
            </summary>
            <value>
                The internal angle.
            </value>
        </member>
        <member name="P:TVGL.Tessellation.Edge.Curvature">
            <summary>
                Gets the curvature of the surface.
            </summary>
            <value>
                The curvature of the surface.
            </value>
        </member>
        <member name="P:TVGL.Tessellation.Edge.PartofConvexHull">
            <summary>
                Gets a value indicating whether [is part of the convex hull].
            </summary>
            <value>
                <c>true</c> if [is part of the convex hull]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:TVGL.Tessellation.PolygonalFace">
            <summary>
            This class defines a flat polygonal face. The implementation began with triangular faces in mind. 
            It should be double-checked for higher polygons.   It inherits from the ConvexFace class in 
            MIConvexHull
            </summary>
        </member>
        <member name="M:TVGL.Tessellation.PolygonalFace.#ctor(System.Double[],TVGL.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.Tessellation.PolygonalFace"/> class.
            </summary>
            <param name="normal">The normal.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:TVGL.Tessellation.PolygonalFace.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.Tessellation.PolygonalFace"/> class.
            </summary>
            <param name="normal">The normal.</param>
        </member>
        <member name="M:TVGL.Tessellation.PolygonalFace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.Tessellation.PolygonalFace"/> class.
            </summary>
        </member>
        <member name="M:TVGL.Tessellation.PolygonalFace.#ctor(System.Collections.Generic.IList{TVGL.Tessellation.Vertex})">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.Tessellation.PolygonalFace"/> class.
            </summary>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="M:TVGL.Tessellation.PolygonalFace.Copy">
            <summary>
            Copies this instance.
            </summary>
            <returns>PolygonalFace.</returns>
        </member>
        <member name="P:TVGL.Tessellation.PolygonalFace.IsConvex">
            <summary>
            Gets the is convex.
            </summary>
            <value>The is convex.</value>
        </member>
        <member name="P:TVGL.Tessellation.PolygonalFace.Normal">
            <summary>
            Gets the normal.
            </summary>
            <value>
            The normal.
            </value>
        </member>
        <member name="P:TVGL.Tessellation.PolygonalFace.Vertices">
            <summary>
            Gets the vertices.
            </summary>
            <value>
            The vertices.
            </value>
        </member>
        <member name="P:TVGL.Tessellation.PolygonalFace.Edges">
            <summary>
            Gets the edges.
            </summary>
            <value>
            The edges.
            </value>
        </member>
        <member name="P:TVGL.Tessellation.PolygonalFace.Center">
            <summary>
            Gets the center.
            </summary>
            <value>
            The center.
            </value>
        </member>
        <member name="P:TVGL.Tessellation.PolygonalFace.Area">
            <summary>
            Gets the area.
            </summary>
            <value>
            The area.
            </value>
        </member>
        <member name="P:TVGL.Tessellation.PolygonalFace.color">
            <summary>
            Gets or sets the color.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:TVGL.Tessellation.PolygonalFace.Curvature">
            <summary>
            Gets the curvature.
            </summary>
            <value>
            The curvature.
            </value>
        </member>
        <member name="P:TVGL.Tessellation.PolygonalFace.PartofConvexHull">
            <summary>
            Gets a value indicating whether [it is part of the convex hull].
            </summary>
            <value>
              <c>true</c> if [it is part of the convex hull]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TVGL.Tessellation.PolygonalFace.AdjacentFaces">
            <summary>
            Gets the adjacent faces.
            </summary>
            <value>The adjacent faces.</value>
        </member>
        <member name="T:TVGL.Tessellation.TessellatedSolid">
            <tags>help</tags>             
            <summary>
                Class TessellatedSolid.
            </summary>
            <remarks>This is the currently the <strong>main</strong> class within TVGL all filetypes are read in as a TessellatedSolid, and
            all interesting operations work on the TessellatedSolid.</remarks>
        </member>
        <member name="F:TVGL.Tessellation.TessellatedSolid._bounds">
            <summary>
                The _bounds
            </summary>
        </member>
        <member name="F:TVGL.Tessellation.TessellatedSolid.HasUniformColor">
            <summary>
            The has uniform color
            </summary>
        </member>
        <member name="F:TVGL.Tessellation.TessellatedSolid.SolidColor">
            <summary>
            The solid color
            </summary>
        </member>
        <member name="M:TVGL.Tessellation.TessellatedSolid.#ctor">
            <summary>
                Prevents a default instance of the <see cref="T:TVGL.Tessellation.TessellatedSolid"/> class from being created.
            </summary>
        </member>
        <member name="M:TVGL.Tessellation.TessellatedSolid.#ctor(System.String,System.Collections.Generic.List{System.Double[]},System.Collections.Generic.List{System.Collections.Generic.List{System.Double[]}},System.Collections.Generic.List{TVGL.Color},System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Tessellation.TessellatedSolid"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="normals">The normals.</param>
            <param name="vertsPerFace">The verts per face.</param>
            <param name="colors">The colors.</param>
            <param name="performInParallel">The perform in parallel.</param>
        </member>
        <member name="M:TVGL.Tessellation.TessellatedSolid.#ctor(System.String,System.Collections.Generic.List{System.Double[]},System.Collections.Generic.List{System.Collections.Generic.List{System.Int32}},System.Collections.Generic.List{TVGL.Color},System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Tessellation.TessellatedSolid"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="vertices">The vertices.</param>
            <param name="faceToVertexIndices">The face to vertex indices.</param>
            <param name="colors">The colors.</param>
            <param name="performInParallel">if set to <c>true</c> [perform in parallel].</param>
        </member>
        <member name="M:TVGL.Tessellation.TessellatedSolid.MakeFaces(System.Collections.Generic.IList{System.Double[]})">
            <summary>
            Makes the faces.
            </summary>
            <param name="normals">The normals.</param>
        </member>
        <member name="M:TVGL.Tessellation.TessellatedSolid.MakeVertices(System.Collections.Generic.ICollection{System.Collections.Generic.List{System.Double[]}},System.Collections.Generic.List{System.Collections.Generic.List{System.Int32}},System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Makes the vertices.
            </summary>
            <param name="vertsPerFace">The verts per face.</param>
            <param name="faceToVertexIndices">The face to vertex indices.</param>
            <param name="indicesToRemove">The indices to remove.</param>
        </member>
        <member name="M:TVGL.Tessellation.TessellatedSolid.MakeVertices(System.Collections.Generic.IList{System.Double[]})">
            <summary>
                Makes the vertices.
            </summary>
            <param name="listOfVertices">The list of vertices.</param>
        </member>
        <member name="M:TVGL.Tessellation.TessellatedSolid.DefineFaceCentersAndColors(System.Collections.Generic.List{TVGL.Color})">
            <summary>
                Defines the face centers.
            </summary>
        </member>
        <member name="M:TVGL.Tessellation.TessellatedSolid.DefineVolumeAndAreas">
            <summary>
                Defines the volume and areas.
            </summary>
        </member>
        <member name="M:TVGL.Tessellation.TessellatedSolid.DefineBoundingBoxAndCenter">
            <summary>
                Defines the bounding box and center.
            </summary>
        </member>
        <member name="M:TVGL.Tessellation.TessellatedSolid.RemoveDuplicateFacesAndLinkToVertices(System.Collections.Generic.List{System.Collections.Generic.List{System.Int32}})">
            <summary>
                Removes the duplicate faces and link to vertices.
            </summary>
        </member>
        <member name="M:TVGL.Tessellation.TessellatedSolid.ContainsDuplicateIndices(System.Collections.Generic.List{System.Int32})">
            <summary>
                Duplicates the vertices.
            </summary>
            <param name="orderedIndices">The ordered indices.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TVGL.Tessellation.TessellatedSolid.Copy">
            <summary>
                Copies this instance.
            </summary>
            <returns>TessellatedSolid.</returns>
        </member>
        <member name="M:TVGL.Tessellation.TessellatedSolid.DefineVertexCurvature">
            <summary>
                Defines the vertex curvature.
            </summary>
        </member>
        <member name="M:TVGL.Tessellation.TessellatedSolid.ConnectConvexHullToObjects">
            <summary>
                Connects the convex hull to objects.
            </summary>
        </member>
        <member name="M:TVGL.Tessellation.TessellatedSolid.CreateConvexHull">
            <summary>
                Creates the convex hull.
            </summary>
        </member>
        <member name="M:TVGL.Tessellation.TessellatedSolid.DefineFaceCurvature">
            <summary>
                Defines the face curvature. Depends on DefineEdgeAngle
            </summary>
        </member>
        <member name="P:TVGL.Tessellation.TessellatedSolid.Center">
            <summary>
                Gets the center.
            </summary>
            <value>The center.</value>
        </member>
        <member name="P:TVGL.Tessellation.TessellatedSolid.ZMax">
            <summary>
                Gets the z maximum.
            </summary>
            <value>The z maximum.</value>
        </member>
        <member name="P:TVGL.Tessellation.TessellatedSolid.YMax">
            <summary>
                Gets the y maximum.
            </summary>
            <value>The y maximum.</value>
        </member>
        <member name="P:TVGL.Tessellation.TessellatedSolid.XMax">
            <summary>
                Gets the x maximum.
            </summary>
            <value>The x maximum.</value>
        </member>
        <member name="P:TVGL.Tessellation.TessellatedSolid.ZMin">
            <summary>
                Gets the z minimum.
            </summary>
            <value>The z minimum.</value>
        </member>
        <member name="P:TVGL.Tessellation.TessellatedSolid.YMin">
            <summary>
                Gets the y minimum.
            </summary>
            <value>The y minimum.</value>
        </member>
        <member name="P:TVGL.Tessellation.TessellatedSolid.XMin">
            <summary>
                Gets the x minimum.
            </summary>
            <value>The x minimum.</value>
        </member>
        <member name="P:TVGL.Tessellation.TessellatedSolid.Bounds">
            <summary>
                Gets the bounds.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:TVGL.Tessellation.TessellatedSolid.Volume">
            <summary>
                Gets the volume.
            </summary>
            <value>The volume.</value>
        </member>
        <member name="P:TVGL.Tessellation.TessellatedSolid.SurfaceArea">
            <summary>
                Gets the surface area.
            </summary>
            <value>The surface area.</value>
        </member>
        <member name="P:TVGL.Tessellation.TessellatedSolid.Name">
            <summary>
                The name of solid
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:TVGL.Tessellation.TessellatedSolid.Faces">
            <summary>
                Gets the faces.
            </summary>
            <value>The faces.</value>
        </member>
        <member name="P:TVGL.Tessellation.TessellatedSolid.Edges">
            <summary>
                Gets the edges.
            </summary>
            <value>The edges.</value>
        </member>
        <member name="P:TVGL.Tessellation.TessellatedSolid.Vertices">
            <summary>
                Gets the vertices.
            </summary>
            <value>The vertices.</value>
        </member>
        <member name="P:TVGL.Tessellation.TessellatedSolid.NumberOfFaces">
            <summary>
                Gets the number of faces.
            </summary>
            <value>The number of faces.</value>
        </member>
        <member name="P:TVGL.Tessellation.TessellatedSolid.NumberOfVertices">
            <summary>
                Gets the number of vertices.
            </summary>
            <value>The number of vertices.</value>
        </member>
        <member name="P:TVGL.Tessellation.TessellatedSolid.NumberOfEdges">
            <summary>
                Gets the number of edges.
            </summary>
            <value>The number of edges.</value>
        </member>
        <member name="P:TVGL.Tessellation.TessellatedSolid.ConvexHullFaces">
            <summary>
                Gets the convex hull faces.
            </summary>
            <value>The convex hull faces.</value>
        </member>
        <member name="P:TVGL.Tessellation.TessellatedSolid.ConvexHullEdges">
            <summary>
                Gets the convex hull edges.
            </summary>
            <value>The convex hull edges.</value>
        </member>
        <member name="P:TVGL.Tessellation.TessellatedSolid.ConvexHullVertices">
            <summary>
                Gets the convex hull vertices.
            </summary>
            <value>The convex hull vertices.</value>
        </member>
        <member name="T:TVGL.Tessellation.Vertex">
            <summary>
            The 3D vertex can connect to any number of faces and edges. It inherits from the
            MIConvexhull IVertex interface.
            </summary>
        </member>
        <member name="M:TVGL.Tessellation.Vertex.#ctor(System.Double[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.Tessellation.Vertex"/> class.
            </summary>
            <param name="position">The position.</param>
            <param name="indexInListOfVertices">The index in list of vertices.</param>
        </member>
        <member name="M:TVGL.Tessellation.Vertex.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.Tessellation.Vertex"/> class.
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:TVGL.Tessellation.Vertex.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:TVGL.Tessellation.Vertex"/> class from being created.
            </summary>
        </member>
        <member name="M:TVGL.Tessellation.Vertex.Copy">
            <summary>
            Copies this instance.
            </summary>
            <returns>Vertex.</returns>
        </member>
        <member name="P:TVGL.Tessellation.Vertex.Position">
            <summary>
            Gets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:TVGL.Tessellation.Vertex.X">
            <summary>
            Gets the x.
            </summary>
            <value>The x.</value>
        </member>
        <member name="P:TVGL.Tessellation.Vertex.Y">
            <summary>
            Gets the y.
            </summary>
            <value>The y.</value>
        </member>
        <member name="P:TVGL.Tessellation.Vertex.Z">
            <summary>
            Gets the z.
            </summary>
            <value>The z.</value>
        </member>
        <member name="P:TVGL.Tessellation.Vertex.Edges">
            <summary>
            Gets the edges.
            </summary>
            <value>The edges.</value>
        </member>
        <member name="P:TVGL.Tessellation.Vertex.Faces">
            <summary>
            Gets the faces.
            </summary>
            <value>The faces.</value>
        </member>
        <member name="P:TVGL.Tessellation.Vertex.PointCurvature">
            <summary>
            Gets the curvature at the point.
            </summary>
            <value>The point curvature.</value>
        </member>
        <member name="P:TVGL.Tessellation.Vertex.EdgeCurvature">
            <summary>
            Gets the curvature by considering the connecting edges.
            </summary>
            <value>The global curve.</value>
        </member>
        <member name="P:TVGL.Tessellation.Vertex.PartofConvexHull">
            <summary>
            Gets a value indicating whether [it is part of the convex hull].
            </summary>
            <value><c>true</c> if [it is part of the convex hull]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TVGL.Tessellation.Vertex.IndexInList">
            <summary>
            Gets the index in list.
            </summary>
            <value>The index in list.</value>
        </member>
    </members>
</doc>
