<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TessellationAndVoxelizationGeometryLibrary</name>
    </assembly>
    <members>
        <member name="T:TVGL.ClipperIntOld.IntPoint">
            <summary>
            Integer Point with X and Y coordinates
            </summary>
        </member>
        <member name="T:TVGL.Line">
            <summary>
            A 2D Line made up of two points.
            </summary>
        </member>
        <member name="M:TVGL.Line.#ctor(TVGL.Point,TVGL.Point,System.Boolean)">
            <summary>
                Sets to and from points as well as slope and intercept of line.
            </summary>
            <param name="fromPoint"></param>
            <param name="toPoint"></param>
            <param name="twoWayReference"></param>
        </member>
        <member name="P:TVGL.Line.ToPoint">
            <summary>
                Gets the Pointwhich the line is pointing to. Set is through the constructor.
            </summary>
            <value>To node.</value>
        </member>
        <member name="P:TVGL.Line.Center">
            <summary>
                Gets the Pointwhich the line is pointing to. Set is through the constructor.
            </summary>
            <value>To node.</value>
        </member>
        <member name="P:TVGL.Line.FromPoint">
            <summary>
                Gets the Pointwhich the line is pointing away from. Set is through the constructor.
            </summary>
            <value>From node.</value>
        </member>
        <member name="P:TVGL.Line.Slope">
            <summary>
                Gets the Slope.
            </summary>
            <value>The Slope.</value>
        </member>
        <member name="P:TVGL.Line.IsHorizontal">
            <summary>
            Gets whether line is horizontal
            </summary>
        </member>
        <member name="P:TVGL.Line.IsVertical">
            <summary>
            Gets whether line is vertical
            </summary>
        </member>
        <member name="P:TVGL.Line.Yintercept">
            <summary>
                Gets the Yintercept.
            </summary>
            <value>The Yintercept.</value>
        </member>
        <member name="P:TVGL.Line.IndexInList">
            <summary>
            Get or set its index in a list.
            </summary>
        </member>
        <member name="P:TVGL.Line.Length">
            <summary>
            Gets the length of the line
            </summary>
        </member>
        <member name="M:TVGL.Line.Reverse">
            <summary>
                Reverses this line.
            </summary>
        </member>
        <member name="M:TVGL.Line.OtherPoint(TVGL.Point)">
            <summary>
            Gets the other point that makes up this line.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.Line.YGivenX(System.Double)">
            <summary>
            Returns Y value given an X value
            </summary>
            <param name="xval"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.Line.XGivenY(System.Double)">
            <summary>
            Returns X value given a Y value
            </summary>
            <param name="y">The y.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:TVGL.Polygon">
            <summary>
            A list of 2D points
            </summary>
        </member>
        <member name="F:TVGL.Polygon.Path">
            <summary>
            The list of 2D points that make up a polygon.
            </summary>
        </member>
        <member name="F:TVGL.Polygon.PathLines">
            <summary>
            The list of lines that make up a polygon.
            </summary>
        </member>
        <member name="F:TVGL.Polygon.Childern">
            <summary>
            A list of the polygons inside this polygon.
            </summary>
        </member>
        <member name="F:TVGL.Polygon.Parent">
            <summary>
            The polygon that this polygon is inside of.
            </summary>
        </member>
        <member name="P:TVGL.Polygon.Index">
            <summary>
            The index of this child in its parent's child list.
            </summary>
        </member>
        <member name="F:TVGL.Polygon.IsOpen">
            <summary>
            Gets whether the polygon has an open path.
            </summary>
        </member>
        <member name="P:TVGL.Polygon.IsPositive">
            <summary>
            Gets or sets whether the path is CCW positive. This will reverse the path if it was ordered CW.
            </summary>
        </member>
        <member name="F:TVGL.Polygon.Length">
            <summary>
            Gets the length of the polygon.
            </summary>
        </member>
        <member name="F:TVGL.Polygon.IsConvex">
            <summary>
            Gets whether the path is CCW positive == not a hole.
            </summary>
        </member>
        <member name="F:TVGL.Polygon.Area">
            <summary>
            Gets the area of the polygon. Negative Area for holes.
            </summary>
        </member>
        <member name="F:TVGL.Polygon.IsSelfIntersecting">
            <summary>
            Gets whether the path is self intersecting.
            </summary>
        </member>
        <member name="F:TVGL.Polygon.MaxX">
            <summary>
            Maxiumum X value
            </summary>
        </member>
        <member name="F:TVGL.Polygon.MinX">
            <summary>
            Miniumum X value
            </summary>
        </member>
        <member name="F:TVGL.Polygon.MaxY">
            <summary>
            Maxiumum Y value
            </summary>
        </member>
        <member name="F:TVGL.Polygon.MinY">
            <summary>
            Minimum Y value
            </summary>
        </member>
        <member name="M:TVGL.Polygon.#ctor(System.Collections.Generic.IEnumerable{TVGL.Point},System.Boolean,System.Int32)">
            <summary>
            Polygon Constructor
            </summary>
            <param name="points"></param>
            <param name="isOpen"></param>
            <param name="index"></param>
        </member>
        <member name="M:TVGL.Polygon.SetToCCWPositive">
            <summary>
            Sets a polygon to counter clock wise positive
            </summary>
        </member>
        <member name="M:TVGL.Polygon.IsThisConvex">
            <summary>
            Gets whether the polygon is convex.
            </summary>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
            <assumptions>
            1. the polygon is closed
            2. the last point is not repeated.
            3. the polygon is simple (does not intersect itself or have holes)
            </assumptions>
            /// <source>
            http://debian.fmi.uni-sofia.bg/~sergei/cgsr/docs/clockwise.htm
            </source>
        </member>
        <member name="M:TVGL.Polygon.SetPathLines">
            <summary>
            Returns a list of lines that make up the path of this polygon
            </summary>
            <returns></returns>
        </member>
        <member name="M:TVGL.Polygon.GetSelfIntersectionPoints">
            <summary>
            Gets all the intersection points if the polygon is self intersecting.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TVGL.PolygonTree">
            <summary>
            A list of one outer polygon and all the polygons inside it.
            </summary>
        </member>
        <member name="F:TVGL.PolygonTree.AllPolygons">
            <summary>
            The list of all the polygons that make up this polygon tree.
            </summary>
        </member>
        <member name="F:TVGL.PolygonTree.InnerPolygons">
            <summary>
            The list of all the polygons inside the outer polygon. that make up a polygon.
            </summary>
        </member>
        <member name="F:TVGL.PolygonTree.OuterPolygon">
            <summary>
            The outer most polygon. All other polygons are inside it.
            </summary>
        </member>
        <member name="T:TVGL.PolygonGroup">
            <summary>
            A organized list of polygons
            </summary>
        </member>
        <member name="F:TVGL.PolygonGroup.AllPolygons">
            <summary>
            The list of all the polygons that make up this polygon tree.
            </summary>
        </member>
        <member name="F:TVGL.PolygonGroup.AllPoints">
            <summary>
            The list of all the points from all the polygons.
            </summary>
        </member>
        <member name="F:TVGL.PolygonGroup.NegativePolygons">
            <summary>
            The list of all the negative polygons in this group.
            </summary>
        </member>
        <member name="F:TVGL.PolygonGroup.PositivePolygons">
            <summary>
            The list of all the ppsitive polygons in this group.
            </summary>
        </member>
        <member name="P:TVGL.PolygonGroup.LexicographicallyOrderedPoints">
            <summary>
            A list of ordered points. Min X -> Max X with ties ordered by Min Y -> Max Y.
            </summary>
        </member>
        <member name="T:TVGL.ShallowPolygonTree">
            <summary>
            A list of one positive polygon and all the negative polygons directly inside it.
            </summary>
        </member>
        <member name="F:TVGL.ShallowPolygonTree.InnerPolygons">
            <summary>
            The list of all the negative polygons inside the positive=outer polygon.
            There can be NO positive polygons inside this class, since this is a SHALLOW Polygon Tree
            </summary>
        </member>
        <member name="F:TVGL.ShallowPolygonTree.OuterPolygon">
            <summary>
            The outer most polygon, which is always positive. THe negative polygons are inside it.
            </summary>
        </member>
        <member name="P:TVGL.ShallowPolygonTree.AllPolygons">
            <summary>
            A list of all the polygons in this tree.
            </summary>
        </member>
        <member name="T:TVGL.BuildPolygonTrees">
            <summary>
            A set of methods for building polygon trees.
            The polygons do not need to be ordered correctly, because this function
            with fix their CCW+ or CW- ordering based on EvenOdd logic.
            The polygons are assumed to be non-selfintersecting and DO NOT INTERSECT ONE ANOTHER
            </summary>
        </member>
        <member name="T:TVGL.ContactData">
            <summary>
            A ContactData that stores all the necessary face information from a slice
            to be able to produce solids.
            </summary>
        </member>
        <member name="F:TVGL.ContactData.PositiveSideContactData">
            <summary>
            Gets the list of positive side contact data
            </summary>
            <value>The positive loops.</value>
        </member>
        <member name="F:TVGL.ContactData.NegativeSideContactData">
            <summary>
            Gets the list of negative side contact data
            </summary>
            <value>The positive loops.</value>
        </member>
        <member name="F:TVGL.ContactData.NumPositiveSideSolids">
            <summary>
            Gets the number of positive side solids
            </summary>
            <value>The positive loops.</value>
        </member>
        <member name="F:TVGL.ContactData.NumNegativeSideSolids">
            <summary>
            Gets the number of negative side solids
            </summary>
            <value>The positive loops.</value>
        </member>
        <member name="F:TVGL.ContactData.Plane">
            <summary>
            Gets the plane for this contact data 
            </summary>
            <value>The positive loops.</value>
        </member>
        <member name="T:TVGL.SolidContactData">
            <summary>
            Stores the information 
            </summary>
        </member>
        <member name="M:TVGL.SolidContactData.AllVertices">
            <summary>
            Gets the vertices belonging to this solid
            </summary>
            <returns></returns>
        </member>
        <member name="M:TVGL.SolidContactData.Volume">
            <summary>
            Gets the vertices belonging to this solid
            </summary>
            <returns></returns>
        </member>
        <member name="F:TVGL.SolidContactData.PositiveLoops">
            <summary>
            Gets the positive loops.
            </summary>
            <value>The positive loops.</value>
        </member>
        <member name="F:TVGL.SolidContactData.NegativeLoops">
            <summary>
            Gets the loops of negative area (i.e. holes).
            </summary>
            <value>The negative loops.</value>                    
        </member>
        <member name="P:TVGL.SolidContactData.AllLoops">
            <summary>
            Gets all loops in one list (the positive loops are followed by the
            negative loops).
            </summary>
            <value>All loops.</value>
        </member>
        <member name="F:TVGL.SolidContactData.Area">
            <summary>
            The combined area of the 2D loops defined with the Contact Data
            </summary>
        </member>
        <member name="F:TVGL.SolidContactData.OnSideFaces">
            <summary>
            List of pre-existing faces on this side of the cutting plane
            </summary>
        </member>
        <member name="F:TVGL.SolidContactData.OnSideContactFaces">
            <summary>
            The faces that were formed on-side for all the loops in this solid. 
            </summary>
        </member>
        <member name="F:TVGL.SolidContactData.OnPlaneFaces">
            <summary>
            A list of the on plane faces formed by the triangulation of the loops
            </summary>
        </member>
        <member name="P:TVGL.SolidContactData.AllFaces">
            <summary>
            Gets all faces belonging to this solid's contact data (All faces except those that will be triangulated in plane)
            </summary>
            <value>All loops.</value>
        </member>
        <member name="T:TVGL.GroupOfLoops">
            <summary>
            The GroupOfLoops class is a list of dependent loops and their associated information.
            This difference from ContactData, since it only every has one positive loop.
            </summary>
        </member>
        <member name="F:TVGL.GroupOfLoops.PositiveLoop">
            <summary>
            Gets the positive loop.
            </summary>
            <value>The positive loops.</value>
        </member>
        <member name="F:TVGL.GroupOfLoops.NegativeLoops">
            <summary>
            Gets the loops of negative area (i.e. holes).
            </summary>
            <value>The negative loops.</value>                    
        </member>
        <member name="P:TVGL.GroupOfLoops.AllLoops">
            <summary>
            Gets all loops in one list (the positive loops are followed by the
            negative loops).
            </summary>
            <value>All loops.</value>
        </member>
        <member name="F:TVGL.GroupOfLoops.OnSideContactFaces">
            <summary>
            The faces that were formed on-side for all the loops in this group. 
            </summary>
        </member>
        <member name="F:TVGL.GroupOfLoops.AdjOnsideFaceIndices">
            <summary>
            A list of the idices of the faces that were adjacent and onside to the straddle faces
            </summary>
        </member>
        <member name="F:TVGL.GroupOfLoops.StraddleFaceIndices">
            <summary>
            A list of the idices of the straddle faces 
            </summary>
        </member>
        <member name="F:TVGL.GroupOfLoops.OnPlaneFaces">
            <summary>
            A list of the on plane faces formed by the triangulation of the loops
            </summary>
        </member>
        <member name="T:TVGL.Loop">
            <summary>
            The Loop class is basically a list of ContactElements that form a path. Usually, this path
            is closed, hence the name "loop", but it may be used and useful for open paths as well.
            </summary>
        </member>
        <member name="F:TVGL.Loop.VertexLoop">
            <summary>
            The vertices making up this loop
            </summary>
        </member>
        <member name="F:TVGL.Loop.OnSideContactFaces">
            <summary>
            The faces that were formed on-side for this loop. About 2/3 s
            of these faces should have one negligible adjacent face. 
            </summary>
        </member>
        <member name="P:TVGL.Loop.IsPositive">
            <summary>
            Is the loop positive - meaning does it enclose material versus representing a hole
            </summary>
        </member>
        <member name="F:TVGL.Loop.DependentLoops">
            <summary>
            Negative loops must always be inside positive loops. This is a place to store all
            the pos/neg loop dependency.
            </summary>
        </member>
        <member name="F:TVGL.Loop.Perimeter">
            <summary>
            The length of the loop.
            </summary>
        </member>
        <member name="F:TVGL.Loop.Area">
            <summary>
            The area of the loop
            </summary>
        </member>
        <member name="F:TVGL.Loop.IsClosed">
            <summary>
            Is the loop closed?
            </summary>
        </member>
        <member name="F:TVGL.Loop.AdjOnsideFaceIndices">
            <summary>
            A list of the idices of the faces that were adjacent and onside to the straddle faces
            </summary>
        </member>
        <member name="F:TVGL.Loop.StraddleFaceIndices">
            <summary>
            A list of the idices of the straddle faces 
            </summary>
        </member>
        <member name="M:TVGL.Loop.#ctor(System.Collections.Generic.ICollection{TVGL.Vertex},System.Collections.Generic.IEnumerable{TVGL.PolygonalFace},System.Double[],System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.Loop" /> class.
            </summary>
            <param name="vertexLoop"></param>
            <param name="onSideContactFaces"></param>
            <param name="normal">The normal.</param>
            <param name="straddleFaceIndices"></param>
            <param name="adjOnsideFaceIndices"></param>
            <param name="isClosed">is closed.</param>
        </member>
        <member name="T:TVGL.Boolean_Operations.Slice">
            <summary>
            The Slice class includes static functions for cutting a tessellated solid.
            Slice4 Performs the slicing operation on the prescribed flat plane. This is a NON-Destructive
            operation, and returns two of more new tessellated solids  in the "out" parameter
            lists.
            However, it does reference the solid's faces. So this may conflict with parallel processing.
            </summary>
        </member>
        <member name="M:TVGL.Boolean_Operations.Slice.OnFlat(TVGL.TessellatedSolid,TVGL.Flat,System.Collections.Generic.List{TVGL.TessellatedSolid}@,System.Collections.Generic.List{TVGL.TessellatedSolid}@)">
            <summary>
            This slice function makes a seperate cut for the positive and negative side,
            at a specified offset in both directions. It rebuilds straddle triangles, 
            but only uses one of the two straddle edge intersection vertices to prevent
            tiny triangles from being created.
            </summary>
            <param name="ts">The ts.</param>
            <param name="plane">The plane.</param>
            <param name="positiveSideSolids">The solids that are on the positive side of the plane
            This means that are on the side that the normal faces.</param>
            <param name="negativeSideSolids">The solids on the negative side of the plane.</param>
        </member>
        <member name="M:TVGL.Boolean_Operations.Slice.GetContactData(TVGL.TessellatedSolid,TVGL.Flat,TVGL.ContactData@)">
            <summary>
            Gets the contact data for a slice, without making the individual solids.
            </summary>
            <param name="ts"></param>
            <param name="plane"></param>
            <param name="contactData"></param>
        </member>
        <member name="M:TVGL.Boolean_Operations.Slice.MakeSolids(TVGL.ContactData,TVGL.UnitType,System.Collections.Generic.List{TVGL.TessellatedSolid}@,System.Collections.Generic.List{TVGL.TessellatedSolid}@)">
            <summary>
            Returns lists of solids, given contact data for this slice
            </summary>
            <param name="contactData"></param>
            <param name="positiveSideSolids"></param>
            <param name="negativeSideSolids"></param>
        </member>
        <member name="M:TVGL.Boolean_Operations.Slice.MakeContactDataForEachSolid(TVGL.TessellatedSolid,System.Collections.Generic.IList{TVGL.Loop},System.Collections.Generic.IEnumerable{TVGL.PolygonalFace},System.Double[])">
            <summary>
            Seperates the loops into multiple solids prior to making solids by using
            loop information and face wrapping to identify which loops belong together.
            The direction of each loop is not necessary as it can be inferred.
            </summary>
            <param name="ts">The ts.</param>
            <param name="onSideLoops">The on side loops.</param>
            <param name="onSideFaces">The on side faces.</param>
            <param name="normal">The normal.</param>
            <returns>IEnumerable&lt;SolidContactData&gt;.</returns>
            <exception cref="T:System.Exception">
            This loop should always be positive. Check to may sure the group was created correctly in 'OrderLoops' 
            or
            This loop should always be negative. Check to may sure the group was created correctly in 'OrderLoops' 
            or
            The face should be in this list. Otherwise, it should not have been selected with face wrapping
            </exception>
        </member>
        <member name="M:TVGL.Boolean_Operations.Slice.DivideUpFaces(TVGL.TessellatedSolid,TVGL.Flat,System.Collections.Generic.List{TVGL.PolygonalFace}@,System.Collections.Generic.List{TVGL.Loop}@,System.Int32,System.Collections.Generic.IList{System.Double},System.Double)">
            Returns a list of onSideFaces from the ts (not including straddle faces), and a list of all the new faces that make up the 
             halves of the straddle faces that are on this side.
        </member>
        <member name="M:TVGL.Boolean_Operations.Slice.NewFace(TVGL.Boolean_Operations.Slice.StraddleEdge,TVGL.Boolean_Operations.Slice.StraddleEdge,System.Collections.Generic.Dictionary{System.Int32,TVGL.Edge},System.Collections.Generic.Dictionary{System.Int32,TVGL.PolygonalFace},System.Collections.Generic.List{TVGL.Edge}@,System.Collections.Generic.HashSet{System.Int32}@,System.Boolean)">
            <summary>
            Creates a new face given two straddle edges
            </summary>
            <param name="st1">The ST1.</param>
            <param name="st2">The ST2.</param>
            <param name="straddleEdgesDict">The straddle edges dictionary.</param>
            <param name="straddleFaces">The straddle faces.</param>
            <param name="newEdges">The new edges.</param>
            <param name="adjOnsideFaceIndices">The adj onside face indices.</param>
            <param name="lastNewFace">if set to <c>true</c> [last new face].</param>
            <returns>List&lt;PolygonalFace&gt;.</returns>
            <exception cref="T:System.Exception">
            No shared face exists between these two straddle edges
            or
            There should only be one boundary edge. There must be 2 straddle edges for this shared face.
            or
            All edges of the shared face are straddle edges. This cannot be.
            or
            This should never be the case. The boundary edge should be have the sharedFace as owned or other
            or
            There should only be one boundary edge. There must be 2 straddle edges for this shared face.
            or
            All edges of the shared face are straddle edges. This cannot be.
            or
            This should never be the case. The boundary edge should be have the sharedFace as owned or other
            or
            Error, the straddle edges do not match up at a common vertex
            </exception>
        </member>
        <member name="T:TVGL.Boolean_Operations.Slice.StraddleEdge">
            <summary>
            Straddle edge references original edge and an intersection vertex.
            </summary>
        </member>
        <member name="F:TVGL.Boolean_Operations.Slice.StraddleEdge.IntersectVertex">
            <summary>
            Point of edge / plane intersection
            </summary>
        </member>
        <member name="F:TVGL.Boolean_Operations.Slice.StraddleEdge.OffSideVertex">
            <summary>
            Vertex on side of plane that will not be kept
            </summary>
        </member>
        <member name="F:TVGL.Boolean_Operations.Slice.StraddleEdge.OriginalOffSideVertex">
            <summary>
            Vertex on side of plane that will not be kept (Used when collapsing an edge)
            </summary>
        </member>
        <member name="F:TVGL.Boolean_Operations.Slice.StraddleEdge.OnSideVertex">
            <summary>
            Vertex on side of plane that will be kept
            </summary>
        </member>
        <member name="F:TVGL.Boolean_Operations.Slice.StraddleEdge.Edge">
            <summary>
            Connect back to the base edge
            </summary>
        </member>
        <member name="F:TVGL.Boolean_Operations.Slice.StraddleEdge.OwnedFace">
            <summary>
            OwnedFace (may change if collapsed into another straddle edge)
            </summary>
        </member>
        <member name="F:TVGL.Boolean_Operations.Slice.StraddleEdge.OtherFace">
            <summary>
            OtherFace (may change if collapsed into another straddle edge)
            </summary>
        </member>
        <member name="M:TVGL.Boolean_Operations.Slice.StraddleEdge.NextFace(TVGL.PolygonalFace)">
            <summary>
            Gets the next face in the loop from this edge, given the current face
            </summary>
            <param name="face"></param>
            <returns></returns>
        </member>
        <member name="T:TVGL.Enclosure_Operations.GaussSphereArc">
            <summary>
                Class GaussSphereArc.
            </summary>
        </member>
        <member name="F:TVGL.Enclosure_Operations.GaussSphereArc.Edge">
            <summary>
                The edge
            </summary>
        </member>
        <member name="F:TVGL.Enclosure_Operations.GaussSphereArc.ToFace">
            <summary>
                To face
            </summary>
        </member>
        <member name="M:TVGL.Enclosure_Operations.GaussSphereArc.#ctor(TVGL.Edge,TVGL.PolygonalFace)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Enclosure_Operations.GaussSphereArc" /> class.
            </summary>
            <param name="edge">The edge.</param>
            <param name="toFace">To face.</param>
        </member>
        <member name="T:TVGL.Enclosure_Operations.GaussianSphere">
            <summary>
                Gaussian Sphere for a polyhedron
            </summary>
            NOTE: Using spherical coordinates from mathematics (r, θ, φ), since it follows the right hand rule.
            Where r is the radial distance (r = 1 for the unit circle), θ is the azimuthal angle (XY and θ equal to or between 0 and 360),
            and φ is the polar angle (From Z axis and φ is equal to or between 0 and 180).
        </member>
        <member name="F:TVGL.Enclosure_Operations.GaussianSphere.Nodes">
            <summary>
                The volume of the bounding box.
            </summary>
        </member>
        <member name="F:TVGL.Enclosure_Operations.GaussianSphere.Arcs">
            <summary>
                The Directions are the three unit vectors that describe the orientation of the box.
            </summary>
        </member>
        <member name="F:TVGL.Enclosure_Operations.GaussianSphere.ReferenceEdges">
            <summary>
                The reference edges
            </summary>
        </member>
        <member name="M:TVGL.Enclosure_Operations.GaussianSphere.#ctor(TVGL.TessellatedSolid)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Enclosure_Operations.GaussianSphere" /> class.
            </summary>
            <param name="ts">The ts.</param>
        </member>
        <member name="T:TVGL.Enclosure_Operations.Node">
            <summary>
                Class Node.
            </summary>
        </member>
        <member name="F:TVGL.Enclosure_Operations.Node.Arcs">
            <summary>
                The arcs
            </summary>
        </member>
        <member name="F:TVGL.Enclosure_Operations.Node.Phi">
            <summary>
                The phi
            </summary>
        </member>
        <member name="F:TVGL.Enclosure_Operations.Node.ReferenceEdges">
            <summary>
                The reference edges
            </summary>
        </member>
        <member name="F:TVGL.Enclosure_Operations.Node.ReferenceFaces">
            <summary>
                The reference faces
            </summary>
        </member>
        <member name="F:TVGL.Enclosure_Operations.Node.ReferenceVertices">
            <summary>
                The reference vertices
            </summary>
        </member>
        <member name="F:TVGL.Enclosure_Operations.Node.Theta">
            <summary>
                The theta
            </summary>
        </member>
        <member name="F:TVGL.Enclosure_Operations.Node.Vector">
            <summary>
                The vector
            </summary>
        </member>
        <member name="F:TVGL.Enclosure_Operations.Node.X">
            <summary>
                The x
            </summary>
        </member>
        <member name="F:TVGL.Enclosure_Operations.Node.Y">
            <summary>
                The y
            </summary>
        </member>
        <member name="F:TVGL.Enclosure_Operations.Node.Z">
            <summary>
                The z
            </summary>
        </member>
        <member name="M:TVGL.Enclosure_Operations.Node.#ctor(TVGL.PolygonalFace)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Enclosure_Operations.Node" /> class.
            </summary>
            <param name="triangle">The triangle.</param>
        </member>
        <member name="M:TVGL.Enclosure_Operations.Node.AddArcReference(TVGL.Enclosure_Operations.Arc)">
            <summary>
                Adds the arc reference.
            </summary>
            <param name="arc">The arc.</param>
        </member>
        <member name="T:TVGL.Enclosure_Operations.Arc">
            <summary>
                Class Arc.
            </summary>
        </member>
        <member name="F:TVGL.Enclosure_Operations.Arc.ArcLength">
            <summary>
                The arc length
            </summary>
        </member>
        <member name="F:TVGL.Enclosure_Operations.Arc.Direction">
            <summary>
                The direction
            </summary>
        </member>
        <member name="F:TVGL.Enclosure_Operations.Arc.Nodes">
            <summary>
                The nodes
            </summary>
        </member>
        <member name="F:TVGL.Enclosure_Operations.Arc.ReferenceEdge">
            <summary>
                The reference edge
            </summary>
        </member>
        <member name="F:TVGL.Enclosure_Operations.Arc.ReferenceVertices">
            <summary>
                The reference vertices
            </summary>
        </member>
        <member name="M:TVGL.Enclosure_Operations.Arc.#ctor(TVGL.Enclosure_Operations.Node,TVGL.Enclosure_Operations.Node,TVGL.Edge)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Enclosure_Operations.Arc" /> class.
            </summary>
            <param name="node1">The node1.</param>
            <param name="node2">The node2.</param>
            <param name="edge">The edge.</param>
        </member>
        <member name="M:TVGL.Enclosure_Operations.Arc.Intersect(TVGL.Enclosure_Operations.Arc,TVGL.Enclosure_Operations.Arc,TVGL.Vertex@)">
            <summary>
                Intersects the specified arc1.
            </summary>
            <param name="arc1">The arc1.</param>
            <param name="arc2">The arc2.</param>
            <param name="intersection">The intersection.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TVGL.Enclosure_Operations.Arc.NextNodeAlongRotation(System.Double[])">
            <summary>
                Nexts the node along rotation.
            </summary>
            <param name="rotation">The rotation.</param>
            <returns>Node.</returns>
        </member>
        <member name="M:TVGL.Enclosure_Operations.Arc.NextNode(TVGL.Enclosure_Operations.Node)">
            <summary>
                Nexts the node.
            </summary>
            <param name="node">The node.</param>
            <returns>Node.</returns>
        </member>
        <member name="T:TVGL.Enclosure_Operations.GreatCircleAlongArc">
            <summary>
                Great Circle based on a gaussian sphere.
            </summary>
        </member>
        <member name="F:TVGL.Enclosure_Operations.GreatCircleAlongArc.ArcList">
            <summary>
                The arc list
            </summary>
        </member>
        <member name="F:TVGL.Enclosure_Operations.GreatCircleAlongArc.Intersections">
            <summary>
                The intersections
            </summary>
        </member>
        <member name="F:TVGL.Enclosure_Operations.GreatCircleAlongArc.ReferenceVertices">
            <summary>
                The reference vertices
            </summary>
        </member>
        <member name="M:TVGL.Enclosure_Operations.GreatCircleAlongArc.#ctor(TVGL.Enclosure_Operations.GaussianSphere,System.Double[],System.Double[],TVGL.Enclosure_Operations.Arc)">
            <summary>
                The volume of the bounding box.
                Note that antipodal points would result in an infinite number of great circles, but can
                be ignored since we are assuming the thickness of this solid is greater than 0.
            </summary>
            <param name="gaussianSphere">The gaussian sphere.</param>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <param name="referenceArc">The reference arc.</param>
        </member>
        <member name="P:TVGL.Enclosure_Operations.GreatCircleAlongArc.Normal">
            <summary>
                Gets or sets the normal.
            </summary>
            <value>The normal.</value>
        </member>
        <member name="M:TVGL.Enclosure_Operations.GreatCircleAlongArc.ArcLength(System.Double[],System.Double[])">
            <summary>
                Arcs the length.
            </summary>
            <param name="double1">The double1.</param>
            <param name="double2">The double2.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:TVGL.Enclosure_Operations.GreatCircleOrthogonalToArc">
            <summary>
                Great Circle based on a gaussian sphere.
            </summary>
        </member>
        <member name="F:TVGL.Enclosure_Operations.GreatCircleOrthogonalToArc.ArcList">
            <summary>
                The arc list
            </summary>
        </member>
        <member name="F:TVGL.Enclosure_Operations.GreatCircleOrthogonalToArc.Intersections">
            <summary>
                The intersections
            </summary>
        </member>
        <member name="F:TVGL.Enclosure_Operations.GreatCircleOrthogonalToArc.ReferenceVertices">
            <summary>
                The reference vertices
            </summary>
        </member>
        <member name="M:TVGL.Enclosure_Operations.GreatCircleOrthogonalToArc.#ctor(TVGL.Enclosure_Operations.GaussianSphere,System.Double[],System.Double[],TVGL.Enclosure_Operations.Arc)">
            <summary>
                The volume of the bounding box.
                Note that antipodal points would result in an infinite number of great circles, but can
                be ignored since we are assuming the thickness of this solid is greater than 0.
            </summary>
            <param name="gaussianSphere">The gaussian sphere.</param>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <param name="referenceArc">The reference arc.</param>
        </member>
        <member name="P:TVGL.Enclosure_Operations.GreatCircleOrthogonalToArc.Normal">
            <summary>
                Gets or sets the normal.
            </summary>
            <value>The normal.</value>
        </member>
        <member name="M:TVGL.Enclosure_Operations.GreatCircleOrthogonalToArc.ArcLength(System.Double[],System.Double[])">
            <summary>
                Arcs the length.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:TVGL.Enclosure_Operations.Intersection">
            <summary>
                Intersection Class retains information about the type of arc intersection
            </summary>
        </member>
        <member name="F:TVGL.Enclosure_Operations.Intersection.Node">
            <summary>
                The node
            </summary>
        </member>
        <member name="F:TVGL.Enclosure_Operations.Intersection.ReferenceArc">
            <summary>
                The reference arc
            </summary>
        </member>
        <member name="F:TVGL.Enclosure_Operations.Intersection.SphericalDistance">
            <summary>
                The spherical distance
            </summary>
        </member>
        <member name="F:TVGL.Enclosure_Operations.Intersection.Vertex">
            <summary>
                The vertex
            </summary>
        </member>
        <member name="M:TVGL.Enclosure_Operations.Intersection.#ctor(TVGL.Enclosure_Operations.Node,System.Double,TVGL.Enclosure_Operations.Arc)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Enclosure_Operations.Intersection" /> class.
            </summary>
            <param name="node">The node.</param>
            <param name="sphericalDistance">The spherical distance.</param>
            <param name="referenceArc">The reference arc.</param>
        </member>
        <member name="M:TVGL.Enclosure_Operations.Intersection.#ctor(TVGL.Vertex,System.Double,TVGL.Enclosure_Operations.Arc)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Enclosure_Operations.Intersection" /> class.
            </summary>
            <param name="vertex">The vertex.</param>
            <param name="sphericalDistance">The spherical distance.</param>
            <param name="referenceArc">The reference arc.</param>
        </member>
        <member name="T:TVGL.MinimumEnclosure">
            <summary>
                The MinimumEnclosure class includes static functions for defining smallest enclosures for a
                tessellated solid. For example: convex hull, minimum bounding box, or minimum bounding sphere.
            </summary>
            <summary>
                The MinimumEnclosure class includes static functions for defining smallest enclosures for a
                tessellated solid. For example: convex hull, minimum bounding box, or minimum bounding sphere.
            </summary>
            <summary>
                The MinimumEnclosure class includes static functions for defining smallest enclosures for a
                tesselated solid. For example: convex hull, minimum bounding box, or minimum bounding sphere.
            </summary>
        </member>
        <member name="M:TVGL.MinimumEnclosure.MinimumCircle(System.Collections.Generic.IList{TVGL.Point})">
            <summary>
                Minimums the circle.
            </summary>
            <param name="points">The points.</param>
            <returns>System.Double.</returns>
            <exception cref="T:System.Exception">Bounding circle failed to converge</exception>
            <references>
                Based on Emo Welzl's "move-to-front heuristic" and this paper (algorithm 1).
                http://www.inf.ethz.ch/personal/gaertner/texts/own_work/esa99_final.pdf
                This algorithm runs in near linear time. Visiting most points just a few times.
                Though a linear algorithm was found by Meggi do, this algorithm is more robust
                (doesn't care about multiple points on a line and fewer rounding functions)
                and directly applicable to multiple dimensions (in our case, just 2 and 3 D).
            </references>
        </member>
        <member name="M:TVGL.MinimumEnclosure.MaximumInnerCircle(System.Collections.Generic.IList{System.Collections.Generic.List{TVGL.Point}},TVGL.Point)">
            <summary>
                Gets the maximum inner circle given a group of polygons and a center point.
                If there are no negative polygons, the function will return a negligible Bounding Circle
            </summary>
            <returns>BoundingBox.</returns>
        </member>
        <member name="M:TVGL.MinimumEnclosure.MaximumInnerCircle(System.Collections.Generic.List{TVGL.Polygon},TVGL.Point)">
            <summary>
                Gets the maximum inner circle given a group of polygons and a center point.
                If there are no negative polygons, the function will return a negligible Bounding Circle
            </summary>
            <returns>BoundingBox.</returns>
        </member>
        <member name="M:TVGL.MinimumEnclosure.MaximumInnerCircle(TVGL.PolygonGroup,TVGL.Point)">
            <summary>
                Gets the maximum inner circle given a group of polygons and a center point.
                The circle will either be inside a negative polygon or outside a positive polygon (e.g. C channel). 
                Else it returns a negligible Bounding Circle
            </summary>
        </member>
        <member name="M:TVGL.MinimumEnclosure.Median(System.Collections.Generic.List{TVGL.Point})">
            <summary>
                Takes a set of elements and a metric for comparing them pairwise, and returns the median of the elements.
            </summary>
            <param name="points">The points.</param>
            <returns>Point.</returns>
        </member>
        <member name="M:TVGL.MinimumEnclosure.MEC_Center(System.Collections.Generic.List{TVGL.Point},System.Double[])">
            <summary>
                Takes a set of points and a line, and determines which side of the line the center of the MEC of  the points lies
                on.
            </summary>
            <param name="points">The points.</param>
            <param name="line">The line.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TVGL.MinimumEnclosure.MinimumBoundingCylinder(System.Collections.Generic.IList{TVGL.Vertex})">
            <summary>
                Gets the minimum bounding cylinder using 13 guesses for the depth direction
            </summary>
            <param name="convexHullVertices">The convex hull vertices.</param>
            <returns>BoundingBox.</returns>
        </member>
        <member name="M:TVGL.MinimumEnclosure.AdjustOrthogonalRotations(System.Collections.Generic.IList{TVGL.Vertex},TVGL.BoundingBox)">
            <summary>
                Adjusts the orthogonal rotations.
            </summary>
            <param name="convexHullVertices">The convex hull vertices.</param>
            <param name="minOBB">The minimum obb.</param>
            <returns>BoundingBox.</returns>
        </member>
        <member name="T:TVGL.MinimumEnclosure.Bisector">
            <summary>
                Class Bisector.
            </summary>
        </member>
        <member name="M:TVGL.MinimumEnclosure.Bisector.#ctor(TVGL.Point,TVGL.Point)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.MinimumEnclosure.Bisector" /> class.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
        </member>
        <member name="P:TVGL.MinimumEnclosure.Bisector.Slope">
            <summary>
                Gets the slope.
            </summary>
            <value>The slope.</value>
        </member>
        <member name="T:TVGL.MinimumEnclosure.InternalCircle">
            <summary>
                Class InternalCircle.
            </summary>
        </member>
        <member name="M:TVGL.MinimumEnclosure.InternalCircle.#ctor(System.Collections.Generic.IEnumerable{TVGL.Point})">
            <summary>
                Create a new circle from either 2 or 3 points
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="M:TVGL.MinimumEnclosure.InternalCircle.IsPointInsideCircle(TVGL.Point)">
            <summary>
                Gets X intercept given Y
            </summary>
            <param name="point">The point.</param>
            <returns><c>true</c> if [is point inside circle] [the specified point]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TVGL.MinimumEnclosure.InternalCircle.Furthest(TVGL.Point,TVGL.Point@,System.Collections.Generic.List{TVGL.Point}@)">
            <summary>
                Finds the furthest the specified point.
            </summary>
            <param name="point">The point.</param>
            <param name="furthestPoint">The furthest point.</param>
            <param name="previousPoints">The previous points.</param>
            <exception cref="T:System.ArgumentNullException">previousPoints cannot be null</exception>
        </member>
        <member name="P:TVGL.MinimumEnclosure.InternalCircle.Points">
            <summary>
                Gets one point of the circle.
            </summary>
            <value>The points.</value>
        </member>
        <member name="P:TVGL.MinimumEnclosure.InternalCircle.Center">
            <summary>
                Gets one point of the circle.
            </summary>
            <value>The center.</value>
        </member>
        <member name="P:TVGL.MinimumEnclosure.InternalCircle.SqRadius">
            <summary>
                Gets one point of the circle.
            </summary>
            <value>The sq radius.</value>
        </member>
        <member name="M:TVGL.MinimumEnclosure.OrientedBoundingBox_Test(TVGL.TessellatedSolid,System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{System.Double}@)">
            <summary>
                Finds the minimum bounding box oriented along a particular Direction.
            </summary>
            <param name="ts">The ts.</param>
            <param name="times"></param>
            <param name="volumes"></param>
            <returns>BoundingBox.</returns>
        </member>
        <member name="M:TVGL.MinimumEnclosure.Find_via_PCA_ApproachNR(System.Collections.Generic.IList{TVGL.Vertex})">
            <summary>
                Finds the minimum bounding box using a direct approach called PCA.
                Variants include All-PCA, Min-PCA, Max-PCA, and continuous PCA [http://dl.acm.org/citation.cfm?id=2019641]
                The one implemented looks at Min-PCA, Max-PCA and Mid-PCA (considers all three of the eigen vectors).
                The most accurate is continuous PCA, and Dimitrov 2009 has some improvements
                Dimitrov, Holst, and Kriegel. "Closed-Form Solutions for Continuous PCA and Bounding Box Algorithms"
                http://link.springer.com/chapter/10.1007%2F978-3-642-10226-4_3
                Simple implementation (2/5)
            </summary>
            <timeDomain>
                O(nlog(n)) time
            </timeDomain>
            <accuracy>
                Generally fairly accurate, but suboptimal solutions.
                Particular cases can yield very poor results.
                Ex. Dimitrov showed in 2009 that continuous PCA yields a volume 4x optimal for a octahedron
                http://page.mi.fu-berlin.de/rote/Papers/pdf/Bounds+on+the+quality+of+the+PCA+bounding+boxes.pdf
            </accuracy>
        </member>
        <member name="M:TVGL.MinimumEnclosure.OrientedBoundingBox(TVGL.TVGLConvexHull)">
            <summary>
                The MC_ApproachOne rotates around each edge of the convex hull between the owned and
                other faces. In this way, it guarantees a much more optimal solution than the flat
                with face algorithm, but is, therefore, slower.
            </summary>
            <timeDomain>
                Since the computation cost for each Bounding Box is linear O(n),
                and the approximate worse case number of normals considered is n*PI/maxDeltaAngle,
                Lower Bound O(n^2). Upper Bound O(n^(2)*PI/maxDeltaAngle). [ex.  upper bound is O(36*n^2) when MaxDeltaAngle = 5
                degrees.]
            </timeDomain>
            <accuracy>
                Garantees the optimial orientation is within maxDeltaAngle error.
            </accuracy>
        </member>
        <member name="M:TVGL.MinimumEnclosure.ConvexHull2DArea(System.Collections.Generic.IList{TVGL.Point})">
            <summary>
                Finds the area of the convex hull region, given a set of convex hull points.
            </summary>
            <param name="convexHullPoints2D"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.MinimumEnclosure.ConvexHull2D(System.Collections.Generic.IList{TVGL.Point},System.Double)">
            <summary>
            Returns the 2D convex hull for given list of points. 
            </summary>
            <param name="points">The points.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>
            List&lt;Point&gt;.
            </returns>
        </member>
        <member name="F:TVGL.MinimumEnclosure.MaxRotationsForOBB">
            <summary>
                The maximum rotations for obb
            </summary>
        </member>
        <member name="M:TVGL.MinimumEnclosure.BoundingRectangle(System.Collections.Generic.IList{TVGL.Point},System.Boolean)">
            <summary>
                Finds the minimum bounding rectangle given a set of points. Either send any set of points
                OR the convex hull 2D.
            </summary>
            <param name="points">The points.</param>
            <param name="pointsAreConvexHull">if set to <c>true</c> [points are convex hull].</param>
            <returns>BoundingRectangle.</returns>
        </member>
        <member name="M:TVGL.MinimumEnclosure.OrientedBoundingBox(TVGL.TessellatedSolid)">
            <summary>
                Finds the minimum bounding box.
            </summary>
            <param name="ts">The ts.</param>
            <returns>BoundingBox.</returns>
        </member>
        <member name="M:TVGL.MinimumEnclosure.OrientedBoundingBox(System.Collections.Generic.IList{TVGL.Vertex})">
            <summary>
                Finds the minimum bounding box.
            </summary>
            <param name="convexHullVertices">The convex hull vertices.</param>
            <returns>BoundingBox.</returns>
        </member>
        <member name="M:TVGL.MinimumEnclosure.Find_via_ChanTan_AABB_Approach(System.Collections.Generic.IList{TVGL.Vertex},TVGL.BoundingBox)">
            <summary>
                Find_via_s the chan tan_ aab b_ approach.
            </summary>
            <param name="convexHullVertices">The convex hull vertices.</param>
            <param name="minOBB">The minimum obb.</param>
            <returns>BoundingBox.</returns>
        </member>
        <member name="M:TVGL.MinimumEnclosure.GetLengthAndExtremeVertices(System.Double[],System.Collections.Generic.IList{TVGL.Vertex},System.Collections.Generic.List{TVGL.Vertex}@,System.Collections.Generic.List{TVGL.Vertex}@)">
            <summary>
                Given a Direction, dir, this function returns the maximum length along this Direction
                for the provided vertices as well as the two vertices that represent the extremes.
            </summary>
            <param name="direction">The direction.</param>
            <param name="vertices">The vertices.</param>
            <param name="bottomVertices">The bottom vertices.</param>
            <param name="topVertices">The top vertices.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TVGL.MinimumEnclosure.RotatingCalipers2DMethod(System.Collections.Generic.IList{TVGL.Point},System.Boolean)">
            <summary>
                Rotating the calipers 2D method. Convex hull must be a counter clockwise loop.
            </summary>
            <param name="points">The points.</param>
            <param name="pointsAreConvexHull">if set to <c>true</c> [points are convex hull].</param>
            <returns>System.Double.</returns>
            <exception cref="T:System.Exception">
                Area should never be negligilbe unless data is messed up.
            </exception>
        </member>
        <member name="M:TVGL.MinimumEnclosure.AddInCornerVertices(TVGL.BoundingBox)">
            <summary>
                Adds the corner vertices (actually 3d points) to the bounding box
            </summary>
            <param name="bb">The bb.</param>
            <returns>BoundingBox.</returns>
        </member>
        <member name="M:TVGL.MinimumEnclosure.OBBAlongDirection(System.Collections.Generic.IList{TVGL.Vertex},System.Double[])">
            <summary>
                Finds the minimum oriented bounding rectangle (2D). The 3D points of a tessellated solid
                are projected to the plane defined by "Direction". This returns a BoundingBox structure
                where the first Direction is the same as the prescribed Direction and the other two are
                in-plane unit vectors.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="direction">The Direction.</param>
            <returns>BoundingBox.</returns>
            <exception cref="T:System.Exception">Volume should never be negligible, unless the input data is bad</exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:TVGL.MinimumEnclosure.FindOBBAlongDirection(TVGL.MinimumEnclosure.BoundingBoxData)">
            <summary>
                Finds the obb along direction.
            </summary>
            <param name="boxData">The box data.</param>
        </member>
        <member name="T:TVGL.PolygonOperations">
            <summary>
            A set of general operation for points and paths
            </summary>
        </member>
        <member name="M:TVGL.PolygonOperations.Length(System.Collections.Generic.IList{TVGL.Point})">
            <summary>
            Gets the length of a path
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.PolygonOperations.CCWPositive(System.Collections.Generic.IList{TVGL.Point})">
            <summary>
            Sets a polygon to counter clock wise positive
            </summary>
            <param name="p"></param>
            <returns></returns>
            <assumptions>
            1. the polygon is closed
            2. the last point is not repeated.
            3. the polygon is simple (does not intersect itself or have holes)
            </assumptions>
        </member>
        <member name="M:TVGL.PolygonOperations.CWNegative(System.Collections.Generic.IList{TVGL.Point})">
            <summary>
            Sets a polygon to clock wise negative
            </summary>
            <param name="p"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TVGL.PolygonOperations.SimplifyFuzzy(System.Collections.Generic.IList{TVGL.Point})">
            <summary>
            Simplifies a polygon, by removing self intersection. This may output several polygons.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.PolygonOperations.CanSimplifyToSinglePolygon(System.Collections.Generic.IList{TVGL.Point},System.Collections.Generic.List{TVGL.Point}@)">
            <summary>
            Simplifies a polygon, by removing self intersection. This results in one polygon, but may not be successful 
            if multiple polygons 
            </summary>
            <param name="polygon"></param>
            <param name="simplifiedPolygon"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.PolygonOperations.OffsetRound(System.Collections.Generic.IEnumerable{TVGL.Point},System.Double,System.Double)">
            <summary>
            Offets the given path by the given offset, rounding corners.
            </summary>
            <param name="path"></param>
            <param name="offset"></param>
            <param name="minLength"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.PolygonOperations.OffsetRound(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{TVGL.Point}},System.Double,System.Double)">
            <summary>
            Offsets all paths by the given offset value. Rounds the corners.
            Offest value may be positive or negative.
            Loops must be ordered CCW positive.
            </summary>
            <param name="paths"></param>
            <param name="offset"></param>
            <param name="minLength"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.PolygonOperations.OffsetMiter(System.Collections.Generic.IEnumerable{TVGL.Point},System.Double,System.Double)">
            <summary>
            Offsets all paths by the given offset value. Squares the corners.
            Offest value may be positive or negative. 
            </summary>
            <param name="path"></param>
            <param name="offset"></param>
            <param name="minLength"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.PolygonOperations.OffsetMiter(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{TVGL.Point}},System.Double,System.Double)">
            <summary>
            Offsets all paths by the given offset value. Miters the corners.
            Offest value may be positive or negative.
            Loops must be ordered CCW positive.
            </summary>
            <param name="paths"></param>
            <param name="minLength"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.PolygonOperations.OffsetSquare(System.Collections.Generic.List{TVGL.Point},System.Double,System.Double)">
            <summary>
            Offsets all paths by the given offset value. Squares the corners.
            Offest value may be positive or negative. 
            </summary>
            <param name="path"></param>
            <param name="offset"></param>
            <param name="minLength"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.PolygonOperations.OffsetSquare(System.Collections.Generic.List{System.Collections.Generic.List{TVGL.Point}},System.Double,System.Double)">
            <summary>
            Offsets all paths by the given offset value. Squares the corners.
            Offest value may be positive or negative.
            Loops must be ordered CCW positive.
            </summary>
            <param name="paths"></param>
            <param name="minLength"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.PolygonOperations.Union(System.Collections.Generic.IList{System.Collections.Generic.List{TVGL.Point}},System.Collections.Generic.IList{System.Collections.Generic.List{TVGL.Point}},System.Boolean)">
            <summary>
            Union. Joins paths that are touching into merged larger subject.
            </summary>
            <param name="subject"></param>
            <param name="clip"></param>
            <param name="simplifyPriorToUnion"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:TVGL.PolygonOperations.Union(System.Collections.Generic.List{TVGL.Point},System.Collections.Generic.List{TVGL.Point},System.Boolean)">
            <summary>
            Union. Joins paths that are touching into merged larger subject.
            </summary>
            <param name="subject"></param>
            <param name="clip"></param>
            <param name="simplifyPriorToUnion"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:TVGL.PolygonOperations.Union(System.Collections.Generic.IList{System.Collections.Generic.List{TVGL.Point}},System.Collections.Generic.List{TVGL.Point},System.Boolean)">
            <summary>
            Union. Joins paths that are touching into merged larger subject.
            </summary>
            <param name="subject"></param>
            <param name="clip"></param>
            <param name="simplifyPriorToUnion"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:TVGL.PolygonOperations.UnionEvenOdd(System.Collections.Generic.IList{System.Collections.Generic.List{TVGL.Point}},System.Boolean)">
            <summary>
            Union based on Even/Odd methodology. Useful for correctly ordering a set of paths.
            </summary>
            <param name="subject"></param>
            <param name="simplifyPriorToUnion"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:TVGL.PolygonOperations.Difference(System.Collections.Generic.IList{System.Collections.Generic.List{TVGL.Point}},System.Collections.Generic.IList{System.Collections.Generic.List{TVGL.Point}},System.Boolean)">
            <summary>
            Difference. Gets the difference between two sets of polygons. 
            </summary>
            <param name="subject"></param>
            <param name="clip"></param>
            <param name="simplifyPriorToDifference"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:TVGL.PolygonOperations.Difference(System.Collections.Generic.List{TVGL.Point},System.Collections.Generic.List{TVGL.Point},System.Boolean)">
            <summary>
            Difference. Gets the difference between two sets of polygons. 
            </summary>
            <param name="subject"></param>
            <param name="clip"></param>
            <param name="simplifyPriorToDifference"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:TVGL.PolygonOperations.Difference(System.Collections.Generic.IList{System.Collections.Generic.List{TVGL.Point}},System.Collections.Generic.List{TVGL.Point},System.Boolean)">
            <summary>
            Difference. Gets the difference between two sets of polygons. 
            </summary>
            <param name="subject"></param>
            <param name="clip"></param>
            <param name="simplifyPriorToDifference"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:TVGL.PolygonOperations.Difference(System.Collections.Generic.List{TVGL.Point},System.Collections.Generic.IList{System.Collections.Generic.List{TVGL.Point}},System.Boolean)">
            <summary>
            Difference. Gets the difference between two sets of polygons. 
            </summary>
            <param name="subject"></param>
            <param name="clip"></param>
            <param name="simplifyPriorToDifference"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:TVGL.PolygonOperations.Intersection(System.Collections.Generic.List{TVGL.Point},System.Collections.Generic.List{TVGL.Point},System.Boolean)">
            <summary>
            Intersection. Gets the areas covered by both the subjects and the clips. 
            </summary>
            <param name="subject"></param>
            <param name="clip"></param>
            <param name="simplifyPriorToIntersection"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:TVGL.PolygonOperations.Intersection(System.Collections.Generic.IList{System.Collections.Generic.List{TVGL.Point}},System.Collections.Generic.List{TVGL.Point},System.Boolean)">
            <summary>
            Intersection. Gets the areas covered by both the subjects and the clips.
            </summary>
            <param name="subjects"></param>
            <param name="clip"></param>
            <param name="simplifyPriorToIntersection"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:TVGL.PolygonOperations.Intersection(System.Collections.Generic.List{TVGL.Point},System.Collections.Generic.IList{System.Collections.Generic.List{TVGL.Point}},System.Boolean)">
            <summary>
            Intersection. Gets the areas covered by both the subjects and the clips. 
            </summary>
            <param name="subject"></param>
            <param name="clips"></param>
            <param name="simplifyPriorToIntersection"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:TVGL.PolygonOperations.Intersection(System.Collections.Generic.IList{System.Collections.Generic.List{TVGL.Point}},System.Collections.Generic.IList{System.Collections.Generic.List{TVGL.Point}},System.Boolean)">
            <summary>
            Intersection. Gets the areas covered by both the subjects and the clips.
            </summary>
            <param name="subject"></param>
            <param name="clip"></param>
            <param name="simplifyPriorToIntersection"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:TVGL.PolygonOperations.Xor(System.Collections.Generic.IList{System.Collections.Generic.List{TVGL.Point}},System.Collections.Generic.IList{System.Collections.Generic.List{TVGL.Point}},System.Boolean)">
            <summary>
            XOR. Opposite of Intersection. Gets the areas covered by only either subjects or clips. 
            </summary>
            <param name="subject"></param>
            <param name="clip"></param>
            <param name="simplifyPriorToXor"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:TVGL.PolygonOperations.Xor(System.Collections.Generic.List{TVGL.Point},System.Collections.Generic.List{TVGL.Point},System.Boolean)">
            <summary>
            XOR. Opposite of Intersection. Gets the areas covered by only either subjects or clips. 
            </summary>
            <param name="subject"></param>
            <param name="clip"></param>
            <param name="simplifyPriorToXor"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:TVGL.PolygonOperations.Xor(System.Collections.Generic.IList{System.Collections.Generic.List{TVGL.Point}},System.Collections.Generic.List{TVGL.Point},System.Boolean)">
            <summary>
            XOR. Opposite of Intersection. Gets the areas covered by only either subjects or clips. 
            </summary>
            <param name="subjects"></param>
            <param name="clip"></param>
            <param name="simplifyPriorToXor"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:TVGL.PolygonOperations.Xor(System.Collections.Generic.List{TVGL.Point},System.Collections.Generic.IList{System.Collections.Generic.List{TVGL.Point}},System.Boolean)">
            <summary>
            XOR. Opposite of Intersection. Gets the areas covered by only either subjects or clips.  
            </summary>
            <param name="subject"></param>
            <param name="clips"></param>
            <param name="simplifyPriorToXor"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:TVGL.PolygonOperations.BooleanOperation(TVGL.ClipperInt.PolyFillType,TVGL.ClipperInt.ClipType,System.Collections.Generic.IEnumerable{System.Collections.Generic.List{TVGL.Point}},System.Collections.Generic.IEnumerable{System.Collections.Generic.List{TVGL.Point}},System.Boolean,System.Double)">
            <summary>
            Performs the Boolean Operations from the Clipper Library
            </summary>
            <param name="clipType"></param>
            <param name="subject"></param>
            <param name="clip"></param>
            <param name="simplifyPriorToBooleanOperation"></param>
            <param name="scale"></param>
            <param name="fillMethod"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:TVGL.PolygonOperations.Union3(System.Collections.Generic.IList{System.Collections.Generic.List{TVGL.Point}},System.Collections.Generic.IList{System.Collections.Generic.List{TVGL.Point}})">
            <summary>
             Union. Joins paths that are touching into merged larger subject.
            </summary>
            <param name="subject"></param>
            <param name="clip"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.PolygonOperations.BooleanOperation(System.Collections.Generic.IList{System.Collections.Generic.List{TVGL.Point}},System.Collections.Generic.IList{System.Collections.Generic.List{TVGL.Point}},TVGL.BooleanOperationType)">
            <reference>
            This aglorithm is based on on the paper:
            A simple algorithm for Boolean operations on polygons. Martínez, et. al. 2013. Advances in Engineering Software.
            Links to paper: http://dx.doi.org/10.1016/j.advengsoft.2013.04.004 OR http://www.sciencedirect.com/science/article/pii/S0965997813000379
            </reference>
        </member>
        <member name="T:TVGL.IOFunctions.threemfclasses.Build">
            <summary>
                Class Build is a major categoy usually following resources.
            </summary>
        </member>
        <member name="M:TVGL.IOFunctions.threemfclasses.Build.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.IOFunctions.threemfclasses.Build" /> class.
            </summary>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Build.Items">
            <summary>
                Gets or sets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="T:TVGL.IOFunctions.threemfclasses.Item">
            <summary>
                Class Item - is used in the build section.
            </summary>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Item.objectid">
            <summary>
                Gets or sets the objectid.
            </summary>
            <value>The objectid.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Item.transform">
            <summary>
                Gets or sets the transform.
            </summary>
            <value>The transform.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Item.itemref">
            <summary>
                Gets or sets the itemref.
            </summary>
        </member>
        <member name="T:TVGL.IOFunctions.threemfclasses.Metadata">
            <summary>
                Class Metadata is used in the header and potentially other places.
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.threemfclasses.Metadata.type">
            <summary>
                The type
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.threemfclasses.Metadata.Value">
            <summary>
                The value
            </summary>
        </member>
        <member name="T:TVGL.IOFunctions.threemfclasses.Component">
            <summary>
                Class Component.
            </summary>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Component.objectid">
            <summary>
                Gets or sets the objectid.
            </summary>
            <value>The objectid.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Component.transform">
            <summary>
                Gets or sets the transform.
            </summary>
            <value>The transform.</value>
        </member>
        <member name="T:TVGL.IOFunctions.threemfclasses.Triangle">
            <summary>
                Class CT_Triangle.
            </summary>
        </member>
        <member name="M:TVGL.IOFunctions.threemfclasses.Triangle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.IOFunctions.threemfclasses.Triangle" /> class.
            </summary>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Triangle.v1">
            <summary>
                Gets or sets the v1.
            </summary>
            <value>The v1.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Triangle.v2">
            <summary>
                Gets or sets the v2.
            </summary>
            <value>The v2.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Triangle.v3">
            <summary>
                Gets or sets the v3.
            </summary>
            <value>The v3.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Triangle.p1">
            <summary>
                Gets or sets the p1.
            </summary>
            <value>The p1.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Triangle.p2">
            <summary>
                Gets or sets the p2.
            </summary>
            <value>The p2.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Triangle.p3">
            <summary>
                Gets or sets the p3.
            </summary>
            <value>The p3.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Triangle.pid">
            <summary>
                Gets or sets the pid.
            </summary>
            <value>The pid.</value>
        </member>
        <member name="T:TVGL.IOFunctions.threemfclasses.Vertex">
            <summary>
                Class CT_Vertex.
            </summary>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Vertex.x">
            <summary>
                Gets or sets the x.
            </summary>
            <value>The x.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Vertex.y">
            <summary>
                Gets or sets the y.
            </summary>
            <value>The y.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Vertex.z">
            <summary>
                Gets or sets the z.
            </summary>
            <value>The z.</value>
        </member>
        <member name="T:TVGL.IOFunctions.threemfclasses.Mesh">
            <summary>
                Class CT_Mesh.
            </summary>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Mesh.vertices">
            <summary>
                Gets or sets the vertices.
            </summary>
            <value>The vertices.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Mesh.triangles">
            <summary>
                Gets or sets the triangles.
            </summary>
            <value>The triangles.</value>
        </member>
        <member name="T:TVGL.IOFunctions.threemfclasses.Object">
            <summary>
                Class Object.
            </summary>
        </member>
        <member name="M:TVGL.IOFunctions.threemfclasses.Object.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.IOFunctions.threemfclasses.Object" /> class.
            </summary>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Object.id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Object.type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Object.MaterialID">
            <summary>
            Gets or sets the material identifier.
            </summary>
            <value>The material identifier.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Object.thumbnail">
            <summary>
            Gets or sets the thumbnail.
            </summary>
            <value>The thumbnail.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Object.partnumber">
            <summary>
            Gets or sets the partnumber.
            </summary>
            <value>The partnumber.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Object.name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Object.mesh">
            <summary>
            Gets or sets the mesh.
            </summary>
            <value>The mesh.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Object.components">
            <summary>
                Gets or sets the components.
            </summary>
            <value>The components.</value>
        </member>
        <member name="T:TVGL.IOFunctions.threemfclasses.ObjectType">
            <summary>
                Enum ST_ObjectType
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.threemfclasses.ObjectType.model">
            <summary>
                The model
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.threemfclasses.ObjectType.support">
            <summary>
                The support
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.threemfclasses.ObjectType.other">
            <summary>
                The other
            </summary>
        </member>
        <member name="T:TVGL.IOFunctions.threemfclasses.Resources">
            <summary>
                Class CT_Resources.
            </summary>
        </member>
        <member name="M:TVGL.IOFunctions.threemfclasses.Resources.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.IOFunctions.threemfclasses.Resources" /> class.
            </summary>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Resources.basematerials">
            <summary>
            Gets or sets the basematerials.
            </summary>
            <value>The basematerials.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Resources.materials">
            <summary>
            Gets or sets the materials.
            </summary>
            <value>The materials.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Resources.colors">
            <summary>
            Gets or sets the colors.
            </summary>
            <value>The colors.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Resources.objects">
            <summary>
                Gets or sets the object.
            </summary>
            <value>The object.</value>
        </member>
        <member name="T:TVGL.IOFunctions.threemfclasses.Material">
            <summary>
                Class Material.
            </summary>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Material.name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Material.id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Material.colorid">
            <summary>
            Gets or sets the colorid.
            </summary>
            <value>The colorid.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Material.type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:TVGL.IOFunctions.threemfclasses.Color3MF">
            <summary>
                Class Color3MF.
            </summary>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Color3MF.name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Color3MF.id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Color3MF.colorString">
            <summary>
            Gets or sets the color string.
            </summary>
            <value>The color string.</value>
        </member>
        <member name="T:TVGL.IOFunctions.threemfclasses.BaseMaterials">
            <summary>
            Class BaseMaterials.
            </summary>
        </member>
        <member name="M:TVGL.IOFunctions.threemfclasses.BaseMaterials.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.IOFunctions.threemfclasses.BaseMaterials"/> class.
            </summary>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.BaseMaterials.bases">
            <summary>
            Gets or sets the base.
            </summary>
            <value>The base.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.BaseMaterials.id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="T:TVGL.IOFunctions.threemfclasses.Base">
            <summary>
                Class Base.
            </summary>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Base.name">
            <summary>
                Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Base.colorString">
            <summary>
            Gets or sets the color string.
            </summary>
            <value>The color string.</value>
        </member>
        <member name="T:TVGL.IOFunctions.threemfclasses.Types">
            <summary>
            Class Types.
            </summary>
        </member>
        <member name="M:TVGL.IOFunctions.threemfclasses.Types.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.IOFunctions.threemfclasses.Types" /> class.
            </summary>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Types.Defaults">
            <summary>
            Gets or sets the defaults.
            </summary>
            <value>The defaults.</value>
        </member>
        <member name="F:TVGL.IOFunctions.threemfclasses.Types.rels">
            <summary>
            The rels
            </summary>
        </member>
        <member name="T:TVGL.IOFunctions.threemfclasses.Default">
            <summary>
            Class Default.
            </summary>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Default.Extension">
            <summary>
            Gets or sets the extension.
            </summary>
            <value>The extension.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Default.ContentType">
            <summary>
            Gets or sets the type of the content.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="T:TVGL.IOFunctions.threemfclasses.Relationship">
            <summary>
            Class Relationship.
            </summary>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Relationship.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Relationship.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:TVGL.IOFunctions.threemfclasses.Relationship.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:TVGL.IOFunctions.ThreeMFFileData">
            <summary>
                Class ThreeMFFileData.
            </summary>
        </member>
        <member name="M:TVGL.IOFunctions.ThreeMFFileData.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.IOFunctions.ThreeMFFileData" /> class.
            </summary>
        </member>
        <member name="P:TVGL.IOFunctions.ThreeMFFileData.metadata">
            <summary>
                Gets or sets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="P:TVGL.IOFunctions.ThreeMFFileData.resources">
            <summary>
                Gets or sets the resources.
            </summary>
            <value>The resources.</value>
        </member>
        <member name="P:TVGL.IOFunctions.ThreeMFFileData.build">
            <summary>
                Gets or sets the build.
            </summary>
            <value>The build.</value>
        </member>
        <member name="P:TVGL.IOFunctions.ThreeMFFileData.requiredextensions">
            <summary>
                Gets or sets the requiredextensions.
            </summary>
            <value>The requiredextensions.</value>
        </member>
        <member name="M:TVGL.IOFunctions.ThreeMFFileData.OpenSolids(System.IO.Stream,System.String,System.Boolean)">
            <param name="s">The s.</param>
            <param name="filename">The filename.</param>
            <param name="inParallel">if set to <c>true</c> [in parallel].</param>
            <returns>List&lt;TessellatedSolid&gt;.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.ThreeMFFileData.Save(System.IO.Stream,System.Collections.Generic.IList{TVGL.TessellatedSolid})">
            <summary>
                Saves the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="solids">The solids.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.ThreeMFFileData.SaveModel(System.IO.Stream,System.Collections.Generic.IList{TVGL.TessellatedSolid})">
            <summary>
                Saves the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="solids">The solids.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TVGL.IOFunctions.amfclasses.AMF_Object">
            <summary>
                Class AMF_Object.
            </summary>
        </member>
        <member name="M:TVGL.IOFunctions.amfclasses.AMF_Object.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.IOFunctions.amfclasses.AMF_Object"/> class.
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Object.id">
            <summary>
                The identifier
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Object.mesh">
            <summary>
                The mesh
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Object.color">
            <summary>
                The color
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Object.metadata">
            <summary>
                The metadata
            </summary>
        </member>
        <member name="T:TVGL.IOFunctions.amfclasses.AMF_Mesh">
            <summary>
                Class AMF_Mesh.
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Mesh.vertices">
            <summary>
                The vertices
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Mesh.volume">
            <summary>
                The volume
            </summary>
        </member>
        <member name="T:TVGL.IOFunctions.amfclasses.AMF_Vertices">
            <summary>
                Class AMF_Vertices.
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Vertices.Edges">
            <summary>
                The edges
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Vertices.Vertices">
            <summary>
                The vertices
            </summary>
        </member>
        <member name="M:TVGL.IOFunctions.amfclasses.AMF_Vertices.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.IOFunctions.amfclasses.AMF_Vertices" /> class.
            </summary>
        </member>
        <member name="T:TVGL.IOFunctions.amfclasses.AMF_Triangle">
            <summary>
                Class AMF_Triangle.
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Triangle.color">
            <summary>
                The color
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Triangle.texmap">
            <summary>
                The texmap
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Triangle.v1">
            <summary>
                The v1
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Triangle.v2">
            <summary>
                The v2
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Triangle.v3">
            <summary>
                The v3
            </summary>
        </member>
        <member name="P:TVGL.IOFunctions.amfclasses.AMF_Triangle.VertexIndices">
            <summary>
                Gets the vertex indices.
            </summary>
            <value>The vertex indices.</value>
        </member>
        <member name="T:TVGL.IOFunctions.amfclasses.AMF_Color">
            <summary>
                Class AMF_Color.
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Color.a">
            <summary>
                a
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Color.b">
            <summary>
                The b
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Color.g">
            <summary>
                The g
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Color.r">
            <summary>
                The r
            </summary>
        </member>
        <member name="T:TVGL.IOFunctions.amfclasses.AMF_Volume">
            <summary>
                Class AMF_Volume.
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Volume.color">
            <summary>
                The color
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Volume.materialid">
            <summary>
                The materialid
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Volume.Triangles">
            <summary>
                The triangles
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Volume.type">
            <summary>
                The type
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Volume.typeSpecified">
            <summary>
                The type specified
            </summary>
        </member>
        <member name="M:TVGL.IOFunctions.amfclasses.AMF_Volume.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.IOFunctions.amfclasses.AMF_Volume" /> class.
            </summary>
        </member>
        <member name="T:TVGL.IOFunctions.amfclasses.AMF_VolumeType">
            <summary>
                Enum AMF_VolumeType
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_VolumeType.object">
            <summary>
                The object
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_VolumeType.support">
            <summary>
                The support
            </summary>
        </member>
        <member name="T:TVGL.IOFunctions.amfclasses.AMF_Edge">
            <summary>
                Class AMF_Edge.
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Edge.dx1">
            <summary>
                The DX1
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Edge.dx2">
            <summary>
                The DX2
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Edge.dy1">
            <summary>
                The dy1
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Edge.dy2">
            <summary>
                The dy2
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Edge.dz1">
            <summary>
                The DZ1
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Edge.dz2">
            <summary>
                The DZ2
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Edge.v1">
            <summary>
                The v1
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Edge.v2">
            <summary>
                The v2
            </summary>
        </member>
        <member name="T:TVGL.IOFunctions.amfclasses.AMF_Normal">
            <summary>
                Class AMF_Normal.
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Normal.nx">
            <summary>
                The nx
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Normal.ny">
            <summary>
                The ny
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Normal.nz">
            <summary>
                The nz
            </summary>
        </member>
        <member name="T:TVGL.IOFunctions.amfclasses.AMF_Coordinates">
            <summary>
                Class AMF_Coordinates.
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Coordinates.x">
            <summary>
                The x
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Coordinates.y">
            <summary>
                The y
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Coordinates.z">
            <summary>
                The z
            </summary>
        </member>
        <member name="P:TVGL.IOFunctions.amfclasses.AMF_Coordinates.AsArray">
            <summary>
                Gets as array.
            </summary>
            <value>As array.</value>
        </member>
        <member name="T:TVGL.IOFunctions.amfclasses.AMF_Vertex">
            <summary>
                Class AMF_Vertex.
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Vertex.coordinates">
            <summary>
                The coordinates
            </summary>
        </member>
        <member name="T:TVGL.IOFunctions.amfclasses.AMF_Constellation">
            <summary>
                Class AMF_Constellation.
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Constellation.id">
            <summary>
                The identifier
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Constellation.Instances">
            <summary>
                The instance
            </summary>
        </member>
        <member name="M:TVGL.IOFunctions.amfclasses.AMF_Constellation.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.IOFunctions.amfclasses.AMF_Constellation" /> class.
            </summary>
        </member>
        <member name="T:TVGL.IOFunctions.amfclasses.AMF_Instance">
            <summary>
                Class AMF_Instance.
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Instance.deltax">
            <summary>
                The deltax
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Instance.deltaxSpecified">
            <summary>
                The deltax specified
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Instance.deltay">
            <summary>
                The deltay
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Instance.deltaySpecified">
            <summary>
                The deltay specified
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Instance.deltaz">
            <summary>
                The deltaz
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Instance.deltazSpecified">
            <summary>
                The deltaz specified
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Instance.objectid">
            <summary>
                The objectid
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Instance.rx">
            <summary>
                The rx
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Instance.rxSpecified">
            <summary>
                The rx specified
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Instance.ry">
            <summary>
                The ry
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Instance.rySpecified">
            <summary>
                The ry specified
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Instance.rz">
            <summary>
                The rz
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Instance.rzSpecified">
            <summary>
                The rz specified
            </summary>
        </member>
        <member name="T:TVGL.IOFunctions.amfclasses.AMF_Texture">
            <summary>
                Class AMF_Texture.
            </summary>
        </member>
        <member name="M:TVGL.IOFunctions.amfclasses.AMF_Texture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.IOFunctions.amfclasses.AMF_Texture"/> class.
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Texture.depth">
            <summary>
                The depth
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Texture.height">
            <summary>
                The height
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Texture.id">
            <summary>
                The identifier
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Texture.tiled">
            <summary>
                The tiled
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Texture.type">
            <summary>
                The type
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Texture.Value">
            <summary>
                The value
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Texture.width">
            <summary>
                The width
            </summary>
        </member>
        <member name="T:TVGL.IOFunctions.amfclasses.AMF_TextureType">
            <summary>
                Enum AMF_TextureType
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_TextureType.grayscale">
            <summary>
                The grayscale
            </summary>
        </member>
        <member name="T:TVGL.IOFunctions.amfclasses.AMF_Composite">
            <summary>
                Class AMF_Composite.
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Composite.materialid">
            <summary>
                The materialid
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Composite.Value">
            <summary>
                The value
            </summary>
        </member>
        <member name="T:TVGL.IOFunctions.amfclasses.AMF_Material">
            <summary>
                Class AMF_Material.
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Material.composite">
            <summary>
                The composite
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Material.id">
            <summary>
                The identifier
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Material.metadata">
            <summary>
                The metadata
            </summary>
        </member>
        <member name="M:TVGL.IOFunctions.amfclasses.AMF_Material.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.IOFunctions.amfclasses.AMF_Material" /> class.
            </summary>
        </member>
        <member name="T:TVGL.IOFunctions.amfclasses.AMF_Metadata">
            <summary>
                Class AMF_Metadata.
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Metadata.type">
            <summary>
                The type
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_Metadata.Value">
            <summary>
                The value
            </summary>
        </member>
        <member name="M:TVGL.IOFunctions.amfclasses.AMF_Metadata.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:TVGL.IOFunctions.amfclasses.AMF_TexMap">
            <summary>
                Class AMF_TexMap.
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_TexMap.atexid">
            <summary>
                The atexid
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_TexMap.btexid">
            <summary>
                The btexid
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_TexMap.gtexid">
            <summary>
                The gtexid
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_TexMap.rtexid">
            <summary>
                The rtexid
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_TexMap.utex1">
            <summary>
                The utex1
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_TexMap.utex2">
            <summary>
                The utex2
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_TexMap.utex3">
            <summary>
                The utex3
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_TexMap.vtex1">
            <summary>
                The vtex1
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_TexMap.vtex2">
            <summary>
                The vtex2
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_TexMap.vtex3">
            <summary>
                The vtex3
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_TexMap.wtex1">
            <summary>
                The wtex1
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_TexMap.wtex1Specified">
            <summary>
                The wtex1 specified
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_TexMap.wtex2">
            <summary>
                The wtex2
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_TexMap.wtex2Specified">
            <summary>
                The wtex2 specified
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_TexMap.wtex3">
            <summary>
                The wtex3
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.amfclasses.AMF_TexMap.wtex3Specified">
            <summary>
                The wtex3 specified
            </summary>
        </member>
        <member name="T:TVGL.IOFunctions.PLYFileData">
            <summary>
                Class PLYFileData.
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.PLYFileData.readInOrder">
            <summary>
                The read in order
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.PLYFileData.vertices">
            <summary>
                Gets or sets the Vertices.
            </summary>
            <value>The vertices.</value>
        </member>
        <member name="F:TVGL.IOFunctions.PLYFileData.faceToVertexIndices">
            <summary>
                Gets the face to vertex indices.
            </summary>
            <value>The face to vertex indices.</value>
        </member>
        <member name="F:TVGL.IOFunctions.PLYFileData.numVertices">
            <summary>
                Gets the number vertices.
            </summary>
            <value>The number vertices.</value>
        </member>
        <member name="F:TVGL.IOFunctions.PLYFileData.numFaces">
            <summary>
                Gets the number faces.
            </summary>
            <value>The number faces.</value>
        </member>
        <member name="F:TVGL.IOFunctions.PLYFileData.numEdges">
            <summary>
                Gets the number edges.
            </summary>
            <value>The number edges.</value>
        </member>
        <member name="M:TVGL.IOFunctions.PLYFileData.OpenSolid(System.IO.Stream,System.String)">
            <summary>
            Opens the specified s.
            </summary>
            <param name="s">The s.</param>
            <param name="filename">The filename.</param>
            <returns>List&lt;TessellatedSolid&gt;.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TVGL.IOFunctions.PLYFileData.ReadHeader(System.IO.StreamReader)">
            <summary>
                Reads the header.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:TVGL.IOFunctions.PLYFileData.ReadEdges(System.IO.StreamReader)">
            <summary>
                Reads the edges.
            </summary>
            <param name="reader">The reader.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.PLYFileData.ReadFaces(System.IO.StreamReader)">
            <summary>
                Reads the faces.
            </summary>
            <param name="reader">The reader.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.PLYFileData.ReadVertices(System.IO.StreamReader)">
            <summary>
                Reads the vertices.
            </summary>
            <param name="reader">The reader.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.PLYFileData.ReadEdges(System.IO.BinaryReader)">
            <summary>
                Reads the edges.
            </summary>
            <param name="reader">The reader.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.PLYFileData.ReadFaces(System.IO.BinaryReader)">
            <summary>
                Reads the faces.
            </summary>
            <param name="reader">The reader.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.PLYFileData.ReadVertices(System.IO.BinaryReader)">
            <summary>
                Reads the vertices.
            </summary>
            <param name="reader">The reader.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.PLYFileData.SaveSolidASCII(System.IO.Stream,TVGL.TessellatedSolid)">
            <summary>
            Saves the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="solid">The solid.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.PLYFileData.SaveSolidBinary(System.IO.Stream,TVGL.TessellatedSolid)">
            <summary>
            Saves the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="solid">The solid.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.PLYFileData.WriteHeader(System.IO.StreamWriter,TVGL.TessellatedSolid,System.Boolean)">
            <summary>
            Writes the header.
            </summary>
            <param name="writer">The writer.</param>
            <param name="solid">The solid.</param>
            <param name="isBinary">if set to <c>true</c> [is binary].</param>
        </member>
        <member name="T:TVGL.IOFunctions.OFFFileData">
            <summary>
                Class OFFFileData.
            </summary>
        </member>
        <member name="M:TVGL.IOFunctions.OFFFileData.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.IOFunctions.OFFFileData" /> class.
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.OFFFileData._lastColor">
            <summary>
                The last color
            </summary>
        </member>
        <member name="P:TVGL.IOFunctions.OFFFileData.HasColorSpecified">
            <summary>
                Gets the has color specified.
            </summary>
            <value>The has color specified.</value>
        </member>
        <member name="P:TVGL.IOFunctions.OFFFileData.Colors">
            <summary>
                Gets or sets the colors.
            </summary>
            <value>The colors.</value>
        </member>
        <member name="P:TVGL.IOFunctions.OFFFileData.Vertices">
            <summary>
                Gets or sets the Vertices.
            </summary>
            <value>The vertices.</value>
        </member>
        <member name="P:TVGL.IOFunctions.OFFFileData.FaceToVertexIndices">
            <summary>
                Gets the face to vertex indices.
            </summary>
            <value>The face to vertex indices.</value>
        </member>
        <member name="P:TVGL.IOFunctions.OFFFileData.NumVertices">
            <summary>
                Gets the number vertices.
            </summary>
            <value>The number vertices.</value>
        </member>
        <member name="P:TVGL.IOFunctions.OFFFileData.NumFaces">
            <summary>
                Gets the number faces.
            </summary>
            <value>The number faces.</value>
        </member>
        <member name="P:TVGL.IOFunctions.OFFFileData.NumEdges">
            <summary>
                Gets the number edges.
            </summary>
            <value>The number edges.</value>
        </member>
        <member name="P:TVGL.IOFunctions.OFFFileData.ContainsHomogeneousCoordinates">
            <summary>
                Gets the contains homogeneous coordinates.
            </summary>
            <value>The contains homogeneous coordinates.</value>
        </member>
        <member name="P:TVGL.IOFunctions.OFFFileData.ContainsTextureCoordinates">
            <summary>
                Gets the contains texture coordinates.
            </summary>
            <value>The contains texture coordinates.</value>
        </member>
        <member name="P:TVGL.IOFunctions.OFFFileData.ContainsColors">
            <summary>
                Gets the contains colors.
            </summary>
            <value>The contains colors.</value>
        </member>
        <member name="P:TVGL.IOFunctions.OFFFileData.ContainsNormals">
            <summary>
                Gets the contains normals.
            </summary>
            <value>The contains normals.</value>
        </member>
        <member name="M:TVGL.IOFunctions.OFFFileData.OpenSolid(System.IO.Stream,System.String)">
            <summary>
            Opens the specified s.
            </summary>
            <param name="s">The s.</param>
            <param name="filename">The filename.</param>
            <returns>
            List&lt;TessellatedSolid&gt;.
            </returns>
        </member>
        <member name="M:TVGL.IOFunctions.OFFFileData.TryReadAscii(System.IO.Stream,TVGL.IOFunctions.OFFFileData@)">
            <summary>
                Tries the read ASCII.
            </summary>
            <param name="stream">The stream.</param>
            <param name="offData">The off data.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.OFFFileData.TryReadBinary(System.IO.Stream,TVGL.IOFunctions.OFFFileData@)">
            <summary>
                Tries the read binary.
            </summary>
            <param name="stream">The stream.</param>
            <param name="offData">The off data.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.IO.EndOfStreamException">Incomplete file</exception>
        </member>
        <member name="M:TVGL.IOFunctions.OFFFileData.SaveSolid(System.IO.Stream,TVGL.TessellatedSolid)">
            <summary>
            Saves the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="solid">The solid.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:TVGL.IOFunctions.AMFFileData">
            <summary>
                Class AMFFileData.
            </summary>
        </member>
        <member name="M:TVGL.IOFunctions.AMFFileData.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.IOFunctions.AMFFileData" /> class.
            </summary>
        </member>
        <member name="P:TVGL.IOFunctions.AMFFileData.Constellations">
            <summary>
                Gets or sets the constellations.
            </summary>
            <value>The constellations.</value>
        </member>
        <member name="P:TVGL.IOFunctions.AMFFileData.Objects">
            <summary>
                Gets or sets the objects.
            </summary>
            <value>The objects.</value>
        </member>
        <member name="P:TVGL.IOFunctions.AMFFileData.Textures">
            <summary>
                Gets or sets the textures.
            </summary>
            <value>The textures.</value>
        </member>
        <member name="P:TVGL.IOFunctions.AMFFileData.version">
            <summary>
                Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="M:TVGL.IOFunctions.AMFFileData.OpenSolids(System.IO.Stream,System.String)">
            <summary>
            Opens the specified s.
            </summary>
            <param name="s">The s.</param>
            <param name="filename">The filename.</param>
            <returns>List&lt;TessellatedSolid&gt;.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.AMFFileData.SaveSolids(System.IO.Stream,System.Collections.Generic.IList{TVGL.TessellatedSolid})">
            <summary>
            Saves the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="solids">The solids.</param>
            <returns>
              <c>true</c> if XXXX, <c>false</c> otherwise.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:TVGL.IOFunctions.IO">
            <summary>
                The IO or input/output class contains static functions for saving and loading files in common formats.
                Note that as a Portable class library, these IO functions cannot interact with your file system. In order
                to load or save, the filename is not enough. One needs to provide the stream.
            </summary>
        </member>
        <member name="P:TVGL.IOFunctions.IO.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:TVGL.IOFunctions.IO.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>
            The name of the file.
            </value>
        </member>
        <member name="P:TVGL.IOFunctions.IO.Units">
            <summary>
            Gets or sets the unit.
            </summary>
            <value>The unit.</value>
        </member>
        <member name="P:TVGL.IOFunctions.IO.UnitsAsString">
            <summary>
            Gets or sets the units as string.
            </summary>
            <value>The units as string.</value>
        </member>
        <member name="P:TVGL.IOFunctions.IO.Language">
            <summary>
            Gets or sets the language.
            </summary>
            <value>The language.</value>
        </member>
        <member name="P:TVGL.IOFunctions.IO.Comments">
            <summary>
            Gets or sets the comments.
            </summary>
            <value>
            The comments.
            </value>
        </member>
        <member name="F:TVGL.IOFunctions.IO._comments">
            <summary>
            The _comments
            </summary>
        </member>
        <member name="M:TVGL.IOFunctions.IO.Open(System.IO.Stream,System.String,System.Boolean)">
            <summary>
                Opens the specified stream, s. Note that as a Portable class library
            </summary>
            <param name="s">The s.</param>
            <param name="filename">The filename.</param>
            <param name="inParallel">The in parallel.</param>
            <returns>TessellatedSolid.</returns>
            <exception cref="T:System.Exception">
                Cannot open file without extension (e.g. f00.stl).
                or
                This function has been recently removed.
                or
                Cannot determine format from extension (not .stl, .ply, .3ds, .lwo, .obj, .objx, or .off.
            </exception>
            <exception cref="T:System.Exception">
                Cannot open file without extension (e.g. f00.stl).
                or
                Cannot determine format from extension (not .stl, .3ds, .lwo, .obj, .objx, or .off.
            </exception>
        </member>
        <member name="M:TVGL.IOFunctions.IO.OpenFromString(System.String,System.String)">
            <summary>
            Opens from string.
            </summary>
            <param name="data">The data.</param>
            <param name="name">The name.</param>
            <returns>List&lt;TessellatedSolid&gt;.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.IO.OpenFromString(System.String,TVGL.FileType)">
            <summary>
            Opens from string.
            </summary>
            <param name="data">The data.</param>
            <param name="fileType">Type of the file.</param>
            <returns>List&lt;TessellatedSolid&gt;.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.IO.GetNameFromFileName(System.String)">
            <summary>
            Gets the name from the filename.
            </summary>
            <param name="filename">The filename.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.IO.GetExtensionFromFileName(System.String)">
            <summary>
            Gets the name of the extension from file.
            </summary>
            <param name="filename">The filename.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.IO.ParseLine(System.String,System.String@,System.String@)">
            <summary>
                Parses the ID and values from the specified line.
            </summary>
            <param name="line">The line.</param>
            <param name="id">The id.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:TVGL.IOFunctions.IO.TryParseDoubleArray(System.String,System.Double[]@)">
            <summary>
                Tries to parse a vertex from a string.
            </summary>
            <param name="line">The input string.</param>
            <param name="doubles">The vertex point.</param>
            <returns>True if parsing was successful.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.IO.TryParseDoubleArray(System.Text.RegularExpressions.Regex,System.String,System.Double[]@)">
            <summary>
                Tries to parse a vertex from a string.
            </summary>
            <param name="parser">The parser.</param>
            <param name="line">The input string.</param>
            <param name="doubles">The vertex point.</param>
            <returns>True if parsing was successful.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.IO.ReadExpectedLine(System.IO.StreamReader,System.String)">
            <summary>
                Reads the next line with the expectation that is starts with the
                "expected" string. If the line does not have the expected value,
                then the StreamReader stays at the same position and
                false is returned.
            </summary>
            <param name="reader">The reader.</param>
            <param name="expected">The expected.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.IO.ReadLine(System.IO.StreamReader)">
            <summary>
                Reads the line.
            </summary>
            <param name="reader">The reader.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.IO.InferUnitsFromComments(System.Collections.Generic.List{System.String})">
            <summary>
            Infers the units from comments.
            </summary>
            <param name="comments">The comments.</param>
            <returns></returns>
        </member>
        <member name="M:TVGL.IOFunctions.IO.TryParseUnits(System.String,TVGL.UnitType@)">
            <summary>
            Tries to parse units.
            </summary>
            <param name="input">The input.</param>
            <param name="units">The units.</param>
            <returns></returns>
        </member>
        <member name="M:TVGL.IOFunctions.IO.ParseUnits(System.String)">
            <summary>
            Parses the units.
            </summary>
            <param name="input">The input.</param>
            <returns>TVGL.UnitType.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.IO.TryParseNumberTypeFromString(System.String,System.Type@)">
            <summary>
            Tries the parse number type from string.
            </summary>
            <param name="typeString">The type string.</param>
            <param name="type">The type.</param>
            <returns>Type.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TVGL.IOFunctions.IO.Save(System.IO.Stream,System.Collections.Generic.IList{TVGL.TessellatedSolid},TVGL.FileType)">
            <summary>
                Saves the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="solids">The solids.</param>
            <param name="fileType">Type of the file.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.IO.Save(System.IO.Stream,TVGL.TessellatedSolid,TVGL.FileType)">
            <summary>
            Saves the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="solid">The solid.</param>
            <param name="fileType">Type of the file.</param>
            <returns>System.Boolean.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.IO.SaveToString(TVGL.TessellatedSolid,TVGL.FileType)">
            <summary>
            Saves the solid as a string.
            </summary>
            <param name="solid">The solid.</param>
            <param name="fileType">Type of the file.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.IO.SaveToString(System.Collections.Generic.IList{TVGL.TessellatedSolid},TVGL.FileType)">
            <summary>
            Saves the solids as a string.
            </summary>
            <param name="solids">The solids.</param>
            <param name="fileType">Type of the file.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:TVGL.IOFunctions.IO.tvglDateMarkText">
            <summary>
            Gets the TVGL date mark text.
            </summary>
            <value>The TVGL date mark text.</value>
        </member>
        <member name="T:TVGL.IOFunctions.STLFileData">
            <summary>
                Provides an importer for StereoLithography .StL files.
            </summary>
            <remarks>The format is documented on <a href="http://en.wikipedia.org/wiki/STL_(file_format)">Wikipedia</a>.</remarks>
        </member>
        <member name="M:TVGL.IOFunctions.STLFileData.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.IOFunctions.STLFileData" /> class.
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.STLFileData.NormalRegex">
            <summary>
                The regular expression used to parse normal vectors.
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.STLFileData.VertexRegex">
            <summary>
                The regular expression used to parse vertices.
            </summary>
        </member>
        <member name="F:TVGL.IOFunctions.STLFileData._lastColor">
            <summary>
                The last color
            </summary>
        </member>
        <member name="P:TVGL.IOFunctions.STLFileData.HasColorSpecified">
            <summary>
                Gets the has color specified.
            </summary>
            <value>The has color specified.</value>
        </member>
        <member name="P:TVGL.IOFunctions.STLFileData.Colors">
            <summary>
                Gets or sets the colors.
            </summary>
            <value>The colors.</value>
        </member>
        <member name="P:TVGL.IOFunctions.STLFileData.Vertices">
            <summary>
                Gets or sets the Vertices.
            </summary>
            <value>The vertices.</value>
        </member>
        <member name="P:TVGL.IOFunctions.STLFileData.Normals">
            <summary>
                Gets or sets the normals.
            </summary>
            <value>The normals.</value>
        </member>
        <member name="M:TVGL.IOFunctions.STLFileData.OpenSolids(System.IO.Stream,System.String)">
            <summary>
            Opens the specified s.
            </summary>
            <param name="s">The s.</param>
            <param name="filename">The filename.</param>
            <returns>List&lt;TessellatedSolid&gt;.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.STLFileData.TryReadAscii(System.IO.Stream,System.String,System.Collections.Generic.List{TVGL.IOFunctions.STLFileData}@)">
            <summary>
            Reads the model in ASCII format from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="filename">The filename.</param>
            <param name="stlData">The STL data.</param>
            <returns>True if the model was loaded successfully.</returns>
        </member>
        <member name="M:TVGL.IOFunctions.STLFileData.ReadFacet(System.IO.StreamReader,System.String)">
            <summary>
                Reads a facet.
            </summary>
            <param name="reader">The stream reader.</param>
            <param name="normal">The normal.</param>
            <exception cref="T:System.IO.IOException">
                Unexpected line.
                or
                Unexpected line.
                or
                Unexpected line.
            </exception>
        </member>
        <member name="M:TVGL.IOFunctions.STLFileData.TryReadBinary(System.IO.Stream,System.String,System.Collections.Generic.List{TVGL.IOFunctions.STLFileData}@)">
            <summary>
            Tries the read binary.
            </summary>
            <param name="stream">The stream.</param>
            <param name="filename">The filename.</param>
            <param name="stlData">The STL data.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.IO.EndOfStreamException">Incomplete file</exception>
            <exception cref="T:System.IO.EndOfStreamException">Incomplete file</exception>
        </member>
        <member name="M:TVGL.IOFunctions.STLFileData.ReadFacet(System.IO.BinaryReader)">
            <summary>
                Reads a triangle from a binary STL file.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:TVGL.IOFunctions.STLFileData.SaveASCII(System.IO.Stream,System.Collections.Generic.IList{TVGL.TessellatedSolid})">
            <summary>
                Saves the ASCII.
            </summary>
            <param name="stream">The stream.</param>
            <param name="solids">The solids.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TVGL.IOFunctions.STLFileData.SaveBinary(System.IO.Stream,System.Collections.Generic.IList{TVGL.TessellatedSolid})">
            <summary>
                Saves the binary.
            </summary>
            <param name="stream">The stream.</param>
            <param name="solids">The solids.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:TVGL.AreaDecomposition">
            <summary>
                Outputs cross sectional area along a given axis
            </summary>
        </member>
        <member name="M:TVGL.AreaDecomposition.Run(TVGL.TessellatedSolid,System.Double[],System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Runs the specified ts.
            </summary>
            <param name="ts">The ts.</param>
            <param name="axis">The axis.</param>
            <param name="stepSize">Size of the step.</param>
            <param name="minOffset">The minimum offset.</param>
            <param name="ignoreNegativeSpace">if set to <c>true</c> [ignore negative space].</param>
            <param name="convexHull2DDecompositon">if set to <c>true</c> [convex hull2 d decompositon].</param>
            <param name="boundingRectangleArea">if set to <c>true</c> [bounding rectangle area].</param>
            <returns>List&lt;System.Double[]&gt;.</returns>
        </member>
        <member name="M:TVGL.AreaDecomposition.Run(TVGL.TessellatedSolid,System.Double[],System.Collections.Generic.List{System.Double[]}@,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Runs the specified ts.
            </summary>
            <param name="ts">The ts.</param>
            <param name="axis">The axis.</param>
            <param name="pointsOfInterestForFeasability">The points of interest for feasability.</param>
            <param name="maxArea">The maximum area.</param>
            <param name="stepSize">Size of the step.</param>
            <param name="minOffset">The minimum offset.</param>
            <param name="ignoreNegativeSpace">if set to <c>true</c> [ignore negative space].</param>
            <param name="convexHull2DDecompositon">if set to <c>true</c> [convex hull2 d decompositon].</param>
            <param name="boundingRectangleArea">if set to <c>true</c> [bounding rectangle area].</param>
            <returns>List&lt;System.Double[]&gt;.</returns>
            <exception cref="T:System.Exception">Pick one or the other. Can't do both at the same time</exception>
        </member>
        <member name="M:TVGL.AreaDecomposition.RunRectangleRestricted(TVGL.TessellatedSolid,System.Double[],System.Double,System.Double,System.Double)">
            <summary>
                Runs the rectangle restricted.
            </summary>
            <param name="ts">The ts.</param>
            <param name="axis">The axis.</param>
            <param name="maxArea">The maximum area.</param>
            <param name="stepSize">Size of the step.</param>
            <param name="minOffset">The minimum offset.</param>
            <returns>List&lt;System.Double[]&gt;.</returns>
        </member>
        <member name="T:TVGL.AreaDecomposition.DecompositionData">
            <summary>
            The Decomposition Data Class used to store information from A Directional Decomposition
            </summary>
        </member>
        <member name="F:TVGL.AreaDecomposition.DecompositionData.Paths">
            <summary>
            A list of the paths that make up the slice of the solid at this distance along this direction
            </summary>
        </member>
        <member name="F:TVGL.AreaDecomposition.DecompositionData.DistanceAlongDirection">
            <summary>
            The distance along this direction
            </summary>
        </member>
        <member name="M:TVGL.AreaDecomposition.DecompositionData.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.List{TVGL.Point}},System.Double)">
            <summary>
            The Decomposition Data Class used to store information from A Directional Decomposition
            </summary>
            <param name="paths"></param>
            <param name="distanceAlongDirection"></param>
        </member>
        <member name="M:TVGL.AreaDecomposition.GetCrossSectionAtGivenDistance(TVGL.TessellatedSolid,System.Double[],System.Double)">
            <summary>
            Gets the Cross Section for a given distance
            </summary>
            <param name="ts"></param>
            <param name="direction"></param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.AreaDecomposition.DirectionalDecomposition(TVGL.TessellatedSolid,System.Double[],System.Double,System.Double)">
            <summary>
            Returns the decomposition data found from each slice of the decomposition. This data is used in other methods.
            </summary>
            <param name="ts"></param>
            <param name="direction"></param>
            <param name="stepSize"></param>
            <param name="minOffset"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.AreaDecomposition.UniformDirectionalDecomposition(TVGL.TessellatedSolid,System.Double[],System.Double)">
            <summary>
            Returns the decomposition data found from each slice of the decomposition. This data is used in other methods.
            </summary>
            <param name="ts"></param>
            <param name="direction"></param>
            <param name="stepSize"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.AreaDecomposition.AdditiveVolume(System.Collections.Generic.List{TVGL.AreaDecomposition.DecompositionData},System.Double,System.Collections.Generic.List{TVGL.AreaDecomposition.DecompositionData}@)">
            <summary>
            Gets the additive volume given a list of decomposition data
            </summary>
            <param name="decompData"></param>
            <param name="additiveAccuracy"></param>
            <param name="outputData"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:TVGL.AreaDecomposition.AdditiveVolume(TVGL.TessellatedSolid,System.Double[],System.Double,System.Double,System.Collections.Generic.List{System.Collections.Generic.List{System.Collections.Generic.List{TVGL.Point}}}@,System.Double)">
            <summary>
            Returns the additive volume of a solid, with support material and an offset accuracy, Given the direction of printing.
            </summary>
            <param name="ts"></param>
            <param name="direction"></param>
            <param name="stepSize"></param>
            <param name="additiveAccuracy">The additive processes accuracy, used for a Polygon Offset. </param>
            <param name="outputData"></param>
            <param name="minOffset"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.AreaDecomposition.CrossSectionalArea(System.Collections.Generic.Dictionary{System.Int32,TVGL.Edge},TVGL.Flat,System.Collections.Generic.List{System.Collections.Generic.List{TVGL.Edge}}@,System.Collections.Generic.List{System.Collections.Generic.List{TVGL.Edge}},System.Boolean)">
            <summary>
                Crosses the sectional area.
            </summary>
            <param name="edgeListDictionary">The edge list dictionary.</param>
            <param name="cuttingPlane">The cutting plane.</param>
            <param name="outputEdgeLoops">The output edge loops.</param>
            <param name="intputEdgeLoops">The intput edge loops.</param>
            <param name="ignoreNegativeSpace">if set to <c>true</c> [ignore negative space].</param>
            <returns>System.Double.</returns>
            <exception cref="T:System.Exception">Loop did not complete</exception>
        </member>
        <member name="M:TVGL.AreaDecomposition.ConvexHull2DArea(System.Collections.Generic.Dictionary{System.Int32,TVGL.Edge},TVGL.Flat)">
            <summary>
                Convexes the hull2 d area.
            </summary>
            <param name="edgeList">The edge list.</param>
            <param name="cuttingPlane">The cutting plane.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TVGL.AreaDecomposition.BoundingRectangleArea(System.Collections.Generic.Dictionary{System.Int32,TVGL.Edge},TVGL.Flat)">
            <summary>
                Boundings the rectangle area.
            </summary>
            <param name="edgeList">The edge list.</param>
            <param name="cuttingPlane">The cutting plane.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:TVGL.Extrude">
            <summary>
            Extrude functions
            </summary>
        </member>
        <member name="M:TVGL.Extrude.FromLoops(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{TVGL.Vertex}},System.Double[],System.Double)">
            <summary>
            Creates a Tesselated Solid by extruding the given loop along the given normal.
            Currently, this function recreates the Vertices, so no prior references will impact result.
            </summary>
            <param name="loops"></param>
            <param name="normal"></param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.Extrude.FromLoops(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Double[]}},System.Double[],System.Double)">
            <summary>
            Creates a Tesselated Solid by extruding the given loop along the given normal.
            </summary>
            <param name="loops"></param>
            <param name="extrudeDirection"></param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="T:TVGL.ListFunctions">
            <summary>
                Miscilaneous list functions
            </summary>
        </member>
        <member name="M:TVGL.ListFunctions.FacesWithDistinctNormals(System.Collections.Generic.List{TVGL.PolygonalFace})">
            <summary>
                Gets all the faces with distinct normals. NOT SURE THIS WORKS PROPERLY.
            </summary>
            <param name="faces">The faces.</param>
            <returns>List&lt;PolygonalFace&gt;.</returns>
        </member>
        <member name="M:TVGL.ListFunctions.Flats(System.Collections.Generic.IList{TVGL.PolygonalFace},System.Double,System.Double)">
            <summary>
                Gets a list of flats, given a list of faces.
            </summary>
            <param name="faces">The faces.</param>
            <param name="tolerance">The tolerance.</param>
            <param name="minSurfaceArea">The minimum surface area.</param>
            <returns>List&lt;Flat&gt;.</returns>
        </member>
        <member name="T:TVGL.Silhouette">
            <summary>
            The outline of a solid from a particular direction.
            </summary>
        </member>
        <member name="M:TVGL.Silhouette.Run2(TVGL.TessellatedSolid,System.Double[])">
            <summary>
            Gets the silhouette of a solid along a given normal.
            </summary>
            <param name="ts"></param>
            <param name="normal"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.Silhouette.Run3(TVGL.TessellatedSolid,System.Double[],System.Double)">
            <summary>
            Gets the silhouette of a solid along a given normal. 
            </summary>
            <param name="ts"></param>
            <param name="normal"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.Silhouette.Run(TVGL.TessellatedSolid,System.Double[],System.Double)">
            <summary>
            Gets the silhouette of a solid along a given normal. 
            </summary>
            <param name="ts"></param>
            <param name="normal"></param>
            <returns></returns>
        </member>
        <member name="T:TVGL.NodeType">
            <summary>
                Enum NodeType
            </summary>
        </member>
        <member name="F:TVGL.NodeType.DownwardReflex">
            <summary>
                The downward reflex
            </summary>
        </member>
        <member name="F:TVGL.NodeType.Duplicate">
            <summary>
                The duplicate
            </summary>
        </member>
        <member name="T:TVGL.Node">
            <summary>
                Node class used in Triangulate Polygon
                Inherets position from point class
            </summary>
        </member>
        <member name="P:TVGL.Node.LoopID">
            <summary>
                Gets the loop ID that this node belongs to.
            </summary>
            <value>The loop identifier.</value>
        </member>
        <member name="P:TVGL.Node.X">
            <summary>
                Gets or sets the x.
            </summary>
            <value>The x.</value>
        </member>
        <member name="P:TVGL.Node.Y">
            <summary>
                Gets or sets the y.
            </summary>
            <value>The y.</value>
        </member>
        <member name="P:TVGL.Node.Z">
            <summary>
                Gets or sets the z coordinate. If one is using Point in a 2D capacity, it can be ignored.
            </summary>
            <value>The z.</value>
        </member>
        <member name="P:TVGL.Node.StartLine">
            <summary>
                Gets the line that starts at this node.
            </summary>
            <value>The start line.</value>
        </member>
        <member name="P:TVGL.Node.EndLine">
            <summary>
                Gets the line that ends at this node.
            </summary>
            <value>The end line.</value>
        </member>
        <member name="P:TVGL.Node.Type">
            <summary>
                Gets the type of  node.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:TVGL.Node.Point">
            <summary>
                Gets the base class, Point of this node.
            </summary>
            <value>The point.</value>
        </member>
        <member name="P:TVGL.Node.IsRightChain">
            <summary>
                Gets the base class, Point of this node.
            </summary>
            <value><c>true</c> if this instance is right chain; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TVGL.Node.IsLeftChain">
            <summary>
                Gets the base class, Point of this node.
            </summary>
            <value><c>true</c> if this instance is left chain; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TVGL.Node.#ctor(TVGL.Point,TVGL.NodeType,System.Int32)">
            <summary>
                Create a new node from a given point
            </summary>
            <param name="currentPoint">The current point.</param>
            <param name="nodeType">Type of the node.</param>
            <param name="loopID">The loop identifier.</param>
        </member>
        <member name="M:TVGL.Node.#ctor(TVGL.Point,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Node" /> class.
            </summary>
            <param name="currentPoint">The current point.</param>
            <param name="loopID">The loop identifier.</param>
        </member>
        <member name="T:TVGL.Trapezoid">
            <summary>
                Trapezoid Class
            </summary>
        </member>
        <member name="M:TVGL.Trapezoid.#ctor(TVGL.Node,TVGL.Node,TVGL.NodeLine,TVGL.NodeLine)">
            <summary>
                Constructs a new trapezoid based on two nodes and two vertical lines.
            </summary>
            <param name="topNode">The top node.</param>
            <param name="bottomNode">The bottom node.</param>
            <param name="leftLine">The left line.</param>
            <param name="rightLine">The right line.</param>
        </member>
        <member name="P:TVGL.Trapezoid.TopNode">
            <summary>
                Gets the TopNode. Set is through constructor.
            </summary>
            <value>The top node.</value>
        </member>
        <member name="P:TVGL.Trapezoid.BottomNode">
            <summary>
                Gets the BottomNode. Set is through constructor.
            </summary>
            <value>The bottom node.</value>
        </member>
        <member name="P:TVGL.Trapezoid.LeftLine">
            <summary>
                Gets the left vertical line of the trapezoid. Set is through constructor.
            </summary>
            <value>The left line.</value>
        </member>
        <member name="P:TVGL.Trapezoid.RightLine">
            <summary>
                Gets the right vertical line of the trapezoid. Set is through constructor.
            </summary>
            <value>The right line.</value>
        </member>
        <member name="T:TVGL.PartialTrapezoid">
            <summary>
                Partial Trapezoid Class. Used to hold information to create Trapezoids.
            </summary>
        </member>
        <member name="M:TVGL.PartialTrapezoid.#ctor(TVGL.Node,TVGL.NodeLine,TVGL.NodeLine)">
            <summary>
                Constructs a partial trapezoid
            </summary>
            <param name="topNode">The top node.</param>
            <param name="leftLine">The left line.</param>
            <param name="rightLine">The right line.</param>
        </member>
        <member name="P:TVGL.PartialTrapezoid.TopNode">
            <summary>
                Gets the TopNode. Set is through constructor.
            </summary>
            <value>The top node.</value>
        </member>
        <member name="P:TVGL.PartialTrapezoid.LeftLine">
            <summary>
                Gets the left vertical line of the trapezoid. Set is through constructor.
            </summary>
            <value>The left line.</value>
        </member>
        <member name="P:TVGL.PartialTrapezoid.RightLine">
            <summary>
                Gets the right vertical line of the trapezoid. Set is through constructor.
            </summary>
            <value>The right line.</value>
        </member>
        <member name="M:TVGL.PartialTrapezoid.Contains(TVGL.NodeLine,TVGL.NodeLine)">
            <summary>
                Checks whether the partial trapezoid contains the two lines.
            </summary>
            <param name="line1">The line1.</param>
            <param name="line2">The line2.</param>
            <returns><c>true</c> if [contains] [the specified line1]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:TVGL.MonotonePolygon">
            <summary>
                Monotone Polygon, which consists of two ordered chains
                The chains start and end at the same nodes
            </summary>
        </member>
        <member name="M:TVGL.MonotonePolygon.#ctor(System.Collections.Generic.List{TVGL.Node},System.Collections.Generic.List{TVGL.Node},System.Collections.Generic.List{TVGL.Node})">
            <summary>
                Constructs a MonotonePolygon based on a list of nodes.
            </summary>
            <param name="leftChain">The left chain.</param>
            <param name="rightChain">The right chain.</param>
            <param name="sortedNodes">The sorted nodes.</param>
        </member>
        <member name="P:TVGL.MonotonePolygon.LeftChain">
            <summary>
                Gets Monochain1. Set is through the constructor.
            </summary>
            <value>The left chain.</value>
        </member>
        <member name="P:TVGL.MonotonePolygon.RightChain">
            <summary>
                Gets Monochain2. Set is through the constructor.
            </summary>
            <value>The right chain.</value>
        </member>
        <member name="P:TVGL.MonotonePolygon.SortedNodes">
            <summary>
                Gets Monochain2. Set is through the constructor.
            </summary>
            <value>The sorted nodes.</value>
        </member>
        <member name="T:TVGL.NodeLine">
            <summary>
                NodeLine
            </summary>
        </member>
        <member name="M:TVGL.NodeLine.#ctor(TVGL.Node,TVGL.Node)">
            <summary>
                Sets to and from nodes as well as slope and intercept of line.
            </summary>
            <param name="fromNode">From node.</param>
            <param name="toNode">To node.</param>
        </member>
        <member name="P:TVGL.NodeLine.ToNode">
            <summary>
                Gets the Node which the line is pointing to. Set is through the constructor.
            </summary>
            <value>To node.</value>
        </member>
        <member name="P:TVGL.NodeLine.FromNode">
            <summary>
                Gets the Node which the line is pointing away from. Set is through the constructor.
            </summary>
            <value>From node.</value>
        </member>
        <member name="P:TVGL.NodeLine.m">
            <summary>
                Gets the m.
            </summary>
            <value>The m.</value>
        </member>
        <member name="P:TVGL.NodeLine.b">
            <summary>
                Gets the b.
            </summary>
            <value>The b.</value>
        </member>
        <member name="M:TVGL.NodeLine.Xintercept(System.Double)">
            <summary>
                Gets X intercept given Y
            </summary>
            <param name="y">The y.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TVGL.NodeLine.Reverse">
            <summary>
                Reverses this instance.
            </summary>
        </member>
        <member name="T:TVGL.TriangulatePolygon">
            <summary>
            Triangulates a Polygon into faces in O(n log n) time.
            </summary>
             <References>
                Trapezoidation algorithm heavily based on: 
                "A Fast Trapezoidation Technique For Planar Polygons" by
                Gian Paolo Lorenzetto, Amitava Datta, and Richard Thomas. 2000.
                http://www.researchgate.net/publication/2547487_A_Fast_Trapezoidation_Technique_For_Planar_Polygons
                This algorithm should run in O(n log n)  time.    
            
                Triangulation method based on Montuno's work, but referenced material and algorithm are from:
                http://www.personal.kent.edu/~rmuhamma/Compgeometry/MyCG/PolyPart/polyPartition.htm
                This algorithm should run in O(n) time.
            </References>
        </member>
        <member name="M:TVGL.TriangulatePolygon.Run(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{TVGL.Vertex}},System.Double[],System.Boolean)">
            <summary>
            Triangulates a list of loops into faces in O(n*log(n)) time.
            </summary>
            <param name="loops">The loops.</param>
            <param name="normal">The normal.</param>
            <param name="ignoreNegativeSpace">if set to <c>true</c> [ignore negative space].</param>
            <returns>List&lt;List&lt;Vertex[]&gt;&gt;.</returns>
        </member>
        <member name="M:TVGL.TriangulatePolygon.Run(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{TVGL.Vertex}},System.Double[],System.Collections.Generic.List{System.Collections.Generic.List{System.Int32}}@,System.Boolean[]@,System.Boolean)">
            <summary>
            Triangulates a list of loops into faces in O(n*log(n)) time.
            </summary>
            <param name="loops">The loops.</param>
            <param name="normal">The normal.</param>
            <param name="groupsOfLoops">The groups of loops.</param>
            <param name="isPositive">The is positive.</param>
            <param name="ignoreNegativeSpace">if set to <c>true</c> [ignore negative space].</param>
            <returns>List&lt;List&lt;Vertex[]&gt;&gt;.</returns>
        </member>
        <member name="M:TVGL.TriangulatePolygon.Run2D(System.Collections.Generic.IList{TVGL.Point[]},System.Collections.Generic.List{System.Collections.Generic.List{System.Int32}}@,System.Boolean[]@,System.Boolean)">
            <summary>
            Triangulates a list of loops into faces in O(n*log(n)) time.
            Ignoring the negative space, fills in holes. DO NOT USE this
            parameter for watertight geometry.
            </summary>
            <param name="points2D">The points2 d.</param>
            <param name="groupsOfLoops">The groups of loops.</param>
            <param name="isPositive">The is positive.</param>
            <param name="ignoreNegativeSpace">if set to <c>true</c> [ignore negative space].</param>
            <returns>List&lt;List&lt;Vertex[]&gt;&gt;.</returns>
            <exception cref="T:System.Exception">
            Inputs into 'TriangulatePolygon' are unbalanced
            or
            Duplicate point found
            or
            Incorrect balance of node types
            or
            Incorrect balance of node types
            or
            Negative Loop must be inside a positive loop, but no positive loops are left. Check if loops were created correctly.
            or
            Trapezoidation failed to complete properly. Check to see that the assumptions are met.
            or
            Incorrect number of triangles created in triangulate function
            or
            </exception>
            <exception cref="T:System.Exception"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:TVGL.TriangulatePolygon.OrderLoops2D(System.Collections.Generic.IList{System.Collections.Generic.List{TVGL.Point}},System.Boolean[]@,System.Boolean)">
            <summary>
            Determines the order of a set of loops and their positive or negative directionality.
            If loop directionality is not know, make a array of booleans for isPositive and set
            isDirectionalityKnown to false.
            </summary>
            <param name="points2D"></param>
            <param name="isPositive"></param>
            <param name="isDirectionalityKnown"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.TriangulatePolygon.GetNodeType(TVGL.Node,TVGL.Node,TVGL.Node)">
            <summary>
            Gets the type of node for B.
            </summary>
            A, B, and C are counterclockwise ordered points.
        </member>
        <member name="T:TVGL.Point">
            <summary>
                The Point class is used to indicate a 2D or 3D location that may be outside
                of a solid (hence making Vertex an inappropriate choice).
                One of the useful aspects of the point object is that they contain a
                reference (or References) to vertices that may be representing in a
                transformed way. For example "Get2DProjection" returns the 2D projection of
                a set of vertices without changing those vertices. This is done by "wrapping"
                these Point objects around a vertex and then providing their new position.
            </summary>
        </member>
        <member name="P:TVGL.Point.X">
            <summary>
                Gets or sets the x.
            </summary>
            <value>The x.</value>
        </member>
        <member name="P:TVGL.Point.Y">
            <summary>
                Gets or sets the y.
            </summary>
            <value>The y.</value>
        </member>
        <member name="P:TVGL.Point.Z">
            <summary>
                Gets or sets the z coordinate. If one is using Point in a 2D capacity, it can be ignored.
            </summary>
            <value>The z.</value>
        </member>
        <member name="P:TVGL.Point.References">
            <summary>
                Gets or sets the references.
            </summary>
            <value>The references.</value>
            Cannot serialize vertices yet. Not a circular reference problem.
        </member>
        <member name="P:TVGL.Point.IndexInPath">
            <summary>
                Gets or sets the index in a path
            </summary>
        </member>
        <member name="P:TVGL.Point.PolygonIndex">
            <summary>
             Gets or sets the index of the polygon that this point belongs to
            </summary>
        </member>
        <member name="P:TVGL.Point.Lines">
            <summary>
            
            </summary>
            Cannot serialize lines yet. Not sure if circular reference will cause issues.
        </member>
        <member name="P:TVGL.Point.Position">
            <summary>
                Gets or sets the coordinates or position.
            </summary>
            <value>The coordinates or position.</value>
        </member>
        <member name="P:TVGL.Point.Position2D">
            <summary>
                Gets or sets the coordinates or position.
            </summary>
            <value>The coordinates or position.</value>
            <exception cref="T:System.Exception">Cannot set the value of a point with an array with more than 2 values.</exception>
        </member>
        <member name="M:TVGL.Point.#ctor(TVGL.Vertex)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Point" /> class.
            </summary>
            <param name="v">The v.</param>
        </member>
        <member name="M:TVGL.Point.#ctor(TVGL.Vertex,System.Double,System.Double)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Point" /> class.
            </summary>
            <param name="vertex">The vertex.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:TVGL.Point.#ctor(System.Double,System.Double)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Point" /> class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:TVGL.Point.#ctor(TVGL.Point)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Point" /> class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="point"></param>
        </member>
        <member name="M:TVGL.Point.#ctor(TVGL.Vertex,System.Double,System.Double,System.Double)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Point" /> class.
            </summary>
            <param name="vertex">The vertex.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
        </member>
        <member name="M:TVGL.Point.#ctor(System.Collections.Generic.IList{System.Double})">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Point" /> class.
            </summary>
            <param name="coordinates">The coordinates.</param>
        </member>
        <member name="P:TVGL.Point.Item(System.Int32)">
            <summary>
                this point
            </summary>
            <param name="index">The index.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TVGL.Point.op_Equality(TVGL.Point,TVGL.Point)">
            <summary>
            Gets whether points are equal
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.Point.op_Inequality(TVGL.Point,TVGL.Point)">
            <summary>
            Gets whether points are not equal
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.Point.Equals(System.Object)">
            <summary>
            Checks if this intPoint is equal to the given object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.Point.GetHashCode">
            <summary>
            Gets the HashCode for this Point
            </summary>
            <returns></returns>
        </member>
        <member name="T:TVGL.Torus">
            <summary>
                Class Torus.
            </summary>
        </member>
        <member name="F:TVGL.Torus.IsPositive">
            <summary>
                Is the sphere positive? (false is negative)
            </summary>
        </member>
        <member name="M:TVGL.Torus.#ctor(System.Collections.Generic.IEnumerable{TVGL.PolygonalFace})">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.PrimitiveSurface" /> class.
            </summary>
            <param name="faces">The faces.</param>
        </member>
        <member name="P:TVGL.Torus.Center">
            <summary>
                Gets the center.
            </summary>
            <value>The center.</value>
        </member>
        <member name="P:TVGL.Torus.Axis">
            <summary>
                Gets the axis.
            </summary>
            <value>The axis.</value>
        </member>
        <member name="P:TVGL.Torus.MajorRadius">
            <summary>
                Gets the major radius.
            </summary>
            <value>The major radius.</value>
        </member>
        <member name="P:TVGL.Torus.MinorRadius">
            <summary>
                Gets the minor radius.
            </summary>
            <value>The minor radius.</value>
        </member>
        <member name="M:TVGL.Torus.IsNewMemberOf(TVGL.PolygonalFace)">
            <summary>
                Determines whether [is new member of] [the specified face].
            </summary>
            <param name="face">The face.</param>
            <returns>Boolean.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TVGL.Torus.UpdateWith(TVGL.PolygonalFace)">
            <summary>
                Updates the with.
            </summary>
            <param name="face">The face.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TVGL.Torus.BuildFromMultipleFaces(System.Collections.Generic.List{TVGL.PolygonalFace})">
            <summary>
                Builds from multiple faces.
            </summary>
            <param name="faces">The faces.</param>
            <returns>PrimitiveSurface.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TVGL.Torus.Transform(System.Double[0:,0:])">
            <summary>
            Transforms the shape by the provided transformation matrix.
            </summary>
            <param name="transformMatrix">The transform matrix.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:TVGL.MiscFunctions">
            <summary>
                Miscellaneous Functions for TVGL
            </summary>
        </member>
        <member name="M:TVGL.MiscFunctions.SortAlongDirection(System.Double[][],System.Collections.Generic.List{TVGL.Vertex},System.Collections.Generic.List{TVGL.Vertex}@,System.Collections.Generic.List{System.Int32[]}@)">
            <summary>
                Returns a list of sorted vertices along a set direction. Ties are broken by direction[1] then direction[2] if
                available.
            </summary>
            <param name="directions">The directions.</param>
            <param name="vertices">The vertices.</param>
            <param name="sortedVertices">The sorted vertices.</param>
            <param name="duplicateRanges">The duplicate ranges.</param>
            <exception cref="T:System.Exception">
                Must provide between 1 to 3 direction vectors
                or
                Must provide between 1 to 3 direction vectors
            </exception>
        </member>
        <member name="M:TVGL.MiscFunctions.Perimeter(System.Collections.Generic.ICollection{TVGL.Point})">
            <summary>
            Gets the perimeter for a 2D set of points.
            </summary>
            <param name="polygon"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.MiscFunctions.Perimeter(System.Collections.Generic.ICollection{TVGL.Vertex})">
            <summary>
            Gets the Perimeter (length of a loop) of a 3D set of Vertices.
            </summary>
            <param name="polygon3D"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.MiscFunctions.AreaOfPolygon(System.Collections.Generic.IList{System.Collections.Generic.List{TVGL.Point}})">
            <summary>
                Calculate the area of any non-intersecting polygon.
            </summary>
        </member>
        <member name="M:TVGL.MiscFunctions.AreaOfPolygon(System.Collections.Generic.IList{TVGL.Point})">
            <summary>
                Calculate the area of any non-intersecting polygon.
            </summary>
            <param name="polygon"></param>
            <returns>System.Double.</returns>
            <reference>
                Method 1: http://www.mathopenref.com/coordpolygonarea2.html
                Faster Method: http://geomalgorithms.com/a01-_area.html
            </reference>
        </member>
        <member name="M:TVGL.MiscFunctions.AreaOf3DPolygon(System.Collections.Generic.ICollection{TVGL.Vertex},System.Double[])">
            <summary>
                Calculate the area of any non-intersecting polygon in 3D space
                This is faster than projecting to a 2D surface first in a seperate function.
            </summary>
            <param name="polygon">The polygon.</param>
            <param name="normal">The normal.</param>
            <returns>System.Double.</returns>
            <references>http://geomalgorithms.com/a01-_area.html </references>
        </member>
        <member name="M:TVGL.MiscFunctions.GetMultipleSolids(TVGL.TessellatedSolid)">
            <summary>
                Gets all the individual solids from a tesselated solid.
            </summary>
            <param name="ts">The ts.</param>
            <returns>List&lt;TessellatedSolid&gt;.</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:TVGL.MiscFunctions.Get2DProjectionPointsReorderingIfNecessary(System.Collections.Generic.IList{TVGL.Vertex},System.Double[],System.Double[0:,0:]@,System.Double,System.Boolean)">
            <summary>
                Returns the 2D path (list of points) of the 3D loop (list of vertices) as that they would be represented in
                the x-y plane (although the z-values will be non-zero). This does not destructively alter
                the vertices. Additionally, this function will keep the loops in their original positive/negative
                orientation.
            </summary>
            <param name="loop"></param>
            <param name="direction"></param>
            <param name="backTransform"></param>
            <param name="tolerance"></param>
            <param name="mergeDuplicateReferences"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.MiscFunctions.Get2DProjectionPoints(System.Collections.Generic.IList{TVGL.Vertex},System.Double[],System.Boolean)">
            <summary>
                Returns the positions (array of 3D arrays) of the vertices as that they would be represented in
                the x-y plane (although the z-values will be non-zero). This does not destructively alter
                the vertices.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="direction">The direction.</param>
            <param name="mergeDuplicateReferences">The merge duplicate references.</param>
            <returns>Point2D[].</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.Get2DProjectionPoints(System.Collections.Generic.IList{TVGL.Vertex},System.Double[],System.Double)">
            <summary>
                Returns the positions (array of 3D arrays) of the vertices as that they would be represented in
                the x-y plane (although the z-values will be non-zero). This does not destructively alter
                the vertices.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="direction">The direction.</param>
            <param name="mergeDuplicateTolerance">The merge duplicate references.</param>
            <returns>Point2D[].</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.Get2DProjectionPoints(System.Collections.Generic.IList{TVGL.Vertex},System.Double[],System.Double[0:,0:]@,System.Boolean)">
            <summary>
                Returns the positions (array of 3D arrays) of the vertices as that they would be represented in
                the x-y plane (although the z-values will be non-zero). This does not destructively alter
                the vertices.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="direction">The direction.</param>
            <param name="backTransform">The back transform.</param>
            <param name="mergeDuplicateReferences">The merge duplicate references.</param>
            <returns>Point2D[].</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.Get2DProjectionPoints(System.Collections.Generic.IList{TVGL.Vertex},System.Double[0:,0:],System.Boolean,System.Double)">
            <summary>
                Get2s the d projection points.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="transform">The transform.</param>
            <param name="mergeDuplicateReferences">The merge duplicate references.</param>
            <param name="sameTolerance">The same tolerance.</param>
            <returns>Point[].</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.Get2DProjectionPoints(System.Collections.Generic.IList{System.Double[]},System.Double[])">
            <summary>
                Gets the 2D projectsion points of vertices
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="direction">The direction.</param>
            <returns>System.Double[][].</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.TransformToXYPlane(System.Collections.Generic.IList{System.Double})">
            <summary>
                Transforms to xy plane.
            </summary>
            <param name="direction">The direction.</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.TransformToXYPlane(System.Collections.Generic.IList{System.Double},System.Double[0:,0:]@)">
            <summary>
                Transforms to xy plane.
            </summary>
            <param name="direction">The direction.</param>
            <param name="backTransform">The back transform.</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.SmallerAngleBetweenEdges(TVGL.Edge,TVGL.Edge)">
            <summary>
                Smallers the angle between edges.
            </summary>
            <param name="edge1">The edge1.</param>
            <param name="edge2">The edge2.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.SmallerAngleBetweenEdges(TVGL.Point,TVGL.Point,TVGL.Point)">
            <summary>
                Smallers the angle between edges.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.SmallerAngleBetweenEdges(System.Double[],System.Double[])">
            <summary>
                Smallers the angle between edges.
            </summary>
            <param name="v0">The v0.</param>
            <param name="v1">The v1.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.ExteriorAngleBetweenEdgesInCCWList(TVGL.Edge,TVGL.Edge,System.Double[])">
            <summary>
                Angles the between edges cw.
            </summary>
            <param name="edge1">The edge1.</param>
            <param name="edge2">The edge2.</param>
            <param name="axis">The axis.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.InteriorAngleBetweenEdgesInCCWList(TVGL.Edge,TVGL.Edge,System.Double[])">
            <summary>
                Angles the between edges CCW.
            </summary>
            <param name="edge1">The edge1.</param>
            <param name="edge2">The edge2.</param>
            <param name="axis">The axis.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.ExteriorAngleBetweenEdgesInCCWList(System.Double[],System.Double[],System.Double[])">
            <summary>
                Angles the between edges cw.
            </summary>
            <param name="edge1">The edge1.</param>
            <param name="edge2">The edge2.</param>
            <param name="axis">The axis.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.InteriorAngleBetweenEdgesInCCWList(System.Double[],System.Double[],System.Double[])">
            <summary>
                Angles the between edges CCW.
            </summary>
            <param name="edge1">The edge1.</param>
            <param name="edge2">The edge2.</param>
            <param name="axis">The axis.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.ExteriorAngleBetweenEdgesInCCWList(TVGL.Point,TVGL.Point,TVGL.Point)">
            <summary>
                Angles the between edges cw.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.InteriorAngleBetweenEdgesInCCWList(TVGL.Point,TVGL.Point,TVGL.Point)">
            <summary>
                Angles the between edges CCW.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.ProjectedAngleBetweenVerticesCCW(TVGL.Vertex,TVGL.Vertex,TVGL.Vertex,System.Double[])">
            <summary>
                Projecteds the angle between vertices CCW.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="positiveNormal">The positive normal.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.ExteriorAngleBetweenEdgesInCCWList(System.Double[],System.Double[])">
            <summary>
                Angles the between edges cw.
            </summary>
            <param name="v0">The v0.</param>
            <param name="v1">The v1.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.InteriorAngleBetweenEdgesInCCWList(System.Double[],System.Double[])">
            <summary>
                Angles the between edges CCW.
            </summary>
            <param name="v0">The v0.</param>
            <param name="v1">The v1.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.LineLineIntersection(TVGL.Line,TVGL.Line,TVGL.Point@,System.Boolean)">
            <summary>
            Detemines if Two Lines intersect. Outputs intersection point if they do.
            If two lines are colinear, they are not considered intersecting.
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <param name="intersectionPoint"></param>
            <param name="considerCollinearOverlapAsIntersect"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.MiscFunctions.LineLineIntersection(TVGL.Point,TVGL.Point,TVGL.Point,TVGL.Point,TVGL.Point@,System.Boolean)">
            <summary>
            Detemines if Two Lines intersect. Outputs intersection point if they do.
            If two lines are colinear, they are not considered intersecting.
            </summary>
            <param name="intersectionPoint"></param>
            <param name="considerCollinearOverlapAsIntersect"></param>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="pt3"></param>
            /// <param name="pt4"></param>
            <source>
            http://www.codeproject.com/Tips/862988/Find-the-Intersection-Point-of-Two-Line-Segments
            </source>
            <returns></returns>
        </member>
        <member name="M:TVGL.MiscFunctions.PointCommonToThreePlanes(System.Double[],System.Double,System.Double[],System.Double,System.Double[],System.Double)">
            <summary>
                Find the point common to three planes.
            </summary>
            <param name="n1">The n1.</param>
            <param name="d1">The d1.</param>
            <param name="n2">The n2.</param>
            <param name="d2">The d2.</param>
            <param name="n3">The n3.</param>
            <param name="d3">The d3.</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.LineIntersectingTwoPlanes(System.Double[],System.Double,System.Double[],System.Double,System.Double[]@,System.Double[]@)">
            <summary>
                Lines the intersecting two planes.
            </summary>
            <param name="n1">The n1.</param>
            <param name="d1">The d1.</param>
            <param name="n2">The n2.</param>
            <param name="d2">The d2.</param>
            <param name="directionOfLine">The direction of line.</param>
            <param name="pointOnLine">The point on line.</param>
        </member>
        <member name="M:TVGL.MiscFunctions.LineIntersectingTwoPlanes(System.Double[],System.Double,System.Double[],System.Double,System.Double[],System.Double[]@)">
            <summary>
                Lines the intersecting two planes.
            </summary>
            <param name="n1">The n1.</param>
            <param name="d1">The d1.</param>
            <param name="n2">The n2.</param>
            <param name="d2">The d2.</param>
            <param name="directionOfLine">The direction of line.</param>
            <param name="pointOnLine">The point on line.</param>
        </member>
        <member name="M:TVGL.MiscFunctions.SkewedLineIntersection(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
                Skeweds the line intersection.
            </summary>
            <param name="p1">The p1.</param>
            <param name="n1">The n1.</param>
            <param name="p2">The p2.</param>
            <param name="n2">The n2.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.SkewedLineIntersection(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[]@)">
            <summary>
                Skeweds the line intersection.
            </summary>
            <param name="p1">The p1.</param>
            <param name="n1">The n1.</param>
            <param name="p2">The p2.</param>
            <param name="n2">The n2.</param>
            <param name="center">The center.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.SkewedLineIntersection(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[]@,System.Double[]@)">
            <summary>
                Skeweds the line intersection.
            </summary>
            <param name="p1">The p1.</param>
            <param name="n1">The n1.</param>
            <param name="p2">The p2.</param>
            <param name="n2">The n2.</param>
            <param name="interSect1">The inter sect1.</param>
            <param name="interSect2">The inter sect2.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.SkewedLineIntersection(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[]@,System.Double@,System.Double@)">
            <summary>
                Skeweds the line intersection.
            </summary>
            <param name="p1">The p1.</param>
            <param name="n1">The n1.</param>
            <param name="p2">The p2.</param>
            <param name="n2">The n2.</param>
            <param name="center">The center.</param>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.SkewedLineIntersection(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[]@,System.Double[]@,System.Double[]@,System.Double@,System.Double@)">
            <summary>
                Skeweds the line intersection.
            </summary>
            <param name="p1">The p1.</param>
            <param name="n1">The n1.</param>
            <param name="p2">The p2.</param>
            <param name="n2">The n2.</param>
            <param name="center">The center.</param>
            <param name="interSect1">The inter sect1.</param>
            <param name="interSect2">The inter sect2.</param>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.FindSolidIntersections(TVGL.TessellatedSolid,TVGL.TessellatedSolid,System.Collections.Generic.List{TVGL.Vertex}@,System.Collections.Generic.List{TVGL.Vertex}@,System.Collections.Generic.List{TVGL.Vertex}@,System.Collections.Generic.List{TVGL.Vertex}@,System.Boolean)">
            <summary>
                Returns lists of vertices that are inside vs. outside of each solid.
            </summary>
            <param name="solid1">The solid1.</param>
            <param name="solid2">The solid2.</param>
            <param name="verticesFromSolid1InsideSolid2">The vertices from solid1 inside solid2.</param>
            <param name="verticesFromSolid1OutsideSolid2">The vertices from solid1 outside solid2.</param>
            <param name="verticesFromSolid2InsideSolid1">The vertices from solid2 inside solid1.</param>
            <param name="verticesFromSolid2OutsideSolid1">The vertices from solid2 outside solid1.</param>
            <param name="onBoundaryIsInside">if set to <c>true</c> [on boundary is inside].</param>
        </member>
        <member name="M:TVGL.MiscFunctions.DistancePointToLine(System.Double[],System.Double[],System.Double[])">
            <summary>
                Returns the distance the point to line.
            </summary>
            <param name="qPoint">The q point that is off of the line.</param>
            <param name="lineRefPt">The line reference point on the line.</param>
            <param name="lineVector">The line direction vector.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.DistancePointToLine(System.Double[],System.Double[],System.Double[],System.Double[]@)">
            <summary>
                Distances the point to line.
            </summary>
            <param name="qPoint">q is the point that is off of the line.</param>
            <param name="lineRefPt">p is a reference point on the line.</param>
            <param name="lineVector">n is the vector of the line direction.</param>
            <param name="pointOnLine">The point on line closest to point, q.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.DistancePointToPoint(System.Double[],System.Double[])">
            <summary>
                Distances the point to point.
            </summary>
            <param name="p1">point, p1.</param>
            <param name="p2">point, p2.</param>
            <returns>the distance between the two 3D points.</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.DistancePointToPlane(System.Double[],System.Double[],System.Double[])">
            <summary>
                Returns the signed distance of the point to the plane.
            </summary>
            <param name="point">The point.</param>
            <param name="normalOfPlane">The normal of plane.</param>
            <param name="positionOnPlane">The position on plane.</param>
            <returns>the distance between the two 3D points.</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.DistancePointToPlane(System.Double[],System.Double[],System.Double)">
            <summary>
                Returns the signed distance of the point to the plane. If the point is "above" the plane, then a positive
                distance is return - if "below" then negative. This "above" means that the point is on the side of the
                plane that the normal points towards.
            </summary>
            <param name="point">The point.</param>
            <param name="normalOfPlane">The normal of plane.</param>
            <param name="signedDistanceToPlane">The signed distance to plane.</param>
            <returns>the distance between the two 3D points.</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.PointOnPlaneFromIntersectingLine(System.Double[],System.Double,TVGL.Vertex,TVGL.Vertex)">
            <summary>
                Finds the point on the plane made by a line (which is described by connecting point1 and point2) intersecting
                with that plane.
            </summary>
            <param name="normalOfPlane">The normal of plane.</param>
            <param name="distOfPlane">The dist of plane.</param>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <returns>Vertex.</returns>
            <exception cref="T:System.Exception">This should never occur. Prevent this from happening</exception>
        </member>
        <member name="M:TVGL.MiscFunctions.PointOnPlaneFromRay(System.Double[],System.Double,System.Double[],System.Double[])">
            <summary>
                Finds the point on the plane made by a ray. If that ray is not going to pass through the
                that plane, then null is returned.
            </summary>
            <param name="normalOfPlane">The normal of plane.</param>
            <param name="distOfPlane">The dist of plane.</param>
            <param name="rayPosition">The ray position.</param>
            <param name="rayDirection">The ray direction.</param>
            <returns>Vertex.</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.PointOnTriangleFromLine(TVGL.PolygonalFace,TVGL.Vertex,System.Double[],System.Double@,System.Boolean)">
            <summary>
                Finds the point on the triangle made by a line. If that line is not going to pass through the
                that triangle, then null is returned. The signed distance is positive if the vertex points to
                the triangle along the direction (ray). User can also specify whether the edges of the triangle
                are considered "inside."
            </summary>
            <param name="face">The face.</param>
            <param name="vertex">The vertex.</param>
            <param name="direction">The direction.</param>
            <param name="signedDistance">The signed distance.</param>
            <param name="onBoundaryIsInside">if set to <c>true</c> [on boundary is inside].</param>
            <returns>Vertex.</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.CreateCirclePath(TVGL.Point,System.Double,System.Double)">
            <summary>
            Returns a the path of a circle made up of points. Increment as needed.
            </summary>
            <param name="center"></param>
            <param name="radius"></param>
            <param name="radianIncrement"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.MiscFunctions.CreateCirclePath(TVGL.BoundingCircle,System.Double)">
            <summary>
            Returns a the path of a circle made up of points. Increment as needed.
            </summary>
            <param name="circle"></param>
            <param name="radianIncrement"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.MiscFunctions.IsPointInsideTriangle(TVGL.PolygonalFace,TVGL.Vertex,System.Boolean)">
            <summary>
                Returns whether a vertex lies on a triangle. User can specify whether the edges of the
                triangle are considered "inside."
            </summary>
            <param name="triangle">The triangle.</param>
            <param name="vertexInQuestion">The vertex in question.</param>
            <param name="onBoundaryIsInside">if set to <c>true</c> [on boundary is inside].</param>
            <returns><c>true</c> if [is point inside triangle] [the specified triangle]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.IsPointInsideTriangle(System.Collections.Generic.IList{TVGL.Vertex},TVGL.Vertex,System.Boolean)">
            <summary>
                Returns whether a vertex lies on a triangle. User can specify whether the edges of the
                triangle are considered "inside."
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="vertexInQuestion">The vertex in question.</param>
            <param name="onBoundaryIsInside">if set to <c>true</c> [on boundary is inside].</param>
            <returns><c>true</c> if [is point inside triangle] [the specified vertices]; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.Exception">Incorrect number of points in traingle</exception>
            <exception cref="T:System.ArgumentException"></exception>
            <references>
                http://www.blackpawn.com/texts/pointinpoly/
            </references>
        </member>
        <member name="M:TVGL.MiscFunctions.SameSide(System.Double[],System.Double[],System.Double[],System.Double[],System.Boolean)">
            <summary>
                Sames the side.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <param name="onBoundaryIsInside">if set to <c>true</c> [on boundary is inside].</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.IsVertexInsideSolid(TVGL.TessellatedSolid,TVGL.Vertex,System.Boolean)">
            <summary>
                Determines if a point is inside a tesselated solid (polyhedron).
                And the polygon is not self-intersecting
                http://www.cescg.org/CESCG-2012/papers/Horvat-Ray-casting_point-in-polyhedron_test.pdf
            </summary>
            <param name="ts">The ts.</param>
            <param name="vertexInQuestion">The vertex in question.</param>
            <param name="onBoundaryIsInside">if set to <c>true</c> [on boundary is inside].</param>
            <returns><c>true</c> if [is vertex inside solid] [the specified ts]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TVGL.MiscFunctions.IsPointInsidePolygon(TVGL.Polygon,TVGL.Point,TVGL.Line@,TVGL.Line@,System.Boolean@,System.Boolean)">
            <summary>
                Determines if a point is inside a polygon.
            </summary>
        </member>
        <member name="M:TVGL.MiscFunctions.NumberOfLinesAbovePoint(TVGL.Point,System.Collections.Generic.IEnumerable{TVGL.Line},TVGL.Line@,System.Boolean@)">
            <summary>
            Returns the number of lines above a point in question. Also returns the closest line above, if any is above.
            </summary>
            <param name="pointInQuestion"></param>
            <param name="lineList"></param>
            <param name="closestLineAbove"></param>
            <param name="isOnLine"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.MiscFunctions.NumberOfLinesBelowPoint(TVGL.Point,System.Collections.Generic.IEnumerable{TVGL.Line},TVGL.Line@,System.Boolean@)">
            <summary>
            Returns the number of lines below a point in question. Also returns the closest line below, if any is below.
            </summary>
            <param name="pointInQuestion"></param>
            <param name="lineList"></param>
            <param name="closestLineBelow"></param>
            <param name="isOnLine"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.MiscFunctions.IsPointInsidePolygon(System.Collections.Generic.List{TVGL.Point},TVGL.Point,System.Boolean)">
            <summary>
                Determines if a point is inside a polygon, where a polygon is an ordered list of 2D points.
                And the polygon is not self-intersecting
            </summary>
            <param name="points">The points.</param>
            <param name="pointInQuestion">The point in question.</param>
            <param name="onBoundaryIsInside">if set to <c>true</c> [on boundary is inside].</param>
            <returns><c>true</c> if [is point inside polygon] [the specified points]; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.Exception">Failed to return intercept information</exception>
        </member>
        <member name="T:TVGL.KnownColors">
            <summary>
                Enum KnownColors
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.UnknownColor">
            <summary>
                The unknown color
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Transparent">
            <summary>
                The transparent
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Black">
            <summary>
                The black
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Navy">
            <summary>
                The navy
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkBlue">
            <summary>
                The dark blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.MediumBlue">
            <summary>
                The medium blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Blue">
            <summary>
                The blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkGreen">
            <summary>
                The dark green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Green">
            <summary>
                The green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Teal">
            <summary>
                The teal
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkCyan">
            <summary>
                The dark cyan
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DeepSkyBlue">
            <summary>
                The deep sky blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkTurquoise">
            <summary>
                The dark turquoise
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.MediumSpringGreen">
            <summary>
                The medium spring green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Lime">
            <summary>
                The lime
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.SpringGreen">
            <summary>
                The spring green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Aqua">
            <summary>
                The aqua
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Cyan">
            <summary>
                The cyan
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.MidnightBlue">
            <summary>
                The midnight blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DodgerBlue">
            <summary>
                The dodger blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LightSeaGreen">
            <summary>
                The light sea green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.ForestGreen">
            <summary>
                The forest green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.SeaGreen">
            <summary>
                The sea green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkSlateGray">
            <summary>
                The dark slate gray
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LimeGreen">
            <summary>
                The lime green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.MediumSeaGreen">
            <summary>
                The medium sea green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Turquoise">
            <summary>
                The turquoise
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.RoyalBlue">
            <summary>
                The royal blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.SteelBlue">
            <summary>
                The steel blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkSlateBlue">
            <summary>
                The dark slate blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.MediumTurquoise">
            <summary>
                The medium turquoise
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Indigo">
            <summary>
                The indigo
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkOliveGreen">
            <summary>
                The dark olive green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.CadetBlue">
            <summary>
                The cadet blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.CornflowerBlue">
            <summary>
                The cornflower blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.MediumAquamarine">
            <summary>
                The medium aquamarine
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DimGray">
            <summary>
                The dim gray
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.SlateBlue">
            <summary>
                The slate blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.OliveDrab">
            <summary>
                The olive drab
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.SlateGray">
            <summary>
                The slate gray
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LightSlateGray">
            <summary>
                The light slate gray
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.MediumSlateBlue">
            <summary>
                The medium slate blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LawnGreen">
            <summary>
                The lawn green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Chartreuse">
            <summary>
                The chartreuse
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Aquamarine">
            <summary>
                The aquamarine
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Maroon">
            <summary>
                The maroon
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Purple">
            <summary>
                The purple
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Olive">
            <summary>
                The olive
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Gray">
            <summary>
                The gray
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.SkyBlue">
            <summary>
                The sky blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LightSkyBlue">
            <summary>
                The light sky blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.BlueViolet">
            <summary>
                The blue violet
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkRed">
            <summary>
                The dark red
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkMagenta">
            <summary>
                The dark magenta
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.SaddleBrown">
            <summary>
                The saddle brown
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkSeaGreen">
            <summary>
                The dark sea green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LightGreen">
            <summary>
                The light green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.MediumPurple">
            <summary>
                The medium purple
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkViolet">
            <summary>
                The dark violet
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.PaleGreen">
            <summary>
                The pale green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkOrchid">
            <summary>
                The dark orchid
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.YellowGreen">
            <summary>
                The yellow green
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Sienna">
            <summary>
                The sienna
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Brown">
            <summary>
                The brown
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkGray">
            <summary>
                The dark gray
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LightBlue">
            <summary>
                The light blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.GreenYellow">
            <summary>
                The green yellow
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.PaleTurquoise">
            <summary>
                The pale turquoise
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LightSteelBlue">
            <summary>
                The light steel blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.PowderBlue">
            <summary>
                The powder blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Firebrick">
            <summary>
                The firebrick
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkGoldenrod">
            <summary>
                The dark goldenrod
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.MediumOrchid">
            <summary>
                The medium orchid
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.RosyBrown">
            <summary>
                The rosy brown
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkKhaki">
            <summary>
                The dark khaki
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Silver">
            <summary>
                The silver
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.MediumVioletRed">
            <summary>
                The medium violet red
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.IndianRed">
            <summary>
                The indian red
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Peru">
            <summary>
                The peru
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Chocolate">
            <summary>
                The chocolate
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Tan">
            <summary>
                The tan
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LightGray">
            <summary>
                The light gray
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Thistle">
            <summary>
                The thistle
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Orchid">
            <summary>
                The orchid
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Goldenrod">
            <summary>
                The goldenrod
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.PaleVioletRed">
            <summary>
                The pale violet red
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Crimson">
            <summary>
                The crimson
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Gainsboro">
            <summary>
                The gainsboro
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Plum">
            <summary>
                The plum
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.BurlyWood">
            <summary>
                The burly wood
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LightCyan">
            <summary>
                The light cyan
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Lavender">
            <summary>
                The lavender
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkSalmon">
            <summary>
                The dark salmon
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Violet">
            <summary>
                The violet
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.PaleGoldenrod">
            <summary>
                The pale goldenrod
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LightCoral">
            <summary>
                The light coral
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Khaki">
            <summary>
                The khaki
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.AliceBlue">
            <summary>
                The alice blue
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Honeydew">
            <summary>
                The honeydew
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Azure">
            <summary>
                The azure
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.SandyBrown">
            <summary>
                The sandy brown
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Wheat">
            <summary>
                The wheat
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Beige">
            <summary>
                The beige
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.WhiteSmoke">
            <summary>
                The white smoke
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.MintCream">
            <summary>
                The mint cream
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.GhostWhite">
            <summary>
                The ghost white
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Salmon">
            <summary>
                The salmon
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.AntiqueWhite">
            <summary>
                The antique white
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Linen">
            <summary>
                The linen
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LightGoldenrodYellow">
            <summary>
                The light goldenrod yellow
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.OldLace">
            <summary>
                The old lace
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Red">
            <summary>
                The red
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Fuchsia">
            <summary>
                The fuchsia
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Magenta">
            <summary>
                The magenta
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DeepPink">
            <summary>
                The deep pink
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.OrangeRed">
            <summary>
                The orange red
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Tomato">
            <summary>
                The tomato
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.HotPink">
            <summary>
                The hot pink
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Coral">
            <summary>
                The coral
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.DarkOrange">
            <summary>
                The dark orange
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LightSalmon">
            <summary>
                The light salmon
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Orange">
            <summary>
                The orange
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LightPink">
            <summary>
                The light pink
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Pink">
            <summary>
                The pink
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Gold">
            <summary>
                The gold
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.PeachPuff">
            <summary>
                The peach puff
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.NavajoWhite">
            <summary>
                The navajo white
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Moccasin">
            <summary>
                The moccasin
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Bisque">
            <summary>
                The bisque
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.MistyRose">
            <summary>
                The misty rose
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.BlanchedAlmond">
            <summary>
                The blanched almond
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.PapayaWhip">
            <summary>
                The papaya whip
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LavenderBlush">
            <summary>
                The lavender blush
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.SeaShell">
            <summary>
                The sea shell
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Cornsilk">
            <summary>
                The cornsilk
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LemonChiffon">
            <summary>
                The lemon chiffon
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.FloralWhite">
            <summary>
                The floral white
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Snow">
            <summary>
                The snow
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Yellow">
            <summary>
                The yellow
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.LightYellow">
            <summary>
                The light yellow
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.Ivory">
            <summary>
                The ivory
            </summary>
        </member>
        <member name="F:TVGL.KnownColors.White">
            <summary>
                The white
            </summary>
        </member>
        <member name="T:TVGL.Color">
            <summary>
                Struct Color
            </summary>
        </member>
        <member name="M:TVGL.Color.Convert(System.Byte)">
            <summary>
                Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Single.</returns>
        </member>
        <member name="M:TVGL.Color.Convert(System.Single)">
            <summary>
                Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Byte.</returns>
        </member>
        <member name="M:TVGL.Color.Equals(System.Object)">
            <summary>
                Checks if color is equal to another color
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TVGL.Color.#ctor(TVGL.KnownColors)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Color" /> struct.
            </summary>
            <param name="knownColor">Color of the known.</param>
        </member>
        <member name="M:TVGL.Color.#ctor(TVGL.IOFunctions.amfclasses.AMF_Color)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Color" /> class.
            </summary>
            <param name="amfColor">Color of the amf.</param>
        </member>
        <member name="M:TVGL.Color.#ctor(System.UInt32)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Color" /> struct.
            </summary>
            <param name="argb">The ARGB.</param>
        </member>
        <member name="M:TVGL.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Color" /> struct.
            </summary>
            <param name="a">a.</param>
            <param name="r">The r.</param>
            <param name="g">The g.</param>
            <param name="b">The b.</param>
        </member>
        <member name="M:TVGL.Color.#ctor(System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Color" /> struct.
            </summary>
            <param name="r">The r.</param>
            <param name="g">The g.</param>
            <param name="b">The b.</param>
        </member>
        <member name="M:TVGL.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.Color"/> struct.
            </summary>
            <param name="a">a.</param>
            <param name="r">The r.</param>
            <param name="g">The g.</param>
            <param name="b">The b.</param>
        </member>
        <member name="M:TVGL.Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Color" /> struct.
            </summary>
            <param name="r">The r.</param>
            <param name="g">The g.</param>
            <param name="b">The b.</param>
        </member>
        <member name="M:TVGL.Color.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.Color"/> class.
            </summary>
            <param name="colorString">The color string.</param>
        </member>
        <member name="M:TVGL.Color.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="F:TVGL.Color.A">
            <summary>
                A
            </summary>
        </member>
        <member name="F:TVGL.Color.B">
            <summary>
                A
            </summary>
        </member>
        <member name="F:TVGL.Color.R">
            <summary>
                A
            </summary>
        </member>
        <member name="F:TVGL.Color.G">
            <summary>
                A
            </summary>
        </member>
        <member name="P:TVGL.Color.Af">
            <summary>
                Gets or sets the af.
            </summary>
            <value>
                The Alpha channel as a float whose range is [0..1].
                the value is allowed to be out of range
            </value>
        </member>
        <member name="P:TVGL.Color.Rf">
            <summary>
                Gets or sets the rf.
            </summary>
            <value>The rf.</value>
        </member>
        <member name="P:TVGL.Color.Gf">
            <summary>
                Gets or sets the gf.
            </summary>
            <value>The gf.</value>
        </member>
        <member name="P:TVGL.Color.Bf">
            <summary>
                Gets or sets the bf.
            </summary>
            <value>The bf.</value>
        </member>
        <member name="T:TVGL.Constants">
            <summary>
                Class Constants.
            </summary>
        </member>
        <member name="F:TVGL.Constants.VertexCheckSumMultiplier">
            <summary>
            VertexCheckSumMultiplier is the checksum multiplier to be used for face and edge references.
            Since the edges connect two vertices the maximum value this can be is
            the square root of the max. value of a long (see above). However, during
            debugging, it is nice to see the digits of the vertex indices embedded in 
            check, so when debugging, this is reducing to 1 billion instead of 3 billion.
            This way if you are connecting vertex 1234 with 5678, you will get a checksum = 5678000001234
            </summary>
        </member>
        <member name="F:TVGL.Constants.ConvexHullRadiusForRobustness">
            <summary>
                The convex hull radius for robustness. This is only used when ConvexHull fails on the model.
            </summary>
        </member>
        <member name="F:TVGL.Constants.DefaultColor">
            <summary>
                The default color
            </summary>
        </member>
        <member name="F:TVGL.Constants.BaseTolerance">
            <summary>
                The error ratio used as a base for determining a good tolerance within a given tessellated solid.
            </summary>
        </member>
        <member name="F:TVGL.Constants.OBBAngleTolerance">
            <summary>
                The angle tolerance used in the Oriented Bounding Box calculations
            </summary>
        </member>
        <member name="F:TVGL.Constants.ErrorForFaceInSurface">
            <summary>
                The error for face in surface
            </summary>
        </member>
        <member name="F:TVGL.Constants.SameFaceNormalDotTolerance">
            <summary>
                The tolerance for the same normal of a face when two are dot-producted.
            </summary>
        </member>
        <member name="F:TVGL.Constants.MaxAllowableEdgeSimilarityScore">
            <summary>
            The maximum allowable edge similarity score. This is used when trying to match stray edges when loading in 
            a tessellated model.
            </summary>
        </member>
        <member name="M:TVGL.Constants.FindIndex``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
                Finds the index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="predicate">The predicate.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TVGL.Constants.FindIndex``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Finds the index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="predicate">The predicate.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:TVGL.UnitType">
            <summary>
            Units of a specified coordinates within the shape or set of shapes.
            </summary>
        </member>
        <member name="F:TVGL.UnitType.unspecified">
            <summary>
            the unspecified state
            </summary>
        </member>
        <member name="F:TVGL.UnitType.millimeter">
            <summary>
                The millimeter
            </summary>
        </member>
        <member name="F:TVGL.UnitType.micron">
            <summary>
                The micron
            </summary>
        </member>
        <member name="F:TVGL.UnitType.centimeter">
            <summary>
                The centimeter
            </summary>
        </member>
        <member name="F:TVGL.UnitType.inch">
            <summary>
                The inch
            </summary>
        </member>
        <member name="F:TVGL.UnitType.foot">
            <summary>
                The foot
            </summary>
        </member>
        <member name="F:TVGL.UnitType.meter">
            <summary>
                The meter
            </summary>
        </member>
        <member name="T:TVGL.CurvatureType">
            <summary>
                Enum CurvatureType
            </summary>
        </member>
        <member name="F:TVGL.CurvatureType.Concave">
            <summary>
                The concave
            </summary>
        </member>
        <member name="F:TVGL.CurvatureType.SaddleOrFlat">
            <summary>
                The saddle or flat
            </summary>
        </member>
        <member name="F:TVGL.CurvatureType.Convex">
            <summary>
                The convex
            </summary>
        </member>
        <member name="F:TVGL.CurvatureType.Undefined">
            <summary>
                The undefined
            </summary>
        </member>
        <member name="T:TVGL.FileType">
            <summary>
                Enum FileType
            </summary>
        </member>
        <member name="F:TVGL.FileType.unspecified">
            <summary>
            represents an unspecified state
            </summary>
        </member>
        <member name="F:TVGL.FileType.STL_ASCII">
            <summary>
                Stereolithography (STL) American Standard Code for Information Interchange (ASCII)
            </summary>
        </member>
        <member name="F:TVGL.FileType.STL_Binary">
            <summary>
                Stereolithography (STL) Binary
            </summary>
        </member>
        <member name="F:TVGL.FileType.ThreeMF">
            <summary>
                Mobile MultiModal Framework
            </summary>
        </member>
        <member name="F:TVGL.FileType.Model3MF">
            <summary>
                Mobile MultiModal Framework
            </summary>
        </member>
        <member name="F:TVGL.FileType.AMF">
            <summary>
                Additive Manufacturing File Format
            </summary>
        </member>
        <member name="F:TVGL.FileType.OFF">
            <summary>
                Object File Format
            </summary>
        </member>
        <member name="F:TVGL.FileType.PLY_ASCII">
            <summary>
                Polygon File Format as ASCII
            </summary>
        </member>
        <member name="F:TVGL.FileType.PLY_Binary">
            <summary>
                Polygon File Format as Binary
            </summary>
        </member>
        <member name="T:TVGL.ShapeElement">
            <summary>
                Enum ShapeElement
            </summary>
        </member>
        <member name="F:TVGL.ShapeElement.Vertex">
            <summary>
                The vertex
            </summary>
        </member>
        <member name="T:TVGL.ColorElements">
            <summary>
                Enum ColorElements
            </summary>
        </member>
        <member name="T:TVGL.NoEqualSort">
            <summary>
                A comparer for optimization that can be used for either
                minimization or maximization.
            </summary>
        </member>
        <member name="M:TVGL.NoEqualSort.Compare(System.Double,System.Double)">
            <summary>
                Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
                A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as
                shown in the following table.Value Meaning Less than zero<paramref name="x" /> is less than <paramref name="y" />
                .Zero<paramref name="x" /> equals <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than
                <paramref name="y" />.
            </returns>
        </member>
        <member name="T:TVGL.DenseRegion">
            <summary>
                Class DenseRegion.
            </summary>
        </member>
        <member name="M:TVGL.DenseRegion.#ctor(System.Collections.Generic.List{TVGL.PolygonalFace})">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.DenseRegion" /> class.
            </summary>
            <param name="faces">The faces.</param>
        </member>
        <member name="M:TVGL.DenseRegion.IsNewMemberOf(TVGL.PolygonalFace)">
            <summary>
                Determines whether [is new member of] [the specified face].
            </summary>
            <param name="face">The face.</param>
            <returns><c>true</c> if [is new member of] [the specified face]; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TVGL.DenseRegion.Transform(System.Double[0:,0:])">
            <summary>
            Transforms the shape by the provided transformation matrix.
            </summary>
            <param name="transformMatrix">The transform matrix.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TVGL.DenseRegion.UpdateWith(TVGL.PolygonalFace)">
            <summary>
                Updates the with.
            </summary>
            <param name="face">The face.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:TVGL.Cone">
            <summary>
                The class for Cone primitives.
            </summary>
        </member>
        <member name="F:TVGL.Cone.IsPositive">
            <summary>
                Is the cone positive? (false is negative)
            </summary>
        </member>
        <member name="M:TVGL.Cone.#ctor(System.Collections.Generic.List{TVGL.PolygonalFace},System.Double[],System.Double)">
            <summary>
                Cone
            </summary>
            <param name="facesAll">The faces all.</param>
            <param name="axis">The axis.</param>
            <param name="aperture">The aperture.</param>
        </member>
        <member name="P:TVGL.Cone.Aperture">
            <summary>
                Gets the aperture.
            </summary>
            <value>The aperture.</value>
        </member>
        <member name="P:TVGL.Cone.Apex">
            <summary>
                Gets the apex.
            </summary>
            <value>The apex.</value>
        </member>
        <member name="P:TVGL.Cone.Axis">
            <summary>
                Gets the axis.
            </summary>
            <value>The axis.</value>
        </member>
        <member name="M:TVGL.Cone.IsNewMemberOf(TVGL.PolygonalFace)">
            <summary>
                Checks if face should be added to cone
            </summary>
            <param name="face">The face.</param>
            <returns><c>true</c> if [is new member of] [the specified face]; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TVGL.Cone.Transform(System.Double[0:,0:])">
            <summary>
            Transforms the shape by the provided transformation matrix.
            </summary>
            <param name="transformMatrix">The transform matrix.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TVGL.Cone.UpdateWith(TVGL.PolygonalFace)">
            <summary>
                Updates cone with face
            </summary>
            <param name="face">The face.</param>
        </member>
        <member name="T:TVGL.Cylinder">
            <summary>
                The class for Cylinder primitives.
            </summary>
        </member>
        <member name="M:TVGL.Cylinder.IsNewMemberOf(TVGL.PolygonalFace)">
            <summary>
                Determines whether [is new member of] [the specified face].
            </summary>
            <param name="face">The face.</param>
            <returns><c>true</c> if [is new member of] [the specified face]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TVGL.Cylinder.UpdateWith(TVGL.PolygonalFace)">
            <summary>
                Updates the with.
            </summary>
            <param name="face">The face.</param>
        </member>
        <member name="M:TVGL.Cylinder.Transform(System.Double[0:,0:])">
            <summary>
            Transforms the shape by the provided transformation matrix.
            </summary>
            <param name="transformMatrix">The transform matrix.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="F:TVGL.Cylinder.IsPositive">
            <summary>
                Is the cylinder positive? (false is negative)
            </summary>
        </member>
        <member name="P:TVGL.Cylinder.Anchor">
            <summary>
                Gets the anchor.
            </summary>
            <value>The anchor.</value>
        </member>
        <member name="P:TVGL.Cylinder.Axis">
            <summary>
                Gets the direction.
            </summary>
            <value>The direction.</value>
        </member>
        <member name="P:TVGL.Cylinder.Radius">
            <summary>
                Gets the radius.
            </summary>
            <value>The radius.</value>
        </member>
        <member name="M:TVGL.Cylinder.#ctor(System.Collections.Generic.IEnumerable{TVGL.PolygonalFace},System.Double[])">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Cylinder" /> class.
            </summary>
            <param name="facesAll">The faces all.</param>
            <param name="axis">The axis.</param>
        </member>
        <member name="M:TVGL.Cylinder.#ctor(TVGL.Edge)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Cylinder" /> class.
            </summary>
            <param name="edge">The edge.</param>
            <exception cref="T:System.Exception">Edge used to define cylinder is flat.</exception>
        </member>
        <member name="T:TVGL.Flat">
            <summary>
                Class Flat.
            </summary>
        </member>
        <member name="P:TVGL.Flat.DistanceToOrigin">
            <summary>
                Gets or sets the anchor.
            </summary>
            <value>The anchor.</value>
        </member>
        <member name="P:TVGL.Flat.Normal">
            <summary>
                Gets or sets the normal.
            </summary>
            <value>The normal.</value>
        </member>
        <member name="P:TVGL.Flat.Tolerance">
            <summary>
                Tolerance used to determine whether faces shoud be part of this flat
            </summary>
        </member>
        <member name="M:TVGL.Flat.IsNewMemberOf(TVGL.PolygonalFace)">
            <summary>
                Determines whether [is new member of] [the specified face].
            </summary>
            <param name="face">The face.</param>
            <returns><c>true</c> if [is new member of] [the specified face]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TVGL.Flat.UpdateWith(TVGL.PolygonalFace)">
            <summary>
                Updates the with.
            </summary>
            <param name="face">The face.</param>
        </member>
        <member name="M:TVGL.Flat.Transform(System.Double[0:,0:])">
            <summary>
            Transforms the shape by the provided transformation matrix.
            </summary>
            <param name="transformMatrix">The transform matrix.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TVGL.Flat.#ctor(System.Collections.Generic.IEnumerable{TVGL.PolygonalFace})">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Flat" /> class.
            </summary>
            <param name="faces"></param>
        </member>
        <member name="M:TVGL.Flat.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Flat" /> class.
            </summary>
        </member>
        <member name="M:TVGL.Flat.#ctor(System.Double,System.Double[])">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Flat" /> class.
            </summary>
            <param name="distanceToOrigin">The distance to origin.</param>
            <param name="normal">The normal.</param>
        </member>
        <member name="M:TVGL.Flat.#ctor(System.Double[],System.Double[])">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Flat" /> class.
            </summary>
            <param name="pointOnPlane">a point on plane.</param>
            <param name="normal">The normal.</param>
        </member>
        <member name="T:TVGL.Sphere">
            <summary>
                Class Sphere.
            </summary>
        </member>
        <member name="M:TVGL.Sphere.IsNewMemberOf(TVGL.PolygonalFace)">
            <summary>
                Checks if the face is a member of the sphere
            </summary>
            <param name="face">The face.</param>
            <returns>Boolean.</returns>
        </member>
        <member name="M:TVGL.Sphere.UpdateWith(TVGL.PolygonalFace)">
            <summary>
                Adds face to sphere
            </summary>
            <param name="face">The face.</param>
        </member>
        <member name="M:TVGL.Sphere.Transform(System.Double[0:,0:])">
            <summary>
            Transforms the shape by the provided transformation matrix.
            </summary>
            <param name="transformMatrix">The transform matrix.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TVGL.Sphere.#ctor(System.Collections.Generic.IEnumerable{TVGL.PolygonalFace})">
            <summary>
                Primitive Sphere
            </summary>
            <param name="facesAll">The faces all.</param>
        </member>
        <member name="M:TVGL.Sphere.#ctor(TVGL.Edge)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Sphere" /> class.
            </summary>
            <param name="edge">The edge.</param>
        </member>
        <member name="F:TVGL.Sphere.IsPositive">
            <summary>
                Is the sphere positive? (false is negative)
            </summary>
        </member>
        <member name="P:TVGL.Sphere.Center">
            <summary>
                Gets the center.
            </summary>
            <value>The center.</value>
        </member>
        <member name="P:TVGL.Sphere.Radius">
            <summary>
                Gets the radius.
            </summary>
            <value>The radius.</value>
        </member>
        <member name="T:TVGL.PrimitiveSurface">
            <summary>
                Class PrimitiveSurface.
            </summary>
        </member>
        <member name="M:TVGL.PrimitiveSurface.#ctor(System.Collections.Generic.IEnumerable{TVGL.PolygonalFace})">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.PrimitiveSurface" /> class.
            </summary>
            <param name="faces">The faces.</param>
        </member>
        <member name="M:TVGL.PrimitiveSurface.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.PrimitiveSurface" /> class.
            </summary>
        </member>
        <member name="P:TVGL.PrimitiveSurface.Type">
            <summary>
                Gets the Type of primitive surface
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:TVGL.PrimitiveSurface.Area">
            <summary>
                Gets the area.
            </summary>
            <value>The area.</value>
        </member>
        <member name="P:TVGL.PrimitiveSurface.Faces">
            <summary>
                Gets or sets the polygonal faces.
            </summary>
            <value>The polygonal faces.</value>
        </member>
        <member name="P:TVGL.PrimitiveSurface.InnerEdges">
            <summary>
                Gets the inner edges.
            </summary>
            <value>The inner edges.</value>
        </member>
        <member name="P:TVGL.PrimitiveSurface.OuterEdges">
            <summary>
                Gets the outer edges.
            </summary>
            <value>The outer edges.</value>
        </member>
        <member name="P:TVGL.PrimitiveSurface.Vertices">
            <summary>
                Gets the vertices.
            </summary>
            <value>The vertices.</value>
        </member>
        <member name="M:TVGL.PrimitiveSurface.Transform(System.Double[0:,0:])">
            <summary>
            Transforms the shape by the provided transformation matrix.
            </summary>
            <param name="transformMatrix">The transform matrix.</param>
        </member>
        <member name="M:TVGL.PrimitiveSurface.IsNewMemberOf(TVGL.PolygonalFace)">
            <summary>
                Checks if face should be a member of this surface
            </summary>
            <param name="face">The face.</param>
            <returns><c>true</c> if [is new member of] [the specified face]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TVGL.PrimitiveSurface.UpdateWith(TVGL.PolygonalFace)">
            <summary>
                Updates surface by adding face
            </summary>
            <param name="face">The face.</param>
        </member>
        <member name="T:TVGL.Primitive_Classification">
            <summary>
                Class Primitive_Classification.
            </summary>
            <summary>
                Class Primitive_Classification.
            </summary>
            <summary>
                Class Primitive_Classification.
            </summary>
            <summary>
            Class Primitive_Classification.
            </summary>
        </member>
        <member name="T:TVGL.Primitive_Classification.ClassificationConstants">
            <summary>
                Class ClassificationConstants.
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.ClassificationConstants.Classifier_MinAreaForStartFace">
            <summary>
                The classifier_ minimum area for start face
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.ClassificationConstants.AbnLe1">
            <summary>
                The abn le1
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.ClassificationConstants.AbnLe2">
            <summary>
                The abn le2
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.ClassificationConstants.AbnMs1">
            <summary>
                The abn MS1
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.ClassificationConstants.AbnMs2">
            <summary>
                The abn MS2
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.ClassificationConstants.AbnMe1">
            <summary>
                The abn me1
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.ClassificationConstants.AbnMe2">
            <summary>
                The abn me2
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.ClassificationConstants.AbnHs1">
            <summary>
                The abn HS1
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.ClassificationConstants.AbnHs2">
            <summary>
                The abn HS2
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.ClassificationConstants.McmLe1">
            <summary>
                The MCM le1
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.ClassificationConstants.McmLe2">
            <summary>
                The MCM le2
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.ClassificationConstants.McmMs1">
            <summary>
                The MCM MS1
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.ClassificationConstants.McmMs2">
            <summary>
                The MCM MS2
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.ClassificationConstants.McmMe1">
            <summary>
                The MCM me1
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.ClassificationConstants.McmMe2">
            <summary>
                The MCM me2
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.ClassificationConstants.McmHs1">
            <summary>
                The MCM HS1
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.ClassificationConstants.McmHs2">
            <summary>
                The MCM HS2
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.ClassificationConstants.SmLe1">
            <summary>
                The sm le1
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.ClassificationConstants.SmLe2">
            <summary>
                The sm le2
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.ClassificationConstants.SmMs1">
            <summary>
                The sm MS1
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.ClassificationConstants.SmMs2">
            <summary>
                The sm MS2
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.ClassificationConstants.SmMe1">
            <summary>
                The sm me1
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.ClassificationConstants.SmMe2">
            <summary>
                The sm me2
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.ClassificationConstants.SmHs1">
            <summary>
                The sm HS1
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.ClassificationConstants.SmHs2">
            <summary>
                The sm HS2
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.ClassificationConstants.MinConeGaussPlaneOffset">
            <summary>
                The minimum cone gauss plane offset
            </summary>
        </member>
        <member name="M:TVGL.Primitive_Classification.ClassificationConstants.MakingListOfLimABNbeta2">
            <summary>
                Makings the list of lim ab nbeta2.
            </summary>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:TVGL.Primitive_Classification.ClassificationConstants.MakingListOfLimMCMbeta2">
            <summary>
                Makings the list of lim mc mbeta2.
            </summary>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:TVGL.Primitive_Classification.ClassificationConstants.MakingListOfLimSMbeta2">
            <summary>
                Makings the list of lim s mbeta2.
            </summary>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:TVGL.Primitive_Classification.ClassificationConstants.readingEdgesRules2">
            <summary>
                Readings the edges rules2.
            </summary>
            <returns>System.Int32[].</returns>
        </member>
        <member name="M:TVGL.Primitive_Classification.ClassificationConstants.readingFacesRules">
            <summary>
                Readings the faces rules.
            </summary>
            <returns>System.Int32[].</returns>
        </member>
        <member name="M:TVGL.Primitive_Classification.ClassificationConstants.getStreamReader(System.String)">
            <summary>
                Gets the stream reader.
            </summary>
            <param name="filepath">The filepath.</param>
            <returns>StreamReader.</returns>
        </member>
        <member name="M:TVGL.Primitive_Classification.ClassificationConstants.ReadIntMatrix(System.IO.Stream,System.Int32)">
            <summary>
                Reads the int matrix.
            </summary>
            <param name="stream">The stream.</param>
            <param name="numColumns">The number columns.</param>
            <returns>System.Int32[].</returns>
        </member>
        <member name="T:TVGL.Primitive_Classification.FaceWithScores">
            <summary>
                Class FaceWithScores.
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.FaceWithScores.Face">
            <summary>
                The face
            </summary>
        </member>
        <member name="M:TVGL.Primitive_Classification.FaceWithScores.#ctor(TVGL.PolygonalFace)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Primitive_Classification.FaceWithScores" /> class.
            </summary>
            <param name="face">The face.</param>
        </member>
        <member name="P:TVGL.Primitive_Classification.FaceWithScores.AreaRatio">
            <summary>
                gets the Area * edge ratio of the face. Edge ratio is the the length of longest
                edge to the length of the shortest edge
            </summary>
            <value>AreaRatio</value>
        </member>
        <member name="P:TVGL.Primitive_Classification.FaceWithScores.FaceCat">
            <summary>
                Dictionary with possible face category obtained from different
                combinatons  of its edges' groups
            </summary>
            <value>Face Category</value>
        </member>
        <member name="P:TVGL.Primitive_Classification.FaceWithScores.CatToCom">
            <summary>
                Dictionary with faceCat on its key and the combinaton which makes the category on its value
            </summary>
            <value>Category to combination</value>
        </member>
        <member name="P:TVGL.Primitive_Classification.FaceWithScores.ComToEdge">
            <summary>
                Dictionary with edge combinations on key and edges obtained from face rules on its value
            </summary>
            <value>Combination to Edges</value>
        </member>
        <member name="P:TVGL.Primitive_Classification.FaceWithScores.CatToELDC">
            <summary>
                Dictionary with faceCat on key and edges lead to the category on its value
            </summary>
            <value>Edges lead to desired category</value>
        </member>
        <member name="T:TVGL.Primitive_Classification.EdgeWithScores">
            <summary>
                Class EdgeWithScores.
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.EdgeWithScores.Edge">
            <summary>
                The edge
            </summary>
        </member>
        <member name="M:TVGL.Primitive_Classification.EdgeWithScores.#ctor(TVGL.Edge)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Primitive_Classification.EdgeWithScores" /> class.
            </summary>
            <param name="edge">The edge.</param>
        </member>
        <member name="P:TVGL.Primitive_Classification.EdgeWithScores.CatProb">
            <summary>
                A dictionary with 5 groups of Flat, Cylinder, Sphere, Flat to Curve and Sharp Edge and their
                probabilities.
            </summary>
            <value>Group Probability</value>
        </member>
        <member name="T:TVGL.Primitive_Classification.PlanningSurface">
            <summary>
                Class PlanningSurface.
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.PlanningSurface.Faces">
            <summary>
                The faces
            </summary>
        </member>
        <member name="M:TVGL.Primitive_Classification.PlanningSurface.#ctor(TVGL.PrimitiveSurfaceType,TVGL.Primitive_Classification.FaceWithScores[])">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Primitive_Classification.PlanningSurface" /> class.
            </summary>
            <param name="SurfaceType">Type of the surface.</param>
            <param name="Faces">The faces.</param>
        </member>
        <member name="P:TVGL.Primitive_Classification.PlanningSurface.SurfaceType">
            <summary>
                Gets the type of the surface.
            </summary>
            <value>The type of the surface.</value>
        </member>
        <member name="P:TVGL.Primitive_Classification.PlanningSurface.Area">
            <summary>
                Gets or sets the area.
            </summary>
            <value>The area.</value>
        </member>
        <member name="P:TVGL.Primitive_Classification.PlanningSurface.NegativeProbability">
            <summary>
                Gets or sets the negative probability.
            </summary>
            <value>The negative probability.</value>
        </member>
        <member name="P:TVGL.Primitive_Classification.PlanningSurface.Metric">
            <summary>
                Gets the metric.
            </summary>
            <value>The metric.</value>
        </member>
        <member name="M:TVGL.Primitive_Classification.PlanningSurface.Add(TVGL.Primitive_Classification.FaceWithScores)">
            <summary>
                Adds the specified f.
            </summary>
            <param name="f">The f.</param>
        </member>
        <member name="M:TVGL.Primitive_Classification.PlanningSurface.Remove(TVGL.Primitive_Classification.FaceWithScores)">
            <summary>
                Removes the specified f.
            </summary>
            <param name="f">The f.</param>
        </member>
        <member name="F:TVGL.Primitive_Classification.listOfLimitsABN">
            <summary>
            The list of limits abn
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.listOfLimitsMCM">
            <summary>
            The list of limits abn
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.listOfLimitsSM">
            <summary>
            The list of limits abn
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.edgeRules">
            <summary>
            The edge rules
            </summary>
        </member>
        <member name="F:TVGL.Primitive_Classification.faceRules">
            <summary>
            The edge rules
            </summary>
        </member>
        <member name="M:TVGL.Primitive_Classification.InitializeFuzzinessRules">
            <summary>
            Initializes the fuzziness rules.
            </summary>
        </member>
        <member name="M:TVGL.Primitive_Classification.Run(TVGL.TessellatedSolid)">
            <summary>
            Runs the specified tessellated solid through the primitive classification method.
            </summary>
            <param name="ts">The ts.</param>
            <returns>List&lt;PrimitiveSurface&gt;.</returns>
        </member>
        <member name="M:TVGL.Primitive_Classification.MinorCorrections(System.Collections.Generic.List{TVGL.PrimitiveSurface},System.Collections.Generic.List{TVGL.Primitive_Classification.EdgeWithScores})">
            <summary>
            Minors the corrections.
            </summary>
            <param name="primitives">The primitives.</param>
            <param name="allEdgeWithScores">All edge with scores.</param>
            <returns>List&lt;PrimitiveSurface&gt;.</returns>
        </member>
        <member name="M:TVGL.Primitive_Classification.FilterOutBadFaces(System.Collections.Generic.HashSet{TVGL.Primitive_Classification.EdgeWithScores},System.Collections.Generic.HashSet{TVGL.Primitive_Classification.FaceWithScores},System.Collections.Generic.HashSet{TVGL.Primitive_Classification.EdgeWithScores},System.Collections.Generic.HashSet{TVGL.Primitive_Classification.FaceWithScores})">
            <summary>
            Filters the out bad faces.
            </summary>
            <param name="unassignedEdges">The unassigned edges.</param>
            <param name="unassignedFaces">The unassigned faces.</param>
            <param name="filteredOutEdges">The filtered out edges.</param>
            <param name="filteredOutFaces">The filtered out faces.</param>
        </member>
        <member name="M:TVGL.Primitive_Classification.EdgesLeadToDesiredFaceCatFinder(TVGL.Primitive_Classification.FaceWithScores,TVGL.PrimitiveSurfaceType,System.Int32[0:,0:])">
            <summary>
            Edgeses the lead to desired face cat finder.
            </summary>
            <param name="face">The face.</param>
            <param name="p">The p.</param>
            <param name="faceRules">The face rules.</param>
        </member>
        <member name="M:TVGL.Primitive_Classification.EdgeFuzzyClassification(TVGL.Primitive_Classification.EdgeWithScores)">
            <summary>
            Edges the fuzzy classification.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="M:TVGL.Primitive_Classification.AbnCalculator(TVGL.Primitive_Classification.EdgeWithScores)">
            <summary>
            Abns the calculator.
            </summary>
            <param name="eachEdge">The each edge.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TVGL.Primitive_Classification.McmCalculator(TVGL.Primitive_Classification.EdgeWithScores)">
            <summary>
            MCMs the calculator.
            </summary>
            <param name="eachEdge">The each edge.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TVGL.Primitive_Classification.SmCalculator(TVGL.Primitive_Classification.EdgeWithScores)">
            <summary>
            Sms the calculator.
            </summary>
            <param name="eachEdge">The each edge.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TVGL.Primitive_Classification.AddMissingEdgeLength(System.Collections.Generic.List{TVGL.Edge})">
            <summary>
            Adds the length of the missing edge.
            </summary>
            <param name="edges">The edges.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TVGL.Primitive_Classification.EdgeClassifier2(System.Double[],System.Double[],System.Double[],System.Int32[0:,0:],System.Double@)">
            <summary>
            Edges the classifier2.
            </summary>
            <param name="ABNProbs">The abn probs.</param>
            <param name="MCMProbs">The MCM probs.</param>
            <param name="SMProbs">The sm probs.</param>
            <param name="rulesArray">The rules array.</param>
            <param name="prob">The prob.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TVGL.Primitive_Classification.CatAndProbFinder(System.Double,System.Double[])">
            <summary>
            Cats the and prob finder.
            </summary>
            <param name="metric">The metric.</param>
            <param name="listOfLimits">The list of limits.</param>
            <returns>List&lt;System.Double[]&gt;.</returns>
        </member>
        <member name="M:TVGL.Primitive_Classification.CatAndProbForCases2and4(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Cats the and prob for cases2and4.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="metric">The metric.</param>
            <param name="Case">The case.</param>
            <returns>List&lt;System.Double[]&gt;.</returns>
        </member>
        <member name="M:TVGL.Primitive_Classification.FaceFuzzyClassification(TVGL.Primitive_Classification.FaceWithScores,System.Collections.Generic.List{TVGL.Primitive_Classification.EdgeWithScores})">
            <summary>
            Faces the fuzzy classification.
            </summary>
            <param name="eachFace">The each face.</param>
            <param name="allEdgeWithScores">All edge with scores.</param>
        </member>
        <member name="M:TVGL.Primitive_Classification.FaceClassifier(System.Int32[],System.Int32[0:,0:])">
            <summary>
            Faces the classifier.
            </summary>
            <param name="bestCombination">The best combination.</param>
            <param name="faceRules">The face rules.</param>
            <returns>PrimitiveSurfaceType.</returns>
        </member>
        <member name="M:TVGL.Primitive_Classification.sortingComToEdgeDic(System.Collections.Generic.Dictionary{System.Int32[],TVGL.Edge[]})">
            <summary>
            Sortings the COM to edge dic.
            </summary>
            <param name="d">The d.</param>
            <returns>Dictionary&lt;System.Int32[], Edge[]&gt;.</returns>
        </member>
        <member name="M:TVGL.Primitive_Classification.groupFacesIntoPlanningSurfaces(TVGL.Primitive_Classification.FaceWithScores,System.Collections.Generic.List{TVGL.Primitive_Classification.FaceWithScores})">
            <summary>
            Groups the faces into planning surfaces.
            </summary>
            <param name="seedFace">The seed face.</param>
            <param name="allFacesWithScores">All faces with scores.</param>
            <returns>List&lt;PlanningSurface&gt;.</returns>
        </member>
        <member name="M:TVGL.Primitive_Classification.AlreadySearchedPrimitive(TVGL.Primitive_Classification.PlanningSurface,System.Collections.Generic.List{TVGL.Primitive_Classification.PlanningSurface})">
            <summary>
            Alreadies the searched primitive.
            </summary>
            <param name="newSeed">The new seed.</param>
            <param name="candidatePatches">The candidate patches.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TVGL.Primitive_Classification.DecideOnOverlappingPatches(System.Collections.Generic.List{TVGL.Primitive_Classification.PlanningSurface},System.Collections.Generic.HashSet{TVGL.Primitive_Classification.FaceWithScores})">
            <summary>
            Decides the on overlapping patches.
            </summary>
            <param name="surfaces">The surfaces.</param>
            <param name="unassignedFaces">The unassigned faces.</param>
            <returns>IEnumerable&lt;PlanningSurface&gt;.</returns>
        </member>
        <member name="M:TVGL.Primitive_Classification.ReInsert(TVGL.Primitive_Classification.PlanningSurface,System.Collections.Generic.List{TVGL.Primitive_Classification.PlanningSurface})">
            <summary>
            Res the insert.
            </summary>
            <param name="surface">The surface.</param>
            <param name="orderedPrimitives">The ordered primitives.</param>
        </member>
        <member name="M:TVGL.Primitive_Classification.MakeSurfaces(System.Collections.Generic.List{TVGL.Primitive_Classification.PlanningSurface},System.Double)">
            <summary>
            Makes the surfaces.
            </summary>
            <param name="plannedSurfaces">The planned surfaces.</param>
            <param name="maxFaceArea">The maximum face area.</param>
            <returns>List&lt;PrimitiveSurface&gt;.</returns>
        </member>
        <member name="M:TVGL.Primitive_Classification.CreatePrimitiveSurface(TVGL.Primitive_Classification.PlanningSurface)">
            <summary>
            Creates the primitive surface.
            </summary>
            <param name="topPlannedSurface">The top planned surface.</param>
            <returns>PrimitiveSurface.</returns>
            <exception cref="T:System.Exception">Cannot build Create Primitive Surface of type:  + surfaceType</exception>
        </member>
        <member name="M:TVGL.Primitive_Classification.IsReallyAFlat(System.Collections.Generic.IEnumerable{TVGL.PolygonalFace})">
            <summary>
            Determines whether [is really a flat] [the specified faces].
            </summary>
            <param name="faces">The faces.</param>
            <returns><c>true</c> if [is really a flat] [the specified faces]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TVGL.Primitive_Classification.IsReallyACone(System.Collections.Generic.IEnumerable{TVGL.PolygonalFace},System.Double[]@,System.Double@)">
            <summary>
            Determines whether [is really a cone] [the specified faces all].
            </summary>
            <param name="facesAll">The faces all.</param>
            <param name="axis">The axis.</param>
            <param name="coneAngle">The cone angle.</param>
            <returns><c>true</c> if [is really a cone] [the specified faces all]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TVGL.Primitive_Classification.IsReallyATorus(System.Collections.Generic.IEnumerable{TVGL.PolygonalFace})">
            <summary>
            Determines whether [is really a torus] [the specified faces].
            </summary>
            <param name="faces">The faces.</param>
            <returns><c>true</c> if [is really a torus] [the specified faces]; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TVGL.Primitive_Classification.PaintSurfaces(System.Collections.Generic.List{TVGL.PrimitiveSurface},TVGL.TessellatedSolid)">
            <summary>
            Paints the surfaces.
            </summary>
            <param name="primitives">The primitives.</param>
            <param name="ts">The ts.</param>
        </member>
        <member name="M:TVGL.Primitive_Classification.ReportStats(System.Collections.Generic.List{TVGL.PrimitiveSurface},System.Double)">
            <summary>
            Reports the stats.
            </summary>
            <param name="primitives">The primitives.</param>
            <param name="primitivesBeforeFiltering">The primitives before filtering.</param>
        </member>
        <member name="T:TVGL.PrimitiveSurfaceType">
            <summary>
            Enum PrimitiveSurfaceType
            </summary>
        </member>
        <member name="F:TVGL.PrimitiveSurfaceType.Unknown">
            <summary>
            The unknown
            </summary>
        </member>
        <member name="F:TVGL.PrimitiveSurfaceType.Dense">
            <summary>
            The dense
            </summary>
        </member>
        <member name="F:TVGL.PrimitiveSurfaceType.Flat">
            <summary>
            The flat
            </summary>
        </member>
        <member name="F:TVGL.PrimitiveSurfaceType.Cylinder">
            <summary>
            The cylinder
            </summary>
        </member>
        <member name="F:TVGL.PrimitiveSurfaceType.Sphere">
            <summary>
            The sphere
            </summary>
        </member>
        <member name="F:TVGL.PrimitiveSurfaceType.Flat_to_Curve">
            <summary>
            The flat_to_ curve
            </summary>
        </member>
        <member name="F:TVGL.PrimitiveSurfaceType.Sharp">
            <summary>
            The sharp
            </summary>
        </member>
        <member name="F:TVGL.PrimitiveSurfaceType.Cone">
            <summary>
            The cone
            </summary>
        </member>
        <member name="T:TVGL.BoundingBox">
            <summary>
                The BoundingBox struct is a simple structure for representing an arbitrarily oriented box
                or 3D prismatic rectangle. It simply includes the orientation as three unit vectors in
                "Directions2D", the extreme vertices, and the volume.
            </summary>
        </member>
        <member name="F:TVGL.BoundingBox.Volume">
            <summary>
                The volume of the bounding box.
            </summary>
        </member>
        <member name="F:TVGL.BoundingBox.Dimensions">
            <summary>
                The dimensions of the bounding box. The 3 values correspond to the 3 direction.
            </summary>
        </member>
        <member name="F:TVGL.BoundingBox.PointsOnFaces">
            <summary>
                The PointsOnFaces is an array of 6 lists which are vertices of the tessellated solid that are on the faces
                of the bounding box. These are not the corners of the bounding box. They are in the order of direction1-low,
                direction1-high, direction2-low, direction2-high, direction3-low, direction3-high.
            </summary>
        </member>
        <member name="F:TVGL.BoundingBox.Directions">
            <summary>
                The Directions normal are the three unit vectors that describe the orientation of the box.
            </summary>
        </member>
        <member name="F:TVGL.BoundingBox.CornerVertices">
            <summary>
                The corner points
            </summary>
        </member>
        <member name="T:TVGL.BoundingRectangle">
            <summary>
                Bounding rectangle information based on area and point pairs.
            </summary>
        </member>
        <member name="F:TVGL.BoundingRectangle.Area">
            <summary>
                The Area of the bounding box.
            </summary>
        </member>
        <member name="F:TVGL.BoundingRectangle.PointsOnSides">
            <summary>
                The point pairs that define the bounding rectangle limits
            </summary>
        </member>
        <member name="F:TVGL.BoundingRectangle.Directions2D">
            <summary>
                Vector directions of length and width of rectangle
            </summary>
        </member>
        <member name="F:TVGL.BoundingRectangle.Dimensions">
            <summary>
                Length and Width of Bounding Rectangle
            </summary>
        </member>
        <member name="T:TVGL.BoundingCircle">
            <summary>
                Public circle structure, given a center point and radius
            </summary>
        </member>
        <member name="F:TVGL.BoundingCircle.Center">
            <summary>
                Center Point of circle
            </summary>
        </member>
        <member name="F:TVGL.BoundingCircle.Radius">
            <summary>
                Radius of circle
            </summary>
        </member>
        <member name="F:TVGL.BoundingCircle.Area">
            <summary>
                Area of circle
            </summary>
        </member>
        <member name="F:TVGL.BoundingCircle.Circumference">
            <summary>
                Circumference of circle
            </summary>
        </member>
        <member name="M:TVGL.BoundingCircle.#ctor(System.Double,TVGL.Point)">
            <summary>
                Creates a circle, given a radius. Center point is optional
            </summary>
            <param name="radius">The radius.</param>
            <param name="center">The center.</param>
        </member>
        <member name="T:TVGL.BoundingCylinder">
            <summary>
                Public cylinder structure
            </summary>
        </member>
        <member name="F:TVGL.BoundingCylinder.Axis">
            <summary>
                Center axis along depth
            </summary>
        </member>
        <member name="F:TVGL.BoundingCylinder.BoundingCircle">
            <summary>
                Bounding Circle on one end of the cylinder
            </summary>
        </member>
        <member name="F:TVGL.BoundingCylinder.Height">
            <summary>
                Height of cylinder
            </summary>
        </member>
        <member name="F:TVGL.BoundingCylinder.Volume">
            <summary>
                Volume
            </summary>
        </member>
        <member name="T:TVGL.SimplifyTessellation">
            <summary>
                The Slice class includes static functions for cutting a tessellated solid.
            </summary>
        </member>
        <member name="M:TVGL.SimplifyTessellation.SimplifyByPercentage(TVGL.TessellatedSolid,System.Double)">
            <summary>
                Simplifies by the percentage provided. For example, is ts has 100 triangles, then passing
                a 0.2 will reduce to 80 triangles
            </summary>
            <param name="ts">The ts.</param>
            <param name="percentageToReduceBy">The percentage to reduce by.</param>
        </member>
        <member name="M:TVGL.SimplifyTessellation.SimplifyToNFaces(TVGL.TessellatedSolid,System.Int32)">
            <summary>
                Simplifies to n faces.
            </summary>
            <param name="ts">The ts.</param>
            <param name="numberOfFaces">The number of faces.</param>
        </member>
        <member name="M:TVGL.SimplifyTessellation.Simplify(TVGL.TessellatedSolid)">
            <summary>
                Simplifies the model by merging the vertices that are closest together
            </summary>
            <param name="ts">The ts.</param>
        </member>
        <member name="M:TVGL.SimplifyTessellation.SimplifyByTolerance(TVGL.TessellatedSolid,System.Double)">
            <summary>
                Simplifies by a tolerance whereby vertices within the specified length will be merged.
            </summary>
            <param name="ts">The ts.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="T:TVGL.TessellationError">
            <summary>
                Stores errors in the tessellated solid
            </summary>
        </member>
        <member name="P:TVGL.TessellationError.OverusedEdges">
            <summary>
                Edges that are used by more than two faces
            </summary>
            <value>The overused edges.</value>
        </member>
        <member name="P:TVGL.TessellationError.SingledSidedEdges">
            <summary>
                Edges that only have one face
            </summary>
            <value>The singled sided edges.</value>
        </member>
        <member name="P:TVGL.TessellationError.DegenerateFaces">
            <summary>
                Faces with errors
            </summary>
            <value>The degenerate faces.</value>
        </member>
        <member name="P:TVGL.TessellationError.DuplicateFaces">
            <summary>
                Duplicate Faces
            </summary>
            <value>The duplicate faces.</value>
        </member>
        <member name="P:TVGL.TessellationError.FacesWithOneVertex">
            <summary>
                Faces with only one vertex
            </summary>
            <value>The faces with one vertex.</value>
        </member>
        <member name="P:TVGL.TessellationError.FacesWithOneEdge">
            <summary>
                Faces with only one edge
            </summary>
            <value>The faces with one edge.</value>
        </member>
        <member name="P:TVGL.TessellationError.FacesWithTwoVertices">
            <summary>
                Faces with only two vertices
            </summary>
            <value>The faces with two vertices.</value>
        </member>
        <member name="P:TVGL.TessellationError.FacesWithTwoEdges">
            <summary>
                Faces with only two edges
            </summary>
            <value>The faces with two edges.</value>
        </member>
        <member name="P:TVGL.TessellationError.FacesWithNegligibleArea">
            <summary>
                Faces with negligible area (which is not necessarily an error)
            </summary>
            <value>The faces with negligible area.</value>
        </member>
        <member name="P:TVGL.TessellationError.EdgesThatDoNotLinkBackToFace">
            <summary>
                Edges that do not link back to faces that link to them
            </summary>
            <value>The edges that do not link back to face.</value>
        </member>
        <member name="P:TVGL.TessellationError.EdgesThatDoNotLinkBackToVertex">
            <summary>
                Edges that do not link back to vertices that link to them
            </summary>
            <value>The edges that do not link back to vertex.</value>
        </member>
        <member name="P:TVGL.TessellationError.VertsThatDoNotLinkBackToFace">
            <summary>
                Vertices that do not link back to faces that link to them
            </summary>
            <value>The verts that do not link back to face.</value>
        </member>
        <member name="P:TVGL.TessellationError.VertsThatDoNotLinkBackToEdge">
            <summary>
                Vertices that do not link back to edges that link to them
            </summary>
            <value>The verts that do not link back to edge.</value>
        </member>
        <member name="P:TVGL.TessellationError.FacesThatDoNotLinkBackToEdge">
            <summary>
                Faces that do not link back to edges that link to them
            </summary>
            <value>The faces that do not link back to edge.</value>
        </member>
        <member name="P:TVGL.TessellationError.FacesThatDoNotLinkBackToVertex">
            <summary>
                Faces that do not link back to vertices that link to them
            </summary>
            <value>The faces that do not link back to vertex.</value>
        </member>
        <member name="P:TVGL.TessellationError.EdgesWithBadAngle">
            <summary>
                Edges with bad angles
            </summary>
            <value>The edges with bad angle.</value>
        </member>
        <member name="P:TVGL.TessellationError.EdgeFaceRatio">
            <summary>
                Edges to face ratio
            </summary>
            <value>The edge face ratio.</value>
        </member>
        <member name="P:TVGL.TessellationError.NoErrors">
            <summary>
                Whether ts.Errors contains any errors that need to be resolved
            </summary>
            <value><c>true</c> if [no errors]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TVGL.TessellationError.ModelIsInsideOut">
            <summary>
            Gets a value indicating whether [model is inside out].
            </summary>
            <value>
              <c>true</c> if [model is inside out]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:TVGL.TessellationError.CheckModelIntegrity(TVGL.TessellatedSolid,System.Boolean)">
            <summary>
                Checks the model integrity.
            </summary>
            <param name="ts">The ts.</param>
            <param name="repairAutomatically">The repair automatically.</param>
        </member>
        <member name="M:TVGL.TessellationError.Report">
            <summary>
                Report out any errors
            </summary>
        </member>
        <member name="M:TVGL.TessellationError.StoreModelIsInsideOut(TVGL.TessellatedSolid)">
            <summary>
            Stores the model is inside out.
            </summary>
            <param name="ts">The ts.</param>
        </member>
        <member name="M:TVGL.TessellationError.StoreEdgeFaceRatio(TVGL.TessellatedSolid,System.Double)">
            <summary>
                Stores the edge face ratio.
            </summary>
            <param name="ts">The ts.</param>
            <param name="edgeFaceRatio">The edge face ratio.</param>
        </member>
        <member name="M:TVGL.TessellationError.StoreFaceDoesNotLinkBackToVertex(TVGL.TessellatedSolid,TVGL.Vertex,TVGL.PolygonalFace)">
            <summary>
                Stores the face does not link back to vertex.
            </summary>
            <param name="ts">The ts.</param>
            <param name="vertex">The vertex.</param>
            <param name="face">The face.</param>
        </member>
        <member name="M:TVGL.TessellationError.StoreEdgeDoesNotLinkBackToVertex(TVGL.TessellatedSolid,TVGL.Vertex,TVGL.Edge)">
            <summary>
                Stores the edge does not link back to vertex.
            </summary>
            <param name="ts">The ts.</param>
            <param name="vertex">The vertex.</param>
            <param name="edge">The edge.</param>
        </member>
        <member name="M:TVGL.TessellationError.StoreEdgeHasBadAngle(TVGL.TessellatedSolid,TVGL.Edge)">
            <summary>
                Stores the edge has bad angle.
            </summary>
            <param name="ts">The ts.</param>
            <param name="edge">The edge.</param>
        </member>
        <member name="M:TVGL.TessellationError.StoreVertDoesNotLinkBackToEdge(TVGL.TessellatedSolid,TVGL.Edge,TVGL.Vertex)">
            <summary>
                Stores the vert does not link back to edge.
            </summary>
            <param name="ts">The ts.</param>
            <param name="edge">The edge.</param>
            <param name="vert">The vert.</param>
        </member>
        <member name="M:TVGL.TessellationError.StoreFaceDoesNotLinkBackToEdge(TVGL.TessellatedSolid,TVGL.Edge,TVGL.PolygonalFace)">
            <summary>
                Stores the face does not link back to edge.
            </summary>
            <param name="ts">The ts.</param>
            <param name="edge">The edge.</param>
            <param name="face">The face.</param>
        </member>
        <member name="M:TVGL.TessellationError.StoreFaceWithNegligibleArea(TVGL.TessellatedSolid,TVGL.PolygonalFace)">
            <summary>
                Stores the face with negligible area.
            </summary>
            <param name="ts">The ts.</param>
            <param name="face">The face.</param>
        </member>
        <member name="M:TVGL.TessellationError.StoreVertexDoesNotLinkBackToFace(TVGL.TessellatedSolid,TVGL.PolygonalFace,TVGL.Vertex)">
            <summary>
                Stores the vertex does not link back to face.
            </summary>
            <param name="ts">The ts.</param>
            <param name="face">The face.</param>
            <param name="vertex">The vertex.</param>
        </member>
        <member name="M:TVGL.TessellationError.StoreEdgeDoesNotLinkBackToFace(TVGL.TessellatedSolid,TVGL.PolygonalFace,TVGL.Edge)">
            <summary>
                Stores the edge does not link back to face.
            </summary>
            <param name="ts">The ts.</param>
            <param name="face">The face.</param>
            <param name="edge">The edge.</param>
        </member>
        <member name="M:TVGL.TessellationError.StoreFaceWithTwoEdges(TVGL.TessellatedSolid,TVGL.PolygonalFace)">
            <summary>
                Stores the face with o two edges.
            </summary>
            <param name="ts">The ts.</param>
            <param name="face">The face.</param>
        </member>
        <member name="M:TVGL.TessellationError.StoreFaceWithTwoVertices(TVGL.TessellatedSolid,TVGL.PolygonalFace)">
            <summary>
                Stores the face with two vertices.
            </summary>
            <param name="ts">The ts.</param>
            <param name="face">The face.</param>
        </member>
        <member name="M:TVGL.TessellationError.StoreFaceWithOneEdge(TVGL.TessellatedSolid,TVGL.PolygonalFace)">
            <summary>
                Stores the face with one edge.
            </summary>
            <param name="ts">The ts.</param>
            <param name="face">The face.</param>
        </member>
        <member name="M:TVGL.TessellationError.StoreFaceWithOneVertex(TVGL.TessellatedSolid,TVGL.PolygonalFace)">
            <summary>
                Stores the face with one vertex.
            </summary>
            <param name="ts">The ts.</param>
            <param name="face">The face.</param>
        </member>
        <member name="M:TVGL.TessellationError.StoreOverusedEdges(TVGL.TessellatedSolid,System.Collections.Generic.IEnumerable{System.Tuple{TVGL.Edge,System.Collections.Generic.List{TVGL.PolygonalFace}}})">
            <summary>
                Stores the overused edges.
            </summary>
            <param name="ts">The ts.</param>
            <param name="edgeFaceTuples">The edge face tuples.</param>
        </member>
        <member name="M:TVGL.TessellationError.StoreSingleSidedEdge(TVGL.TessellatedSolid,TVGL.Edge)">
            <summary>
                Stores the single sided edge.
            </summary>
            <param name="ts">The ts.</param>
            <param name="singledSidedEdge">The singled sided edge.</param>
        </member>
        <member name="M:TVGL.TessellationError.StoreDegenerateFace(TVGL.TessellatedSolid,System.Int32[])">
            <summary>
                Stores the degenerate face.
            </summary>
            <param name="ts">The ts.</param>
            <param name="faceVertexIndices">The face vertex indices.</param>
        </member>
        <member name="M:TVGL.TessellationError.StoreDuplicateFace(TVGL.TessellatedSolid,System.Int32[])">
            <summary>
                Stores the duplicate face.
            </summary>
            <param name="ts">The ts.</param>
            <param name="faceVertexIndices">The face vertex indices.</param>
        </member>
        <member name="M:TVGL.TessellationError.Repair(TVGL.TessellatedSolid)">
            <summary>
                Repairs the specified ts.
            </summary>
            <param name="ts">The ts.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TVGL.TessellationError.FlipFacesBasedOnBadAngles(TVGL.TessellatedSolid)">
            <summary>
                Flips the faces based on bad angles.
            </summary>
            <param name="ts">The ts.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TVGL.Edge">
            <summary>
                The straight-line edge class. It connects to two nodes and lies between two faces.
            </summary>
        </member>
        <member name="M:TVGL.Edge.#ctor">
            <summary>
                Prevents a default instance of the <see cref="T:TVGL.Edge" /> class from being created.
            </summary>
        </member>
        <member name="M:TVGL.Edge.OtherVertex(TVGL.Vertex)">
            <summary>
                Others the vertex.
            </summary>
            <param name="v">The v.</param>
            <returns>Vertex.</returns>
            <exception cref="T:System.Exception">OtherVertex: Vertex thought to connect to edge, but it doesn't.</exception>
            <exception cref="T:System.Exception">OtherVertex: Vertex thought to connect to edge, but it doesn't.</exception>
        </member>
        <member name="M:TVGL.Edge.#ctor(TVGL.Vertex,TVGL.Vertex,TVGL.PolygonalFace,TVGL.PolygonalFace,System.Boolean,System.Int64)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Edge" /> class.
            </summary>
            <param name="fromVertex">From vertex.</param>
            <param name="toVertex">To vertex.</param>
            <param name="ownedFace">The face.</param>
            <param name="otherFace">The other face.</param>
            <param name="doublyLinkedVertices">if set to <c>true</c> [doubly linked vertices].</param>
            <param name="edgeReference">The edge reference.</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:TVGL.Edge.#ctor(TVGL.Vertex,TVGL.Vertex,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Edge" /> class.
            </summary>
            <param name="fromVertex">From vertex.</param>
            <param name="toVertex">To vertex.</param>
            <param name="doublyLinkedVertices">if set to <c>true</c> [doubly linked vertices].</param>
        </member>
        <member name="P:TVGL.Edge.From">
            <summary>
                Gets the From Vertex.
            </summary>
            <value>From.</value>
        </member>
        <member name="P:TVGL.Edge.To">
            <summary>
                Gets the To Vertex.
            </summary>
            <value>To.</value>
        </member>
        <member name="P:TVGL.Edge.Length">
            <summary>
                Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:TVGL.Edge.Vector">
            <summary>
                Gets the vector.
            </summary>
            <value>The vector.</value>
        </member>
        <member name="F:TVGL.Edge._otherFace">
            <summary>
                The _other face
            </summary>
        </member>
        <member name="F:TVGL.Edge._ownedFace">
            <summary>
                The _owned face
            </summary>
        </member>
        <member name="P:TVGL.Edge.EdgeReference">
            <summary>
                Gets edge reference (checksum) value, which equals
                "From.IndexInList" + "To.IndexInList" (think strings)
            </summary>
            <value>To.</value>
        </member>
        <member name="P:TVGL.Edge.OwnedFace">
            <summary>
                Gets the owned face (the face in which the from-to direction makes sense
                - that is, produces the proper cross-product normal).
            </summary>
            <value>The owned face.</value>
        </member>
        <member name="P:TVGL.Edge.OtherFace">
            <summary>
                Gets the other face (the face in which the from-to direction doesn not
                make sense- that is, produces the negative cross-product normal).
            </summary>
            <value>The other face.</value>
        </member>
        <member name="P:TVGL.Edge.InternalAngle">
            <summary>
                Gets the internal angle in radians.
            </summary>
            <value>The internal angle.</value>
        </member>
        <member name="M:TVGL.Edge.Update">
            <summary>
                Updates the edge vector and length, if a vertex has been moved.
            </summary>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:TVGL.Edge.DefineInternalEdgeAngle">
            <summary>
                Defines the edge angle.
            </summary>
            <exception cref="T:System.Exception">not possible</exception>
        </member>
        <member name="T:TVGL.PolygonalFace">
            <summary>
                This class defines a flat polygonal face. The implementation began with triangular faces in mind.
                It should be double-checked for higher polygons.   It inherits from the ConvexFace class in
                MIConvexHull
            </summary>
        </member>
        <member name="M:TVGL.PolygonalFace.DefineFaceCurvature">
            <summary>
                Defines the face curvature. Depends on DefineEdgeAngle
            </summary>
        </member>
        <member name="M:TVGL.PolygonalFace.Copy">
            <summary>
                Copies this instance. Does not include reference lists.
            </summary>
            <returns>PolygonalFace.</returns>
        </member>
        <member name="M:TVGL.PolygonalFace.Update">
            <summary>
                Updates normal, vertex order, and area
            </summary>
        </member>
        <member name="M:TVGL.PolygonalFace.AddEdge(TVGL.Edge)">
            <summary>
            Adds the edge.
            </summary>
            <param name="edge">The edge.</param>
        </member>
        <member name="M:TVGL.PolygonalFace.OtherEdge(TVGL.Vertex,System.Boolean)">
            <summary>
                Others the edge.
            </summary>
            <param name="thisVertex">The this vertex.</param>
            <param name="willAcceptNullAnswer">if set to <c>true</c> [will accept null answer].</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:TVGL.PolygonalFace.OtherVertex(TVGL.Edge,System.Boolean)">
            <summary>
                Others the vertex.
            </summary>
            <param name="thisEdge">The this edge.</param>
            <param name="willAcceptNullAnswer">if set to <c>true</c> [will accept null answer].</param>
            <returns>Vertex.</returns>
        </member>
        <member name="M:TVGL.PolygonalFace.OtherVertex(TVGL.Vertex,TVGL.Vertex,System.Boolean)">
            <summary>
                Others the vertex.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="willAcceptNullAnswer">if set to <c>true</c> [will accept null answer].</param>
            <returns>Vertex.</returns>
        </member>
        <member name="M:TVGL.PolygonalFace.NextVertexCCW(TVGL.Vertex)">
            <summary>
                Nexts the vertex CCW.
            </summary>
            <param name="v1">The v1.</param>
            <returns>Vertex.</returns>
        </member>
        <member name="M:TVGL.PolygonalFace.#ctor(System.Double[],TVGL.Color)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.PolygonalFace" /> class.
            </summary>
            <param name="normal">The normal.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:TVGL.PolygonalFace.#ctor(System.Double[])">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.PolygonalFace" /> class.
            </summary>
            <param name="normal">The normal.</param>
        </member>
        <member name="M:TVGL.PolygonalFace.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.PolygonalFace" /> class.
            </summary>
        </member>
        <member name="M:TVGL.PolygonalFace.#ctor(System.Collections.Generic.IEnumerable{TVGL.Vertex},System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.PolygonalFace" /> class.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="connectVerticesBackToFace">if set to <c>true</c> [connect vertices back to face].</param>
        </member>
        <member name="M:TVGL.PolygonalFace.#ctor(System.Collections.Generic.IEnumerable{TVGL.Vertex},System.Double[],System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.PolygonalFace" /> class.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="normal">A guess for the normal vector.</param>
            <param name="connectVerticesBackToFace">if set to <c>true</c> [connect vertices back to face].</param>
        </member>
        <member name="M:TVGL.PolygonalFace.DetermineArea">
            <summary>
                Determines the area.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TVGL.PolygonalFace.DetermineNormal(System.Collections.Generic.List{TVGL.Vertex},System.Boolean@,System.Double[])">
            <summary>
            Determines the normal.
            </summary>
            <param name="reverseVertexOrder">if set to <c>true</c> [reverse vertex order].</param>
            <param name="vertices">The vertices.</param>
            <param name="normal">The normal.</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="P:TVGL.PolygonalFace.Vertices">
            <summary>
                Gets the vertices.
            </summary>
            <value>The vertices.</value>
        </member>
        <member name="P:TVGL.PolygonalFace.Edges">
            <summary>
                Gets the edges.
            </summary>
            <value>The edges.</value>
        </member>
        <member name="P:TVGL.PolygonalFace.Center">
            <summary>
                Gets the center.
            </summary>
            <value>The center.</value>
        </member>
        <member name="P:TVGL.PolygonalFace.Area">
            <summary>
                Gets the area.
            </summary>
            <value>The area.</value>
        </member>
        <member name="P:TVGL.PolygonalFace.Color">
            <summary>
                Gets or sets the color.
            </summary>
            <value>The color.</value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:TVGL.PolygonalFace.ID" -->
        <member name="P:TVGL.PolygonalFace.CreatedInFunction">
            <summary>
                Gets or sets the created in function.
            </summary>
            <value>The created in function.</value>
        </member>
        <member name="P:TVGL.PolygonalFace.AdjacentFaces">
            <summary>
                Gets the adjacent faces.
            </summary>
            <value>The adjacent faces.</value>
        </member>
        <member name="T:TVGL.TessellatedSolid">
            <summary>
                Class TessellatedSolid - functions related to edge initialization.
            </summary>
            <tags>help</tags>
            <remarks>
                This partial class file includes all the weird and complicated ways that edges are created when a tessellated solid
                is made.
                Since edges are rarely explicitly defined in a file, we create these after vertices and faces. In so doing, one may
                find some
                error with the file. Here we attempt to patch those up..
            </remarks>
            <summary>
                Class TessellatedSolid.
            </summary>
            <tags>help</tags>
            <remarks>
                This partial class file is focused on static functions that relate to Tessellated Solid.
            </remarks>
            <summary>
                Class TessellatedSolid.
            </summary>
            <tags>help</tags>
            <remarks>
                This is the currently the <strong>main</strong> class within TVGL all filetypes are read in as a TessellatedSolid,
                and
                all interesting operations work on the TessellatedSolid.
            </remarks>
        </member>
        <member name="M:TVGL.TessellatedSolid.DefineEdgesFromFaces(System.Collections.Generic.IList{TVGL.PolygonalFace},System.Boolean,System.Collections.Generic.List{System.Tuple{TVGL.Edge,System.Collections.Generic.List{TVGL.PolygonalFace}}}@,System.Collections.Generic.List{TVGL.Edge}@)">
            <summary>
                The first pass to making edges. It returns the good ones, and two lists of bad ones. The first, overDefinedEdges,
                are those which appear to have more than two faces interfacing with the edge. This happens when CAD tools
                tessellate
                and save B-rep surfaces that are created through boolean operations (such as union). The second list,
                partlyDefinedEdges,
                only have one face connected to them (aka singleSidedEdges).
            </summary>
            <param name="faces">The faces.</param>
            <param name="doublyLinkToVertices">if set to <c>true</c> [doubly link to vertices].</param>
            <param name="overDefinedEdges">The over defined edges.</param>
            <param name="partlyDefinedEdges">The partly defined edges.</param>
            <returns>List&lt;Tuple&lt;Edge, List&lt;PolygonalFace&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:TVGL.TessellatedSolid.TeaseApartOverUsedEdges(System.Collections.Generic.List{System.Tuple{TVGL.Edge,System.Collections.Generic.List{TVGL.PolygonalFace}}},System.Collections.Generic.List{TVGL.Edge}@)">
            <summary>
            Teases apart over-defined edges. By taking in the edges with more than two faces (the over-used edges) a list is
            return of newly defined edges.
            </summary>
            <param name="overUsedEdgesDictionary">The over used edges dictionary.</param>
            <param name="moreSingleSidedEdges">The more single sided edges.</param>
            <returns>System.Collections.Generic.IEnumerable&lt;System.Tuple&lt;TVGL.Edge, System.Collections.Generic.List&lt;
            TVGL.PolygonalFace&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:TVGL.TessellatedSolid.CombineVerticesOfEdge(TVGL.Edge,TVGL.Vertex@,TVGL.Edge@,TVGL.Edge@,TVGL.PolygonalFace@,TVGL.PolygonalFace@)">
            <summary>
                Combines the vertices of edge.
            </summary>
            <param name="edge">The edge.</param>
            <param name="removedVertexOut">The removed vertex out.</param>
            <param name="removedEdge1Out">The removed edge1 out.</param>
            <param name="removedEdge2Out">The removed edge2 out.</param>
            <param name="removedFace1">The removed face1.</param>
            <param name="removedFace2">The removed face2.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TVGL.TessellatedSolid.AdjustPositionOfKeptVertex(TVGL.Vertex,TVGL.Vertex)">
            <summary>
                Adjusts the position of kept vertex.
            </summary>
            <param name="keepVertex">The keep vertex.</param>
            <param name="removedVertex">The removed vertex.</param>
        </member>
        <member name="M:TVGL.TessellatedSolid.AdjustPositionOfKeptVertexExperimental(TVGL.Vertex,TVGL.Vertex,TVGL.PolygonalFace,TVGL.PolygonalFace)">
            <summary>
                Adjusts the position of kept vertex experimental.
            </summary>
            <param name="keepVertex">The keep vertex.</param>
            <param name="removedVertex">The removed vertex.</param>
            <param name="removeFace1">The remove face1.</param>
            <param name="removeFace2">The remove face2.</param>
        </member>
        <member name="M:TVGL.TessellatedSolid.DefineCenterVolumeAndSurfaceArea(System.Collections.Generic.IList{TVGL.PolygonalFace},System.Double[]@,System.Double@,System.Double@)">
            <summary>
            Defines the center, the volume and the surface area.
            </summary>
        </member>
        <member name="M:TVGL.TessellatedSolid.VolumeViaAreaDecomposition(TVGL.TessellatedSolid)">
            <summary>
            Find the volume of a tesselated solid with a slower method. 
            This method could be exteded to find partial volumes of a solid (e.g. volume between two planes)
            </summary>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:TVGL.TessellatedSolid.CalculateVolume(System.Collections.Generic.IList{TVGL.PolygonalFace},System.Double[]@)">
            <summary>
            Find the volume of a tesselated solid.
            </summary>
            <param name="faces"></param>
            <param name="center"></param>
            <returns></returns>
        </member>
        <member name="P:TVGL.TessellatedSolid.Center">
            <summary>
                Gets the center.
            </summary>
            <value>The center.</value>
        </member>
        <member name="P:TVGL.TessellatedSolid.ZMax">
            <summary>
                Gets the z maximum.
            </summary>
            <value>The z maximum.</value>
        </member>
        <member name="P:TVGL.TessellatedSolid.YMax">
            <summary>
                Gets the y maximum.
            </summary>
            <value>The y maximum.</value>
        </member>
        <member name="P:TVGL.TessellatedSolid.XMax">
            <summary>
                Gets the x maximum.
            </summary>
            <value>The x maximum.</value>
        </member>
        <member name="P:TVGL.TessellatedSolid.ZMin">
            <summary>
                Gets the z minimum.
            </summary>
            <value>The z minimum.</value>
        </member>
        <member name="P:TVGL.TessellatedSolid.YMin">
            <summary>
                Gets the y minimum.
            </summary>
            <value>The y minimum.</value>
        </member>
        <member name="P:TVGL.TessellatedSolid.XMin">
            <summary>
                Gets the x minimum.
            </summary>
            <value>The x minimum.</value>
        </member>
        <member name="P:TVGL.TessellatedSolid.Bounds">
            <summary>
                Gets the bounds.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:TVGL.TessellatedSolid.Volume">
            <summary>
                Gets the volume.
            </summary>
            <value>The volume.</value>
        </member>
        <member name="P:TVGL.TessellatedSolid.Mass">
            <summary>
                Gets and sets the mass.
            </summary>
            <value>The mass.</value>
        </member>
        <member name="P:TVGL.TessellatedSolid.SurfaceArea">
            <summary>
                Gets the surface area.
            </summary>
            <value>The surface area.</value>
        </member>
        <member name="P:TVGL.TessellatedSolid.Name">
            <summary>
                The name of solid
            </summary>
            <value>The name.</value>
        </member>
        <member name="F:TVGL.TessellatedSolid.Comments">
            <summary>
            The comments
            </summary>
        </member>
        <member name="F:TVGL.TessellatedSolid.FileName">
            <summary>
            The file name
            </summary>
        </member>
        <member name="F:TVGL.TessellatedSolid.Units">
            <summary>
            Gets or sets the units.
            </summary>
            <value>The units.</value>
        </member>
        <member name="F:TVGL.TessellatedSolid.Language">
            <summary>
            The language
            </summary>
        </member>
        <member name="P:TVGL.TessellatedSolid.Faces">
            <summary>
                Gets the faces.
            </summary>
            <value>The faces.</value>
        </member>
        <member name="P:TVGL.TessellatedSolid.Edges">
            <summary>
                Gets the edges.
            </summary>
            <value>The edges.</value>
        </member>
        <member name="P:TVGL.TessellatedSolid.Vertices">
            <summary>
                Gets the vertices.
            </summary>
            <value>The vertices.</value>
        </member>
        <member name="P:TVGL.TessellatedSolid.NumberOfFaces">
            <summary>
                Gets the number of faces.
            </summary>
            <value>The number of faces.</value>
        </member>
        <member name="P:TVGL.TessellatedSolid.NumberOfVertices">
            <summary>
                Gets the number of vertices.
            </summary>
            <value>The number of vertices.</value>
        </member>
        <member name="P:TVGL.TessellatedSolid.NumberOfEdges">
            <summary>
                Gets the number of edges.
            </summary>
            <value>The number of edges.</value>
        </member>
        <member name="P:TVGL.TessellatedSolid.ConvexHull">
            <summary>
                Gets the convex hull.
            </summary>
            <value>The convex hull.</value>
        </member>
        <member name="F:TVGL.TessellatedSolid.HasUniformColor">
            <summary>
                The has uniform color
            </summary>
        </member>
        <member name="P:TVGL.TessellatedSolid.InertiaTensor">
            <summary>
                The has uniform color
            </summary>
        </member>
        <member name="F:TVGL.TessellatedSolid.SolidColor">
            <summary>
                The solid color
            </summary>
        </member>
        <member name="P:TVGL.TessellatedSolid.SameTolerance">
            <summary>
                The tolerance is set during the initiation (constructor phase). This is based on the maximum
                length of the axis-aligned bounding box times Constants.
            </summary>
            <value>The same tolerance.</value>
        </member>
        <member name="P:TVGL.TessellatedSolid.Errors">
            <summary>
                Errors in the tesselated solid
            </summary>
        </member>
        <member name="P:TVGL.TessellatedSolid.Primitives">
            <summary>
                Gets or sets the primitive objects that make up the solid
            </summary>
        </member>
        <member name="M:TVGL.TessellatedSolid.#ctor(System.Collections.Generic.IList{System.Double[]},System.Collections.Generic.IList{System.Collections.Generic.List{System.Double[]}},System.Collections.Generic.IList{TVGL.Color},TVGL.UnitType,System.String,System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.TessellatedSolid" /> class. This is the one that
            matches with the STL format.
            </summary>
            <param name="normals">The normals.</param>
            <param name="vertsPerFace">The verts per face.</param>
            <param name="colors">The colors.</param>
            <param name="units">The units.</param>
            <param name="name">The name.</param>
            <param name="filename">The filename.</param>
            <param name="comments">The comments.</param>
            <param name="language">The language.</param>
        </member>
        <member name="M:TVGL.TessellatedSolid.#ctor(System.Collections.Generic.IList{System.Double[]},System.Collections.Generic.IList{System.Int32[]},System.Collections.Generic.IList{TVGL.Color},TVGL.UnitType,System.String,System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.TessellatedSolid" /> class. This matches with formats
            that use indices to the vertices (almost everything except STL).
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="faceToVertexIndices">The face to vertex indices.</param>
            <param name="colors">The colors.</param>
            <param name="units">The units.</param>
            <param name="name">The name.</param>
            <param name="filename">The filename.</param>
            <param name="comments">The comments.</param>
            <param name="language">The language.</param>
        </member>
        <member name="M:TVGL.TessellatedSolid.#ctor(System.Collections.Generic.IList{TVGL.PolygonalFace},System.Collections.Generic.IList{TVGL.Vertex},System.Collections.Generic.IList{TVGL.Color},TVGL.UnitType,System.String,System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TVGL.TessellatedSolid" /> class. This constructor is
            for cases in which the faces and vertices are already defined.
            </summary>
            <param name="faces">The faces.</param>
            <param name="vertices">The vertices.</param>
            <param name="colors">The colors.</param>
            <param name="units">The units.</param>
            <param name="name">The name.</param>
            <param name="filename">The filename.</param>
            <param name="comments">The comments.</param>
            <param name="language">The language.</param>
        </member>
        <member name="M:TVGL.TessellatedSolid.DefineAxisAlignedBoundingBoxAndTolerance(System.Collections.Generic.IEnumerable{System.Double[]})">
            <summary>
                Defines the axis aligned bounding box and tolerance. This is called first in the constructors
                because the tolerance is used in making the vertices.
            </summary>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="M:TVGL.TessellatedSolid.MakeFaces(System.Collections.Generic.IList{System.Int32[]},System.Collections.Generic.IList{TVGL.Color},System.Collections.Generic.IList{System.Double[]},System.Boolean)">
            <summary>
            Makes the faces, avoiding duplicates.
            </summary>
            <param name="faceToVertexIndices">The face to vertex indices.</param>
            <param name="colors">The colors.</param>
            <param name="normals">The normals.</param>
            <param name="doublyLinkToVertices">if set to <c>true</c> [doubly link to vertices].</param>
        </member>
        <member name="M:TVGL.TessellatedSolid.MakeVertices(System.Collections.Generic.IEnumerable{System.Collections.Generic.List{System.Double[]}},System.Collections.Generic.List{System.Int32[]}@)">
            <summary>
                Makes the vertices.
            </summary>
            <param name="vertsPerFace">The verts per face.</param>
            <param name="faceToVertexIndices">The face to vertex indices.</param>
        </member>
        <member name="M:TVGL.TessellatedSolid.MakeVertices(System.Collections.Generic.IList{System.Double[]},System.Collections.Generic.IList{System.Int32[]}@)">
            <summary>
                Makes the vertices.
            </summary>
            <param name="vertices"></param>
            <param name="faceToVertexIndices">The face to vertex indices.</param>
        </member>
        <member name="M:TVGL.TessellatedSolid.MakeVertices(System.Collections.Generic.IList{System.Double[]})">
            <summary>
                Makes the vertices, and set CheckSum multiplier
            </summary>
            <param name="listOfVertices">The list of vertices.</param>
        </member>
        <member name="M:TVGL.TessellatedSolid.AddPrimitive(TVGL.PrimitiveSurface)">
            <summary>
                Adds the primitive.
            </summary>
            <param name="p">The p.</param>
        </member>
        <member name="M:TVGL.TessellatedSolid.Copy">
            <summary>
                Copies this instance.
            </summary>
            <returns>TessellatedSolid.</returns>
        </member>
        <member name="M:TVGL.TessellatedSolid.Repair">
            <summary>
                Repairs this instance.
            </summary>
            <returns><c>true</c> if this solid is now free of errors, <c>false</c> if errors remain.</returns>
        </member>
        <member name="M:TVGL.TessellatedSolid.Transform(System.Double[0:,0:])">
            <summary>
            Transforms the specified transform matrix.
            </summary>
            <param name="transformMatrix">The transform matrix.</param>
        </member>
        <member name="M:TVGL.TessellatedSolid.SetToOriginAndSquareTesselatedSolid(System.Double[0:,0:]@)">
            <summary>
            Translates and Squares Tesselated Solid based on its oriented bounding box. 
            The resulting Solid should be located at the origin, and only in the positive X, Y, Z octant.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TVGL.TessellatedSolid.TransformToGetNewSolid(System.Double[0:,0:])">
            <summary>
            Gets a new solid by transforming its vertices.
            </summary>
            <param name="transformationMatrix"></param>
            <returns></returns>
        </member>
        <member name="P:TVGL.TessellationBaseClass.IndexInList">
            <summary>
                Index of the face in the tesselated solid face list
            </summary>
            <value>The index in list.</value>
        </member>
        <member name="P:TVGL.TessellationBaseClass.PartOfConvexHull">
            <summary>
                Gets a value indicating whether [it is part of the convex hull].
            </summary>
            <value><c>true</c> if [it is part of the convex hull]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TVGL.TessellationBaseClass.Curvature">
            <summary>
                Gets the curvature.
            </summary>
            <value>The curvature.</value>
        </member>
        <member name="P:TVGL.TessellationBaseClass.Normal">
            <summary>
                Gets the normal.
            </summary>
            <value>The normal.</value>
        </member>
        <member name="T:TVGL.TVGLConvexHull">
            <summary>
                The Convex Hull of a Tesselated Solid
            </summary>
        </member>
        <member name="M:TVGL.TVGLConvexHull.#ctor(TVGL.TessellatedSolid)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.TVGLConvexHull" /> class.
            </summary>
            <param name="ts">The tessellated solid that the convex hull is made from.</param>
        </member>
        <member name="M:TVGL.TVGLConvexHull.#ctor(System.Collections.Generic.IList{TVGL.Vertex},System.Double)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.TVGLConvexHull" /> class.
            </summary>
            <param name="ts">The tessellated solid that the convex hull is made from.</param>
        </member>
        <member name="F:TVGL.TVGLConvexHull.SurfaceArea">
            <summary>
                The surface area
            </summary>
        </member>
        <member name="F:TVGL.TVGLConvexHull.Center">
            <summary>
                The center
            </summary>
        </member>
        <member name="F:TVGL.TVGLConvexHull.Volume">
            <summary>
                The volume of the Convex Hull.
            </summary>
        </member>
        <member name="F:TVGL.TVGLConvexHull.Vertices">
            <summary>
                The vertices of the ConvexHull
            </summary>
        </member>
        <member name="F:TVGL.TVGLConvexHull.Faces">
            <summary>
                Gets the convex hull faces.
            </summary>
            <value>The convex hull faces.</value>
        </member>
        <member name="F:TVGL.TVGLConvexHull.Succeeded">
            <summary>
                Gets whether the convex hull creation was successful.
            </summary>
            <value>The convex hull faces.</value>
        </member>
        <member name="F:TVGL.TVGLConvexHull.Edges">
            <summary>
                Gets the convex hull edges.
            </summary>
            <value>The convex hull edges.</value>
        </member>
        <member name="T:TVGL.Vertex">
            <summary>
                The 3D vertex can connect to any number of faces and edges. It inherits from the
                MIConvexhull IVertex interface.
            </summary>
        </member>
        <member name="M:TVGL.Vertex.#ctor">
            <summary>
                Prevents a default instance of the <see cref="T:TVGL.Vertex" /> class from being created.
            </summary>
        </member>
        <member name="M:TVGL.Vertex.Copy">
            <summary>
                Copies this instance. Does not include reference lists.
            </summary>
            <returns>Vertex.</returns>
        </member>
        <member name="M:TVGL.Vertex.DefineCurvature">
            <summary>
                Defines vertex curvature
            </summary>
        </member>
        <member name="M:TVGL.Vertex.#ctor(System.Double[],System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Vertex" /> class.
            </summary>
            <param name="position">The position.</param>
            <param name="indexInListOfVertices">The index in list of vertices.</param>
        </member>
        <member name="M:TVGL.Vertex.#ctor(System.Double[])">
            <summary>
                Initializes a new instance of the <see cref="T:TVGL.Vertex" /> class.
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="P:TVGL.Vertex.Position">
            <summary>
                Gets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:TVGL.Vertex.X">
            <summary>
                Gets the x.
            </summary>
            <value>The x.</value>
        </member>
        <member name="P:TVGL.Vertex.Y">
            <summary>
                Gets the y.
            </summary>
            <value>The y.</value>
        </member>
        <member name="P:TVGL.Vertex.Z">
            <summary>
                Gets the z.
            </summary>
            <value>The z.</value>
        </member>
        <member name="P:TVGL.Vertex.Edges">
            <summary>
                Gets the edges.
            </summary>
            <value>The edges.</value>
        </member>
        <member name="P:TVGL.Vertex.Faces">
            <summary>
                Gets the faces.
            </summary>
            <value>The faces.</value>
        </member>
        <member name="P:TVGL.Vertex.ReferenceIndex">
            <summary>
                Gets or sets an arbitrary ReferenceIndex to track vertex
            </summary>
            <value>The reference index.</value>
        </member>
        <member name="T:TVGL.Message">
            <summary>
                Class Message.
            </summary>
        </member>
        <member name="F:TVGL.Message.Verbosity">
            <summary>
                The verbosity sets how much is reported from the TVGL routines.
            </summary>
        </member>
        <member name="M:TVGL.Message.output(System.Object,System.Int32)">
            <summary>
                Calling Message.output will output the string, message, to the
                Console (a Debug message) but ONLY if the verbosity (see
                below) is greater than or equal to your specified limit for this message.
                the verbosity limit must be 0, 1, 2, 3, or 4.
            </summary>
            <param name="message">The message.</param>
            <param name="verbosityLimit">The verbosity limit.</param>
            <returns>Boolean.</returns>
        </member>
        <member name="M:TVGL.Message.output(System.Object[])">
            <summary>
                Outputs the one item of the specified list corresponding to the particular verbosity.
            </summary>
            <param name="list">The list.</param>
            <returns>Boolean.</returns>
        </member>
        <member name="T:TVGL.VerbosityLevels">
            <summary>
                Setting the Verbosity to one of these values changes the amount of output
                send to the Debug Listener. Lower values may speed up search
            </summary>
        </member>
        <member name="F:TVGL.VerbosityLevels.OnlyCritical">
            <summary>
                The only critical
            </summary>
        </member>
        <member name="F:TVGL.VerbosityLevels.Low">
            <summary>
                The low
            </summary>
        </member>
        <member name="F:TVGL.VerbosityLevels.BelowNormal">
            <summary>
                The below normal
            </summary>
        </member>
        <member name="F:TVGL.VerbosityLevels.Normal">
            <summary>
                The normal
            </summary>
        </member>
        <member name="F:TVGL.VerbosityLevels.AboveNormal">
            <summary>
                The above normal
            </summary>
        </member>
        <member name="F:TVGL.VerbosityLevels.Everything">
            <summary>
                The everything
            </summary>
        </member>
    </members>
</doc>
