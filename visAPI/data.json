{
    "project": {},
    "files": {
        "workspace\\templates\\datatables.js": {
            "name": "workspace\\templates\\datatables.js",
            "modules": {},
            "classes": {
                "": 1,
                "DataTable.Api": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "workspace\\templates\\dirConScript.js": {
            "name": "workspace\\templates\\dirConScript.js",
            "modules": {},
            "classes": {},
            "fors": {
                "directionConfirmGlobal": 1
            },
            "namespaces": {}
        },
        "workspace\\templates\\jquery.js": {
            "name": "workspace\\templates\\jquery.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "workspace\\templates\\jsstl.js": {
            "name": "workspace\\templates\\jsstl.js",
            "modules": {},
            "classes": {},
            "fors": {
                "renderGlobal": 1
            },
            "namespaces": {}
        },
        "workspace\\templates\\pageBaseScript.js": {
            "name": "workspace\\templates\\pageBaseScript.js",
            "modules": {},
            "classes": {},
            "fors": {
                "renderGlobal": 1,
                "partTableGlobal": 1
            },
            "namespaces": {}
        },
        "workspace\\templates\\partPropScript.js": {
            "name": "workspace\\templates\\partPropScript.js",
            "modules": {},
            "classes": {},
            "fors": {
                "partTableGlobal": 1,
                "directionConfirmGlobal": 1
            },
            "namespaces": {}
        },
        "workspace\\templates\\partRender.js": {
            "name": "workspace\\templates\\partRender.js",
            "modules": {},
            "classes": {},
            "fors": {
                "renderGlobal": 1
            },
            "namespaces": {}
        },
        "workspace\\templates\\renderScript.js": {
            "name": "workspace\\templates\\renderScript.js",
            "modules": {},
            "classes": {
                "renderGlobal": 1
            },
            "fors": {
                "renderGlobal": 1
            },
            "namespaces": {}
        },
        "workspace\\templates\\treequence.js": {
            "name": "workspace\\templates\\treequence.js",
            "modules": {},
            "classes": {},
            "fors": {
                "renderGlobal": 1
            },
            "namespaces": {}
        },
        "workspace\\templates\\upload.js": {
            "name": "workspace\\templates\\upload.js",
            "modules": {},
            "classes": {},
            "fors": {
                "renderGlobal": 1
            },
            "namespaces": {}
        },
        "workspace\\templates\\uploadScript.js": {
            "name": "workspace\\templates\\uploadScript.js",
            "modules": {},
            "classes": {},
            "fors": {
                "renderGlobal": 1
            },
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "": {
            "file": "workspace\\templates\\datatables.js",
            "line": 74,
            "description": "DataTables is a plug-in for the jQuery Javascript library. It is a highly\nflexible tool, based upon the foundations of progressive enhancement,\nwhich will add advanced interaction controls to any HTML table. For a\nfull list of features please refer to\n[DataTables.net](href=\"http://datatables.net).\n\nNote that the `DataTable` object is not a global variable but is aliased\nto `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may\nbe  accessed.",
            "params": [
                {
                    "name": "init",
                    "description": "Configuration object for DataTables. Options\n   are defined by {@link DataTable.defaults}",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                }
            ],
            "requires": [
                "jQuery 1.7+"
            ],
            "example": [
                "\n   // Basic initialisation\n   $(document).ready( function {\n     $('#example').dataTable();\n   } );",
                "\n   // Initialisation with configuration options - in this case, disable\n   // pagination and sorting.\n   $(document).ready( function {\n     $('#example').dataTable( {\n       \"paginate\": false,\n       \"sort\": false\n     } );\n   } );"
            ]
        },
        "DataTable.Api": {
            "name": "DataTable.Api",
            "shortname": "DataTable.Api",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "workspace\\templates\\datatables.js",
            "line": 6826,
            "description": "DataTables API class - used to control and interface with  one or more\nDataTables enhanced tables.\n\nThe API class is heavily based on jQuery, presenting a chainable interface\nthat you can use to interact with tables. Each instance of the API class has\na \"context\" - i.e. the tables that it will operate on. This could be a single\ntable, all tables on a page or a sub-set thereof.\n\nAdditionally the API is designed to allow you to easily work with the data in\nthe tables, retrieving and manipulating it as required. This is done by\npresenting the API class as an array like interface. The contents of the\narray depend upon the actions requested by each method (for example\n`rows().nodes()` will return an array of nodes, while `rows().data()` will\nreturn an array of objects or arrays depending upon your table's\nconfiguration). The API object has a number of array like methods (`push`,\n`pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,\n`unique` etc) to assist your working with the data held in a table.\n\nMost methods (those which return an Api instance) are chainable, which means\nthe return from a method call also has all of the methods available that the\ntop level object had. For example, these two calls are equivalent:\n\n    // Not chained\n    api.row.add( {...} );\n    api.draw();\n\n    // Chained\n    api.row.add( {...} ).draw();",
            "params": [
                {
                    "name": "context",
                    "description": "DataTable identifier. This is\n  used to define which DataTables enhanced tables this API will operate on.\n  Can be one of:\n\n  * `string` - jQuery selector. Any DataTables' matching the given selector\n    with be found and used.\n  * `node` - `TABLE` node which has already been formed into a DataTable.\n  * `jQuery` - A jQuery object of `TABLE` nodes.\n  * `object` - DataTables settings object",
                    "type": "Array|object|string|jQuery"
                },
                {
                    "name": "data",
                    "description": "Data to initialise the Api instance with.",
                    "type": "Array",
                    "optional": true
                }
            ],
            "example": [
                "\n  // Direct initialisation during DataTables construction\n  var api = $('#example').DataTable();",
                "\n  // Initialisation using a DataTables jQuery object\n  var api = $('#example').dataTable().api();",
                "\n  // Initialisation as a constructor\n  var api = new $.fn.DataTable.Api( 'table.dataTable' );"
            ]
        },
        "directionConfirmGlobal": {
            "name": "directionConfirmGlobal",
            "shortname": "directionConfirmGlobal",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": ""
        },
        "renderGlobal": {
            "name": "renderGlobal",
            "shortname": "renderGlobal",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "workspace\\templates\\renderScript.js",
            "line": 23,
            "description": "Class containing all the methods used in the 3d visual assembly",
            "static": 1
        },
        "partTableGlobal": {
            "name": "partTableGlobal",
            "shortname": "partTableGlobal",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": ""
        }
    },
    "elements": {
        "inputState": {
            "name": "inputState",
            "attributes": [],
            "file": "workspace\\templates\\pageBaseScript.js",
            "line": 69,
            "description": "Contains a representation of the last keyboard events reported by the\n web page for each given key that acts as input for manipulating the\n visulization: 'W','A','S','D','R','F', and the 'Space' key",
            "return": {
                "description": "",
                "type": "Void"
            }
        }
    },
    "classitems": [
        {
            "file": "jquery.dataTables.js",
            "line": 17,
            "summary": "DataTables",
            "description": "Paginate, search and order HTML tables",
            "version": "1.10.16",
            "author": "SpryMedia Ltd",
            "contact": "www.datatables.net",
            "copyright": "Copyright 2008-2017 SpryMedia Ltd.\n\nThis source file is free software, available under the following license:\n  MIT license - http://datatables.net/license\n\nThis source file is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\nor FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\n\nFor details please refer to: http://www.datatables.net",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 108,
            "description": "Perform a jQuery selector action on the table's TR elements (from the tbody) and\nreturn the resulting jQuery object.",
            "params": [
                {
                    "name": "sSelector",
                    "description": "jQuery selector or node collection to act on",
                    "type": "String|node|jQuery"
                },
                {
                    "name": "oOpts",
                    "description": "Optional parameters for modifying the rows to be included",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "filter",
                            "description": "Select TR elements that meet the current filter\n   criterion (\"applied\") or all TR elements (i.e. no filter).",
                            "type": "String",
                            "optional": true,
                            "optdefault": "none"
                        },
                        {
                            "name": "order",
                            "description": "Order of the TR elements in the processed array.\n   Can be either 'current', whereby the current sorting of the table is used, or\n   'original' whereby the original order the data was read into the table is used.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "current"
                        },
                        {
                            "name": "page",
                            "description": "Limit the selection to the currently displayed page\n   (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\n   'current' and filter is 'applied', regardless of what they might be given as.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "all"
                        }
                    ]
                }
            ],
            "return": {
                "description": "jQuery object, filtered by the given selector.",
                "type": "Object"
            },
            "dtopt": "API",
            "deprecated": true,
            "deprecationMessage": "Since v1.10",
            "example": [
                "\n   $(document).ready(function() {\n     var oTable = $('#example').dataTable();\n\n     // Highlight every second row\n     oTable.$('tr:odd').css('backgroundColor', 'blue');\n   } );",
                "\n   $(document).ready(function() {\n     var oTable = $('#example').dataTable();\n\n     // Filter to rows with 'Webkit' in them, add a background colour and then\n     // remove the filter, thus highlighting the 'Webkit' rows only.\n     oTable.fnFilter('Webkit');\n     oTable.$('tr', {\"search\": \"applied\"}).css('backgroundColor', 'blue');\n     oTable.fnFilter('');\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 150,
            "description": "Almost identical to $ in operation, but in this case returns the data for the matched\nrows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes\nrather than any descendants, so the data can be obtained for the row/cell. If matching\nrows are found, the data returned is the original data array/object that was used to\ncreate the row (or a generated array if from a DOM source).\n\nThis method is often useful in-combination with $ where both functions are given the\nsame parameters and the array indexes will match identically.",
            "params": [
                {
                    "name": "sSelector",
                    "description": "jQuery selector or node collection to act on",
                    "type": "String|node|jQuery"
                },
                {
                    "name": "oOpts",
                    "description": "Optional parameters for modifying the rows to be included",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "filter",
                            "description": "Select elements that meet the current filter\n   criterion (\"applied\") or all elements (i.e. no filter).",
                            "type": "String",
                            "optional": true,
                            "optdefault": "none"
                        },
                        {
                            "name": "order",
                            "description": "Order of the data in the processed array.\n   Can be either 'current', whereby the current sorting of the table is used, or\n   'original' whereby the original order the data was read into the table is used.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "current"
                        },
                        {
                            "name": "page",
                            "description": "Limit the selection to the currently displayed page\n   (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\n   'current' and filter is 'applied', regardless of what they might be given as.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "all"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Data for the matched elements. If any elements, as a result of the\n   selector, were not TR, TD or TH elements in the DataTable, they will have a null\n   entry in the array.",
                "type": "Array"
            },
            "dtopt": "API",
            "deprecated": true,
            "deprecationMessage": "Since v1.10",
            "example": [
                "\n   $(document).ready(function() {\n     var oTable = $('#example').dataTable();\n\n     // Get the data from the first row in the table\n     var data = oTable._('tr:first');\n\n     // Do something useful with the data\n     alert( \"First cell is: \"+data[0] );\n   } );",
                "\n   $(document).ready(function() {\n     var oTable = $('#example').dataTable();\n\n     // Filter to 'Webkit' and get all data for\n     oTable.fnFilter('Webkit');\n     var data = oTable._('tr', {\"search\": \"applied\"});\n\n     // Do something with the data\n     alert( data.length+\" rows matched the search\" );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 204,
            "description": "Create a DataTables Api instance, with the currently selected tables for\nthe Api's context.",
            "params": [
                {
                    "name": "traditional",
                    "description": "Set the API instance's context to be\n  only the table referred to by the `DataTable.ext.iApiIndex` option, as was\n  used in the API presented by DataTables 1.9- (i.e. the traditional mode),\n  or if all tables captured in the jQuery object should be used.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "",
                "type": "DataTables.Api"
            },
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 223,
            "description": "Add a single new row or multiple rows of data to the table. Please note\nthat this is suitable for client-side processing only - if you are using\nserver-side processing (i.e. \"bServerSide\": true), then to add data, you\nmust add it to the data source, i.e. the server-side, through an Ajax call.",
            "params": [
                {
                    "name": "data",
                    "description": "The data to be added to the table. This can be:\n   <ul>\n     <li>1D array of data - add a single row with the data provided</li>\n     <li>2D array of arrays - add multiple rows in a single call</li>\n     <li>object - data object when using <i>mData</i></li>\n     <li>array of objects - multiple data objects when using <i>mData</i></li>\n   </ul>",
                    "type": "Array|object"
                },
                {
                    "name": "redraw",
                    "description": "redraw the table or not",
                    "type": "Bool",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "An array of integers, representing the list of indexes in\n   <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to\n   the table.",
                "type": "Array"
            },
            "dtopt": "API",
            "deprecated": true,
            "deprecationMessage": "Since v1.10",
            "example": [
                "\n   // Global var for counter\n   var giCount = 2;\n\n   $(document).ready(function() {\n     $('#example').dataTable();\n   } );\n\n   function fnClickAddRow() {\n     $('#example').dataTable().fnAddData( [\n       giCount+\".1\",\n       giCount+\".2\",\n       giCount+\".3\",\n       giCount+\".4\" ]\n     );\n\n     giCount++;\n   }"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 278,
            "description": "This function will make DataTables recalculate the column sizes, based on the data\ncontained in the table and the sizes applied to the columns (in the DOM, CSS or\nthrough the sWidth parameter). This can be useful when the width of the table's\nparent element changes (for example a window resize).",
            "params": [
                {
                    "name": "bRedraw",
                    "description": "Redraw the table or not, you will typically want to",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "dtopt": "API",
            "deprecated": true,
            "deprecationMessage": "Since v1.10",
            "example": [
                "\n   $(document).ready(function() {\n     var oTable = $('#example').dataTable( {\n       \"sScrollY\": \"200px\",\n       \"bPaginate\": false\n     } );\n\n     $(window).on('resize', function () {\n       oTable.fnAdjustColumnSizing();\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 315,
            "description": "Quickly and simply clear a table",
            "params": [
                {
                    "name": "bRedraw",
                    "description": "redraw the table or not",
                    "type": "Bool",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "dtopt": "API",
            "deprecated": true,
            "deprecationMessage": "Since v1.10",
            "example": [
                "\n   $(document).ready(function() {\n     var oTable = $('#example').dataTable();\n\n     // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)\n     oTable.fnClearTable();\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 339,
            "description": "The exact opposite of 'opening' a row, this function will close any rows which\nare currently 'open'.",
            "params": [
                {
                    "name": "nTr",
                    "description": "the table row to 'close'",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "0 on success, or 1 if failed (can't find the row)",
                "type": "Int"
            },
            "dtopt": "API",
            "deprecated": true,
            "deprecationMessage": "Since v1.10",
            "example": [
                "\n   $(document).ready(function() {\n     var oTable;\n\n     // 'open' an information row when a row is clicked on\n     $('#example tbody tr').click( function () {\n       if ( oTable.fnIsOpen(this) ) {\n         oTable.fnClose( this );\n       } else {\n         oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n       }\n     } );\n\n     oTable = $('#example').dataTable();\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 369,
            "description": "Remove a row for the table",
            "params": [
                {
                    "name": "target",
                    "description": "The index of the row from aoData to be deleted, or\n   the TR element you want to delete",
                    "type": "Mixed"
                },
                {
                    "name": "callBack",
                    "description": "Callback function",
                    "type": "Function|null",
                    "optional": true
                },
                {
                    "name": "redraw",
                    "description": "Redraw the table or not",
                    "type": "Bool",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "The row that was deleted",
                "type": "Array"
            },
            "dtopt": "API",
            "deprecated": true,
            "deprecationMessage": "Since v1.10",
            "example": [
                "\n   $(document).ready(function() {\n     var oTable = $('#example').dataTable();\n\n     // Immediately remove the first row\n     oTable.fnDeleteRow( 0 );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 408,
            "description": "Restore the table to it's original state in the DOM by removing all of DataTables\nenhancements, alterations to the DOM structure of the table and event listeners.",
            "params": [
                {
                    "name": "remove",
                    "description": "Completely remove the table from the DOM",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "dtopt": "API",
            "deprecated": true,
            "deprecationMessage": "Since v1.10",
            "example": [
                "\n   $(document).ready(function() {\n     // This example is fairly pointless in reality, but shows how fnDestroy can be used\n     var oTable = $('#example').dataTable();\n     oTable.fnDestroy();\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 428,
            "description": "Redraw the table",
            "params": [
                {
                    "name": "complete",
                    "description": "Re-filter and resort (if enabled) the table before the draw.",
                    "type": "Bool",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "dtopt": "API",
            "deprecated": true,
            "deprecationMessage": "Since v1.10",
            "example": [
                "\n   $(document).ready(function() {\n     var oTable = $('#example').dataTable();\n\n     // Re-draw the table - you wouldn't want to do it here, but it's an example :-)\n     oTable.fnDraw();\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 450,
            "description": "Filter the input based on data",
            "params": [
                {
                    "name": "sInput",
                    "description": "String to filter the table on",
                    "type": "String"
                },
                {
                    "name": "iColumn",
                    "description": "Column to limit filtering to",
                    "type": "Int|null",
                    "optional": true
                },
                {
                    "name": "bRegex",
                    "description": "Treat as regular expression or not",
                    "type": "Bool",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "bSmart",
                    "description": "Perform smart filtering or not",
                    "type": "Bool",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "bShowGlobal",
                    "description": "Show the input global filter in it's input box(es)",
                    "type": "Bool",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "bCaseInsensitive",
                    "description": "Do case-insensitive matching (true) or not (false)",
                    "type": "Bool",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "dtopt": "API",
            "deprecated": true,
            "deprecationMessage": "Since v1.10",
            "example": [
                "\n   $(document).ready(function() {\n     var oTable = $('#example').dataTable();\n\n     // Sometime later - filter...\n     oTable.fnFilter( 'test string' );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 484,
            "description": "Get the data for the whole table, an individual row or an individual cell based on the\nprovided parameters.",
            "params": [
                {
                    "name": "src",
                    "description": "A TR row node, TD/TH cell node or an integer. If given as\n   a TR node then the data source for the whole row will be returned. If given as a\n   TD/TH cell node then iCol will be automatically calculated and the data for the\n   cell returned. If given as an integer, then this is treated as the aoData internal\n   data index for the row (see fnGetPosition) and the data for that row used.",
                    "type": "Int|node",
                    "optional": true
                },
                {
                    "name": "col",
                    "description": "Optional column index that you want the data of.",
                    "type": "Int",
                    "optional": true
                }
            ],
            "return": {
                "description": "If mRow is undefined, then the data for all rows is\n   returned. If mRow is defined, just data for that row, and is iCol is\n   defined, only data for the designated cell is returned.",
                "type": "Array|object|string"
            },
            "dtopt": "API",
            "deprecated": true,
            "deprecationMessage": "Since v1.10",
            "example": [
                "\n   // Row data\n   $(document).ready(function() {\n     oTable = $('#example').dataTable();\n\n     oTable.$('tr').click( function () {\n       var data = oTable.fnGetData( this );\n       // ... do something with the array / object of data for the row\n     } );\n   } );",
                "\n   // Individual cell data\n   $(document).ready(function() {\n     oTable = $('#example').dataTable();\n\n     oTable.$('td').click( function () {\n       var sData = oTable.fnGetData( this );\n       alert( 'The cell clicked on had the value of '+sData );\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 537,
            "description": "Get an array of the TR nodes that are used in the table's body. Note that you will\ntypically want to use the '$' API method in preference to this as it is more\nflexible.",
            "params": [
                {
                    "name": "iRow",
                    "description": "Optional row index for the TR element you want",
                    "type": "Int",
                    "optional": true
                }
            ],
            "return": {
                "description": "If iRow is undefined, returns an array of all TR elements\n   in the table's body, or iRow is defined, just the TR element requested.",
                "type": "Array|node"
            },
            "dtopt": "API",
            "deprecated": true,
            "deprecationMessage": "Since v1.10",
            "example": [
                "\n   $(document).ready(function() {\n     var oTable = $('#example').dataTable();\n\n     // Get the nodes from the table\n     var nNodes = oTable.fnGetNodes( );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 565,
            "description": "Get the array indexes of a particular cell from it's DOM element\nand column index including hidden columns",
            "params": [
                {
                    "name": "node",
                    "description": "this can either be a TR, TD or TH in the table's body",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "If nNode is given as a TR, then a single index is returned, or\n   if given as a cell, an array of [row index, column index (visible),\n   column index (all)] is given.",
                "type": "Int"
            },
            "dtopt": "API",
            "deprecated": true,
            "deprecationMessage": "Since v1.10",
            "example": [
                "\n   $(document).ready(function() {\n     $('#example tbody td').click( function () {\n       // Get the position of the current data from the node\n       var aPos = oTable.fnGetPosition( this );\n\n       // Get the data array for this row\n       var aData = oTable.fnGetData( aPos[0] );\n\n       // Update the data array and return the value\n       aData[ aPos[1] ] = 'clicked';\n       this.innerHTML = 'clicked';\n     } );\n\n     // Init DataTables\n     oTable = $('#example').dataTable();\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 614,
            "description": "Check to see if a row is 'open' or not.",
            "params": [
                {
                    "name": "nTr",
                    "description": "the table row to check",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "true if the row is currently open, false otherwise",
                "type": "Boolean"
            },
            "dtopt": "API",
            "deprecated": true,
            "deprecationMessage": "Since v1.10",
            "example": [
                "\n   $(document).ready(function() {\n     var oTable;\n\n     // 'open' an information row when a row is clicked on\n     $('#example tbody tr').click( function () {\n       if ( oTable.fnIsOpen(this) ) {\n         oTable.fnClose( this );\n       } else {\n         oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n       }\n     } );\n\n     oTable = $('#example').dataTable();\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 643,
            "description": "This function will place a new row directly after a row which is currently\non display on the page, with the HTML contents that is passed into the\nfunction. This can be used, for example, to ask for confirmation that a\nparticular record should be deleted.",
            "params": [
                {
                    "name": "nTr",
                    "description": "The table row to 'open'",
                    "type": "Node"
                },
                {
                    "name": "mHtml",
                    "description": "The HTML to put into the row",
                    "type": "String|node|jQuery"
                },
                {
                    "name": "sClass",
                    "description": "Class to give the new TD cell",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The row opened. Note that if the table row passed in as the\n   first parameter, is not found in the table, this method will silently\n   return.",
                "type": "Node"
            },
            "dtopt": "API",
            "deprecated": true,
            "deprecationMessage": "Since v1.10",
            "example": [
                "\n   $(document).ready(function() {\n     var oTable;\n\n     // 'open' an information row when a row is clicked on\n     $('#example tbody tr').click( function () {\n       if ( oTable.fnIsOpen(this) ) {\n         oTable.fnClose( this );\n       } else {\n         oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n       }\n     } );\n\n     oTable = $('#example').dataTable();\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 683,
            "description": "Change the pagination - provides the internal logic for pagination in a simple API\nfunction. With this function you can have a DataTables table go to the next,\nprevious, first or last pages.",
            "params": [
                {
                    "name": "mAction",
                    "description": "Paging action to take: \"first\", \"previous\", \"next\" or \"last\"\n   or page number to jump to (integer), note that page 0 is the first page.",
                    "type": "String|int"
                },
                {
                    "name": "bRedraw",
                    "description": "Redraw the table or not",
                    "type": "Bool",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "dtopt": "API",
            "deprecated": true,
            "deprecationMessage": "Since v1.10",
            "example": [
                "\n   $(document).ready(function() {\n     var oTable = $('#example').dataTable();\n     oTable.fnPageChange( 'next' );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 709,
            "description": "Show a particular column",
            "params": [
                {
                    "name": "iCol",
                    "description": "The column whose display should be changed",
                    "type": "Int"
                },
                {
                    "name": "bShow",
                    "description": "Show (true) or hide (false) the column",
                    "type": "Bool"
                },
                {
                    "name": "bRedraw",
                    "description": "Redraw the table or not",
                    "type": "Bool",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "dtopt": "API",
            "deprecated": true,
            "deprecationMessage": "Since v1.10",
            "example": [
                "\n   $(document).ready(function() {\n     var oTable = $('#example').dataTable();\n\n     // Hide the second column after initialisation\n     oTable.fnSetColumnVis( 1, false );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 735,
            "description": "Get the settings for a particular table for external manipulation",
            "return": {
                "description": "DataTables settings object. See\n   {@link DataTable.models.oSettings}",
                "type": "Object"
            },
            "dtopt": "API",
            "deprecated": true,
            "deprecationMessage": "Since v1.10",
            "example": [
                "\n   $(document).ready(function() {\n     var oTable = $('#example').dataTable();\n     var oSettings = oTable.fnSettings();\n\n     // Show an example parameter from the settings\n     alert( oSettings._iDisplayStart );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 757,
            "description": "Sort the table by a particular column",
            "params": [
                {
                    "name": "iCol",
                    "description": "the data index to sort on. Note that this will not match the\n   'display index' if you have hidden data entries",
                    "type": "Int"
                }
            ],
            "dtopt": "API",
            "deprecated": true,
            "deprecationMessage": "Since v1.10",
            "example": [
                "\n   $(document).ready(function() {\n     var oTable = $('#example').dataTable();\n\n     // Sort immediately with columns 0 and 1\n     oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 778,
            "description": "Attach a sort listener to an element for a given column",
            "params": [
                {
                    "name": "nNode",
                    "description": "the element to attach the sort listener to",
                    "type": "Node"
                },
                {
                    "name": "iColumn",
                    "description": "the column that a click on this node will sort on",
                    "type": "Int"
                },
                {
                    "name": "fnCallback",
                    "description": "callback function when sort is run",
                    "type": "Function",
                    "optional": true
                }
            ],
            "dtopt": "API",
            "deprecated": true,
            "deprecationMessage": "Since v1.10",
            "example": [
                "\n   $(document).ready(function() {\n     var oTable = $('#example').dataTable();\n\n     // Sort on column 1, when 'sorter' is clicked on\n     oTable.fnSortListener( document.getElementById('sorter'), 1 );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 800,
            "description": "Update a table cell or row - this method will accept either a single value to\nupdate the cell with, an array of values with one element for each column or\nan object in the same format as the original data source. The function is\nself-referencing in order to make the multi column updates easier.",
            "params": [
                {
                    "name": "mData",
                    "description": "Data to update the cell/row with",
                    "type": "Object|array|string"
                },
                {
                    "name": "mRow",
                    "description": "TR element you want to update or the aoData index",
                    "type": "Node|int"
                },
                {
                    "name": "iColumn",
                    "description": "The column to update, give as null or undefined to\n   update a whole row.",
                    "type": "Int",
                    "optional": true
                },
                {
                    "name": "bRedraw",
                    "description": "Redraw the table or not",
                    "type": "Bool",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "bAction",
                    "description": "Perform pre-draw actions or not",
                    "type": "Bool",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "0 on success, 1 on error",
                "type": "Int"
            },
            "dtopt": "API",
            "deprecated": true,
            "deprecationMessage": "Since v1.10",
            "example": [
                "\n   $(document).ready(function() {\n     var oTable = $('#example').dataTable();\n     oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell\n     oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 844,
            "description": "Provide a common method for plug-ins to check the version of DataTables being used, in order\nto ensure compatibility.",
            "params": [
                {
                    "name": "sVersion",
                    "description": "Version string to check for, in the format \"X.Y.Z\". Note that the\n   formats \"X\" and \"X.Y\" are also acceptable.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if this version of DataTables is greater or equal to the required\n   version, or false if this version of DataTales is not suitable",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "",
            "dtopt": "API",
            "deprecated": true,
            "deprecationMessage": "Since v1.10",
            "example": [
                "\n   $(document).ready(function() {\n     var oTable = $('#example').dataTable();\n     alert( oTable.fnVersionCheck( '1.9.0' ) );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 1530,
            "description": "Determine if all values in the array are unique. This means we can short\ncut the _unique method at the cost of a single loop. A sorted array is used\nto easily check the values.",
            "params": [
                {
                    "name": "src",
                    "description": "Source array",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "true if all unique, false otherwise",
                "type": "Boolean"
            },
            "ignore": "",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 1559,
            "description": "Find the unique elements in a source array.",
            "params": [
                {
                    "name": "src",
                    "description": "Source array",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Array of unique items",
                "type": "Array"
            },
            "ignore": "",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 1599,
            "description": "DataTables utility methods\n\nThis namespace provides helper methods that DataTables uses internally to\ncreate a DataTable, but which are not exclusively used only for DataTables.\nThese methods can be used by extension authors to save the duplication of\ncode.",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 1610,
            "description": "Throttle the calls to a function. Arguments and context are maintained\nfor the throttled function.",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to be called",
                    "type": "Function"
                },
                {
                    "name": "freq",
                    "description": "Call frequency in mS",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "Wrapped function",
                "type": "Function"
            },
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 1646,
            "description": "Escape a string such that it can be used in a regular expression",
            "params": [
                {
                    "name": "val",
                    "description": "string to escape",
                    "type": "String"
                }
            ],
            "return": {
                "description": "escaped string",
                "type": "String"
            },
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 1659,
            "description": "Create a mapping object that allows camel case parameters to be looked up\nfor their Hungarian counterparts. The mapping is stored in a private\nparameter called `_hungarianMap` which can be accessed on the source object.",
            "params": [
                {
                    "name": "o",
                    "description": "",
                    "type": "Object"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 1693,
            "description": "Convert from camel case parameters to Hungarian, based on a Hungarian map\ncreated by _fnHungarianMap.",
            "params": [
                {
                    "name": "src",
                    "description": "The model object which holds all parameters that can be\n   mapped.",
                    "type": "Object"
                },
                {
                    "name": "user",
                    "description": "The object to convert from camel case to Hungarian.",
                    "type": "Object"
                },
                {
                    "name": "force",
                    "description": "When set to `true`, properties which already have a\n   Hungarian value in the `user` object will be overwritten. Otherwise they\n   won't be.",
                    "type": "Boolean"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 1736,
            "description": "Language compatibility - when certain options are given, and others aren't, we\nneed to duplicate the values over, in order to provide backwards compatibility\nwith older language files.",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 1776,
            "description": "Map one parameter onto another",
            "params": [
                {
                    "name": "o",
                    "description": "Object to map",
                    "type": "Object"
                },
                {
                    "name": "knew",
                    "description": "The new parameter name",
                    "type": "*"
                },
                {
                    "name": "old",
                    "description": "The old parameter name",
                    "type": "*"
                }
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 1789,
            "description": "Provide backwards compatibility for the main DT options. Note that the new\noptions are mapped onto the old parameters, so this is an external interface\nchange only.",
            "params": [
                {
                    "name": "init",
                    "description": "Object to map",
                    "type": "Object"
                }
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 1830,
            "description": "Provide backwards compatibility for column options. Note that the new options\nare mapped onto the old parameters, so this is an external interface change\nonly.",
            "params": [
                {
                    "name": "init",
                    "description": "Object to map",
                    "type": "Object"
                }
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 1851,
            "description": "Browser feature detection for capabilities, quirks",
            "params": [
                {
                    "name": "settings",
                    "description": "dataTables settings object",
                    "type": "Object"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 1930,
            "description": "Array.prototype reduce[Right] method, used for browsers which don't support\nJS 1.6. Done this way to reduce code size, since we iterate either way",
            "params": [
                {
                    "name": "settings",
                    "description": "dataTables settings object",
                    "type": "Object"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 1964,
            "description": "Add a column to the list used for the table with default values",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "nTh",
                    "description": "The th element for this column",
                    "type": "Node"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 1995,
            "description": "Apply options for a column",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "iCol",
                    "description": "column index to consider",
                    "type": "Int"
                },
                {
                    "name": "oOptions",
                    "description": "object with sType, bVisible and bSearchable etc",
                    "type": "Object"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 2127,
            "description": "Adjust the table column widths for new data. Note: you would probably want to\ndo a redraw after calling this function!",
            "params": [
                {
                    "name": "settings",
                    "description": "dataTables settings object",
                    "type": "Object"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 2157,
            "description": "Covert the index of a visible column to the index in the data array (take account\nof hidden columns)",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "iMatch",
                    "description": "Visible column index to lookup",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "i the data index",
                "type": "Int"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 2175,
            "description": "Covert the index of an index in the data array and convert it to the visible\n  column index (take account of hidden columns)",
            "params": [
                {
                    "name": "iMatch",
                    "description": "Column index to lookup",
                    "type": "Int"
                },
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "i the data index",
                "type": "Int"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 2192,
            "description": "Get the number of visible columns",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "i the number of visible columns",
                "type": "Int"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 2213,
            "description": "Get an array of column indexes that match a given property",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "sParam",
                    "description": "Parameter in aoColumns to look for - typically\n   bVisible or bSearchable",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Array of indexes with matched properties",
                "type": "Array"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 2235,
            "description": "Calculate the 'type' of a column",
            "params": [
                {
                    "name": "settings",
                    "description": "dataTables settings object",
                    "type": "Object"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 2300,
            "description": "Take the column definitions and static columns arrays and calculate how\nthey relate to column indexes. The callback function will then apply the\ndefinition found for a column to a suitable configuration object.",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "aoColDefs",
                    "description": "The aoColumnDefs array that is to be applied",
                    "type": "Array"
                },
                {
                    "name": "aoCols",
                    "description": "The aoColumns array that defines columns individually",
                    "type": "Array"
                },
                {
                    "name": "fn",
                    "description": "Callback function - takes two parameters, the calculated\n   column index and the definition for that column.",
                    "type": "Function"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 2378,
            "description": "Add a data array to the table, creating DOM node etc. This is the parallel to\n_fnGatherData, but for adding rows from a Javascript source, rather than a\nDOM source.",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "aData",
                    "description": "data array to be added",
                    "type": "Array"
                },
                {
                    "name": "nTr",
                    "description": "TR element to add to the table - optional. If not given,\n   DataTables will create a row automatically",
                    "type": "Node",
                    "optional": true
                },
                {
                    "name": "anTds",
                    "description": "Array of TD|TH elements for the row - must be given\n   if nTr is.",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": ">=0 if successful (index of new aoData entry), -1 if failed",
                "type": "Int"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 2431,
            "description": "Add one or more TR elements to the table. Generally we'd expect to\nuse this for reading data from a DOM sourced table, but it could be\nused for an TR element. Note that if a TR is given, it is used (i.e.\nit is not cloned).",
            "params": [
                {
                    "name": "settings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "trs",
                    "description": "The TR element(s) to add to the table",
                    "type": "Array|node|jQuery"
                }
            ],
            "return": {
                "description": "Array of indexes for the added rows",
                "type": "Array"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 2457,
            "description": "Take a TR element and convert it to an index in aoData",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "n",
                    "description": "the TR element to find",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "index if the node is found, null if not",
                "type": "Int"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 2470,
            "description": "Take a TD element and convert it into a column data index (not the visible index)",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "iRow",
                    "description": "The row number the TD/TH can be found in",
                    "type": "Int"
                },
                {
                    "name": "n",
                    "description": "The TD/TH element to find",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "index if the node is found, -1 if not",
                "type": "Int"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 2484,
            "description": "Get the data for a given cell from the internal cache, taking into account data mapping",
            "params": [
                {
                    "name": "settings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "rowIdx",
                    "description": "aoData row id",
                    "type": "Int"
                },
                {
                    "name": "colIdx",
                    "description": "Column index",
                    "type": "Int"
                },
                {
                    "name": "type",
                    "description": "data get type ('display', 'type' 'filter' 'sort')",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Cell data",
                "type": "*"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 2533,
            "description": "Set the value for a specific cell, into the internal data cache",
            "params": [
                {
                    "name": "settings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "rowIdx",
                    "description": "aoData row id",
                    "type": "Int"
                },
                {
                    "name": "colIdx",
                    "description": "Column index",
                    "type": "Int"
                },
                {
                    "name": "val",
                    "description": "Value to set",
                    "type": "*"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 2558,
            "description": "Split string on periods, taking into account escaped periods",
            "params": [
                {
                    "name": "str",
                    "description": "String to split",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Split string",
                "type": "Array"
            },
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 2571,
            "description": "Return a function that can be used to get data from a source object, taking\ninto account the ability to use nested objects as a source",
            "params": [
                {
                    "name": "mSource",
                    "description": "The data source for the object",
                    "type": "String|int|function"
                }
            ],
            "return": {
                "description": "Data get function",
                "type": "Function"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 2696,
            "description": "Return a function that can be used to set data from a source object, taking\ninto account the ability to use nested objects as a source",
            "params": [
                {
                    "name": "mSource",
                    "description": "The data source for the object",
                    "type": "String|int|function"
                }
            ],
            "return": {
                "description": "Data set function",
                "type": "Function"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 2816,
            "description": "Return an array with the full table data",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "array  aData Master data array",
                "type": "Array"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 2828,
            "description": "Nuke the table",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 2842,
            "description": "Take an array of integers (index array) and remove a target integer (value - not\nthe key!)",
            "params": [
                {
                    "name": "a",
                    "description": "Index array to target",
                    "type": "Array"
                },
                {
                    "name": "iTarget",
                    "description": "value to find",
                    "type": "Int"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 2872,
            "description": "Mark cached data as invalid such that a re-read of the data will occur when\nthe cached data is next requested. Also update from the data source object.",
            "params": [
                {
                    "name": "settings",
                    "description": "DataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "rowIdx",
                    "description": "Row index to invalidate",
                    "type": "Int"
                },
                {
                    "name": "src",
                    "description": "Source to invalidate from: undefined, 'auto', 'dom'\n    or 'data'",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "colIdx",
                    "description": "Column index to invalidate. If undefined the whole\n    row will be invalidated",
                    "type": "Int",
                    "optional": true
                }
            ],
            "memberof": "DataTable#oApi",
            "todo": [
                "For the modularisation of v1.11 this will need to become a callback",
                "so\n  the sort and filter methods can subscribe to it. That will required\n  initialisation options for sorting",
                "which is why it is not already baked in"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 2949,
            "description": "Build a data source object from an HTML row, reading the contents of the\ncells that are in the row.",
            "params": [
                {
                    "name": "settings",
                    "description": "DataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "TR",
                    "description": "element from which to read data or existing row\n  object from which to re-read the data from the cells",
                    "type": "Node|object"
                },
                {
                    "name": "colIdx",
                    "description": "Optional column index",
                    "type": "Int",
                    "optional": true
                },
                {
                    "name": "d",
                    "description": "Data source object. If `colIdx` is given then this\n  parameter should also be given and will be used to write the data into.\n  Only the column in question will be written",
                    "type": "Array|object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Object with two parameters: `data` the data read, in\n  document order, and `cells` and array of nodes (they can be useful to the\n  caller, so rather than needing a second traversal to get them, just return\n  them from here).",
                "type": "Object"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 3065,
            "description": "Create a new TR element (and it's TD children) for a row",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "iRow",
                    "description": "Row to consider",
                    "type": "Int"
                },
                {
                    "name": "nTrIn",
                    "description": "TR element to add to the table - optional. If not given,\n   DataTables will create a row automatically",
                    "type": "Node",
                    "optional": true
                },
                {
                    "name": "anTds",
                    "description": "Array of TD|TH elements for the row - must be given\n   if nTr is.",
                    "type": "Array",
                    "optional": true
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 3152,
            "description": "Add attributes to a row based on the special `DT_*` parameters in a data\nsource object.",
            "params": [
                {
                    "name": "settings",
                    "description": "DataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "DataTables",
                    "description": "row object for the row to be modified",
                    "type": "Object"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 3194,
            "description": "Create the HTML header for the table",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 3272,
            "description": "Draw the header (or footer) element based on the column visibility states. The\nmethodology here is to use the layout array from _fnDetectHeader, modified for\nthe instantaneous column visibility, to construct the new layout. The grid is\ntraversed over cell at a time in a rows x columns grid fashion, although each\ncell insert can cover multiple elements in the grid - which is tracks using the\naApplied array. Cell inserts in the grid will only occur where there isn't\nalready a cell in that position.",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "array",
                    "description": "aoSource Layout array from _fnDetectHeader",
                    "type": "Objects"
                },
                {
                    "name": "bIncludeHidden",
                    "description": "If true then include the hidden columns in the calc,",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 3378,
            "description": "Insert the required TR nodes into the table for display",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 3517,
            "description": "Redraw the table - taking account of the various features which are enabled",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "holdPosition",
                    "description": "Keep the current paging position. By default\n   the paging is reset to the first page",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 3557,
            "description": "Add the options to the page HTML for the table",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 3709,
            "description": "Use the DOM source to create up an array of header cells. The idea here is to\ncreate a layout grid (array) of rows x columns, which contains a reference\nto the cell that that point in the grid (regardless of col/rowspan), such that\nany column / row could be removed and the new grid constructed",
            "params": [
                {
                    "name": "array",
                    "description": "aLayout Array to store the calculated layout in",
                    "type": "Object"
                },
                {
                    "name": "nThead",
                    "description": "The header/footer element for the table",
                    "type": "Node"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 3785,
            "description": "Get an array of unique th elements, one for each column",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "nHeader",
                    "description": "automatically detect the layout from this node - optional",
                    "type": "Node"
                },
                {
                    "name": "aLayout",
                    "description": "thead/tfoot layout from _fnDetectHeader - optional",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array  aReturn list of unique th's",
                "type": "Node"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 3821,
            "description": "Create an Ajax call based on the table's settings, taking into account that\nparameters can have multiple forms, and backwards compatibility.",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "Data to send to the server, required by\n    DataTables - may be augmented by developer callbacks",
                    "type": "Array"
                },
                {
                    "name": "fn",
                    "description": "Callback function to run when data is obtained",
                    "type": "Function"
                }
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 3957,
            "description": "Update the table using an Ajax call",
            "params": [
                {
                    "name": "settings",
                    "description": "dataTables settings object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Block the table drawing or not",
                "type": "Boolean"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 3983,
            "description": "Build up the parameters in an object needed for a server-side processing\nrequest. Note that this is basically done twice, is different ways - a modern\nmethod which is used by default in DataTables 1.10 which uses objects and\narrays, or the 1.9- method with is name / value pairs. 1.9 method is used if\nthe sAjaxSource option is used in the initialisation, or the legacyAjax\noption is set.",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "block the table drawing or not",
                "type": "Bool"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 4091,
            "description": "Data the data from the server (nuking the old) and redraw the table",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "json",
                    "description": "json data return from the server.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "sEcho",
                            "description": "Tracking flag for DataTables to match requests",
                            "type": "String"
                        },
                        {
                            "name": "iTotalRecords",
                            "description": "Number of records in the data set, not accounting for filtering",
                            "type": "Int"
                        },
                        {
                            "name": "iTotalDisplayRecords",
                            "description": "Number of records in the data set, accounting for filtering",
                            "type": "Int"
                        },
                        {
                            "name": "aaData",
                            "description": "The data to display on this page",
                            "type": "Array"
                        },
                        {
                            "name": "sColumns",
                            "description": "Column ordering (sName, comma separated)",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 4144,
            "description": "Get the data from the JSON data source to use for drawing a table. Using\n`_fnGetObjectDataFn` allows the data to be sourced from a property of the\nsource object, or from a processing function.",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "json",
                    "description": "Data source object / array from the server",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Array of data to use",
                "type": "Array"
            },
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 4169,
            "description": "Generate the node required for filtering text",
            "return": {
                "description": "Filter control element",
                "type": "Node"
            },
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 4256,
            "description": "Filter the table using both the global filter and column based filtering",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "oSearch",
                    "description": "search information",
                    "type": "Object"
                },
                {
                    "name": "iForce",
                    "description": "force a research of the master array (1) or not (undefined or 0)",
                    "type": "Int",
                    "optional": true
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 4311,
            "description": "Apply custom filtering functions",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 4343,
            "description": "Filter the table on a per-column basis",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "sInput",
                    "description": "string to filter on",
                    "type": "String"
                },
                {
                    "name": "iColumn",
                    "description": "column to filter",
                    "type": "Int"
                },
                {
                    "name": "bRegex",
                    "description": "treat search string as a regular expression or not",
                    "type": "Bool"
                },
                {
                    "name": "bSmart",
                    "description": "use smart filtering or not",
                    "type": "Bool"
                },
                {
                    "name": "bCaseInsensitive",
                    "description": "Do case insenstive matching or not",
                    "type": "Bool"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 4376,
            "description": "Filter the data table based on user input and draw the table",
            "params": [
                {
                    "name": "settings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "input",
                    "description": "string to filter on",
                    "type": "String"
                },
                {
                    "name": "force",
                    "description": "optional - force a research of the master array (1) or not (undefined or 0)",
                    "type": "Int"
                },
                {
                    "name": "regex",
                    "description": "treat as a regular expression or not",
                    "type": "Bool"
                },
                {
                    "name": "smart",
                    "description": "perform smart filtering or not",
                    "type": "Bool"
                },
                {
                    "name": "caseInsensitive",
                    "description": "Do case insenstive matching or not",
                    "type": "Bool"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 4432,
            "description": "Build a regular expression object suitable for searching a table",
            "params": [
                {
                    "name": "sSearch",
                    "description": "string to search for",
                    "type": "String"
                },
                {
                    "name": "bRegex",
                    "description": "treat as a regular expression or not",
                    "type": "Bool"
                },
                {
                    "name": "bSmart",
                    "description": "perform smart filtering or not",
                    "type": "Bool"
                },
                {
                    "name": "bCaseInsensitive",
                    "description": "Do case insensitive matching or not",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "constructed object",
                "type": "RegExp"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 4471,
            "description": "Escape a string such that it can be used in a regular expression",
            "params": [
                {
                    "name": "sVal",
                    "description": "string to escape",
                    "type": "String"
                }
            ],
            "return": {
                "description": "escaped string",
                "type": "String"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 4549,
            "description": "Convert from the internal Hungarian notation to camelCase for external\ninteraction",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to convert",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Inverted object",
                "type": "Object"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 4568,
            "description": "Convert from camelCase notation to the internal Hungarian. We could use the\nHungarian convert function here, but this is cleaner",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to convert",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Inverted object",
                "type": "Object"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 4585,
            "description": "Generate the node required for the info display",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Information element",
                "type": "Node"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 4620,
            "description": "Update the information elements in the display",
            "params": [
                {
                    "name": "settings",
                    "description": "dataTables settings object",
                    "type": "Object"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 4685,
            "description": "Draw the table for the first time, adding all required features",
            "params": [
                {
                    "name": "settings",
                    "description": "dataTables settings object",
                    "type": "Object"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 4767,
            "description": "Draw the table for the first time, adding all required features",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "json",
                    "description": "JSON from the server that completed the table, if using Ajax source\n   with client-side processing (optional)",
                    "type": "Object",
                    "optional": true
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 4801,
            "description": "Generate the node required for user display length changing",
            "params": [
                {
                    "name": "settings",
                    "description": "dataTables settings object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Display length feature node",
                "type": "Node"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 4867,
            "description": "Generate the node required for default pagination",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Pagination feature node",
                "type": "Node"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 4925,
            "description": "Alter the display settings to change the page",
            "params": [
                {
                    "name": "settings",
                    "description": "DataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "action",
                    "description": "Paging action to take: \"first\", \"previous\",\n   \"next\" or \"last\" or page number to jump to (integer)",
                    "type": "String|int"
                },
                {
                    "name": "bool",
                    "description": "redraw Automatically draw the update or not",
                    "optional": true
                }
            ],
            "return": {
                "description": "true page has changed, false - no change",
                "type": "Bool"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 5001,
            "description": "Generate the node required for the processing node",
            "params": [
                {
                    "name": "settings",
                    "description": "dataTables settings object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Processing element",
                "type": "Node"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 5018,
            "description": "Display or hide the processing indicator",
            "params": [
                {
                    "name": "settings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "show",
                    "description": "Show the processing indicator (true) or not (false)",
                    "type": "Bool"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 5033,
            "description": "Add any control elements for the table - specifically scrolling",
            "params": [
                {
                    "name": "settings",
                    "description": "dataTables settings object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Node to add to the DOM",
                "type": "Node"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 5183,
            "description": "Update the header, footer and body tables for resizing - i.e. column\nalignment.\n\nWelcome to the most horrible function DataTables. The process that this\nfunction follows is basically:\n  1. Re-create the table inside the scrolling div\n  2. Take live measurements from the DOM\n  3. Apply the measurements to align the columns\n  4. Clean up",
            "params": [
                {
                    "name": "settings",
                    "description": "dataTables settings object",
                    "type": "Object"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 5468,
            "description": "Apply a given function to the display child nodes of an element array (typically\nTD children of TR rows",
            "params": [
                {
                    "name": "fn",
                    "description": "Method to apply to the objects",
                    "type": "Function"
                },
                {
                    "name": "array",
                    "description": "an1 List of elements to look through for display children",
                    "type": "Nodes"
                },
                {
                    "name": "array",
                    "description": "an2 Another list (identical structure to the first) - optional",
                    "type": "Nodes"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 5510,
            "description": "Calculate the width of columns for the table",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 5735,
            "description": "Throttle the calls to a function. Arguments and context are maintained for\nthe throttled function",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to be called",
                    "type": "Function"
                },
                {
                    "name": "freq",
                    "description": "call frequency in mS",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "200"
                }
            ],
            "return": {
                "description": "wrapped function",
                "type": "Function"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 5746,
            "description": "Convert a CSS unit width to pixels (e.g. 2em)",
            "params": [
                {
                    "name": "width",
                    "description": "width to be converted",
                    "type": "String"
                },
                {
                    "name": "parent",
                    "description": "parent to get the with for (required for relative widths) - optional",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "width in pixels",
                "type": "Int"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 5770,
            "description": "Get the widest node",
            "params": [
                {
                    "name": "settings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "colIdx",
                    "description": "column of interest",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "widest table node",
                "type": "Node"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 5791,
            "description": "Get the maximum strlen for each data column",
            "params": [
                {
                    "name": "settings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "colIdx",
                    "description": "column of interest",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "max string length for each column",
                "type": "String"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 5817,
            "description": "Append a CSS unit (only if required) to a string",
            "params": [
                {
                    "name": "value",
                    "description": "to css-ify",
                    "type": "String"
                }
            ],
            "return": {
                "description": "value with css unit",
                "type": "String"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 5909,
            "description": "Change the order of the table",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                }
            ],
            "memberof": "DataTable#oApi",
            "todo": [
                "This really needs split up!"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 6086,
            "description": "Function to run on user sort request",
            "params": [
                {
                    "name": "settings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "attachTo",
                    "description": "node to attach the handler to",
                    "type": "Node"
                },
                {
                    "name": "colIdx",
                    "description": "column sorting index",
                    "type": "Int"
                },
                {
                    "name": "append",
                    "description": "Append the requested sort to the existing\n   sort if true (i.e. multi-column sort)",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "callback",
                    "description": "callback function",
                    "type": "Function",
                    "optional": true
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 6172,
            "description": "Attach a sort handler (click) to a node",
            "params": [
                {
                    "name": "settings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "attachTo",
                    "description": "node to attach the handler to",
                    "type": "Node"
                },
                {
                    "name": "colIdx",
                    "description": "column sorting index",
                    "type": "Int"
                },
                {
                    "name": "callback",
                    "description": "callback function",
                    "type": "Function",
                    "optional": true
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 6212,
            "description": "Set the sorting classes on table's body, Note: it is safe to call this function\nwhen bSort and bSortClasses are false",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 6289,
            "description": "Save the state of a table",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 6323,
            "description": "Attempt to load a saved table state",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "oInit",
                    "description": "DataTables init object so we can override settings",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Callback to execute when the state has been loaded",
                    "type": "Function"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 6426,
            "description": "Return the settings object for a particular table",
            "params": [
                {
                    "name": "table",
                    "description": "table we are using as a dataTable",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "Settings object - or null if not found",
                "type": "Object"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 6443,
            "description": "Log an error message",
            "params": [
                {
                    "name": "settings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "level",
                    "description": "log error messages, or display them to the user",
                    "type": "Int"
                },
                {
                    "name": "msg",
                    "description": "error message",
                    "type": "String"
                },
                {
                    "name": "tn",
                    "description": "Technical note id to get more information about the error.",
                    "type": "Int"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 6486,
            "description": "See if a property is defined on one object, if so assign it to the other object",
            "params": [
                {
                    "name": "ret",
                    "description": "target object",
                    "type": "Object"
                },
                {
                    "name": "src",
                    "description": "source object",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "property",
                    "type": "String"
                },
                {
                    "name": "mappedName",
                    "description": "name to map too - optional, name used if not given",
                    "type": "String",
                    "optional": true
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 6519,
            "description": "Extend objects - very similar to jQuery.extend, but deep copy objects, and\nshallow copy arrays. The reason we need to do this, is that we don't want to\ndeep copy array init values (such as aaSorting) since the dev wouldn't be\nable to override them, but we do want to deep copy arrays.",
            "params": [
                {
                    "name": "out",
                    "description": "Object to extend",
                    "type": "Object"
                },
                {
                    "name": "extender",
                    "description": "Object from which the properties will be applied to\n     out",
                    "type": "Object"
                },
                {
                    "name": "breakRefs",
                    "description": "If true, then arrays will be sliced to take an\n     independent copy with the exception of the `data` or `aaData` parameters\n     if they are present. This is so you can pass in a collection to\n     DataTables and have that used as your data source without breaking the\n     references",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "out Reference, just for convenience - out === the return.",
                "type": "Object"
            },
            "memberof": "DataTable#oApi",
            "todo": [
                "This doesn't take account of arrays inside the deep copied objects."
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 6563,
            "description": "Bind an event handers to allow a click or return key to activate the callback.\nThis is good for accessibility since a return on the keyboard will have the\nsame effect as a click, if the element has focus.",
            "params": [
                {
                    "name": "n",
                    "description": "Element to bind the action to",
                    "type": "Element"
                },
                {
                    "name": "oData",
                    "description": "Data object to pass to the triggered function",
                    "type": "Object"
                },
                {
                    "name": "fn",
                    "description": "Callback function for when the event is triggered",
                    "type": "Function"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 6592,
            "description": "Register a callback function. Easily allows a callback function to be added to\nan array store of callback functions that can then all be called together.",
            "params": [
                {
                    "name": "oSettings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "sStore",
                    "description": "Name of the array storage for the callbacks in oSettings",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "Function to be called back",
                    "type": "Function"
                },
                {
                    "name": "sName",
                    "description": "Identifying name for the callback (i.e. a label)",
                    "type": "String"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 6613,
            "description": "Fire callback functions and trigger events. Note that the loop over the\ncallback array store is done backwards! Further note that you do not want to\nfire off triggers in time sensitive applications (for example cell creation)\nas its slow.",
            "params": [
                {
                    "name": "settings",
                    "description": "dataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "callbackArr",
                    "description": "Name of the array storage for the callbacks in\n     oSettings",
                    "type": "String"
                },
                {
                    "name": "eventName",
                    "description": "Name of the jQuery custom event to trigger. If\n     null no trigger is fired",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "Array of arguments to pass to the callback function /\n     trigger",
                    "type": "Array"
                }
            ],
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 6695,
            "description": "Detect the data source being used for the table. Used to simplify the code\na little (ajax) and to make it compress a little smaller.",
            "params": [
                {
                    "name": "settings",
                    "description": "dataTables settings object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Data source",
                "type": "String"
            },
            "memberof": "DataTable#oApi",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 6717,
            "description": "Computed structure of the DataTables API, defined by the options passed to\n`DataTable.Api.register()` when building the API.\n\nThe structure is built in order to speed creation and extension of the Api\nobjects since the extensions are effectively pre-parsed.\n\nThe array is an array of objects with the following structure, where this\nbase array represents the Api prototype base:\n\n    [\n      {\n        name:      'data'                -- string   - Property name\n        val:       function () {},       -- function - Api method (or undefined if just an object\n        methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n        propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\n      },\n      {\n        name:     'row'\n        val:       {},\n        methodExt: [ ... ],\n        propExt:   [\n          {\n            name:      'data'\n            val:       function () {},\n            methodExt: [ ... ],\n            propExt:   [ ... ]\n          },\n          ...\n        ]\n      }\n    ]",
            "type": "{Array}",
            "ignore": "",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 6756,
            "description": "`Array.prototype` reference.",
            "type": "object",
            "ignore": "",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 6765,
            "description": "Abstraction for `context` parameter of the `Api` constructor to allow it to\ntake several different forms for ease of use.\n\nEach of the input parameter types will be converted to a DataTables settings\nobject where possible.",
            "params": [
                {
                    "name": "mixed",
                    "description": "DataTable identifier. Can be one\n  of:\n\n  * `string` - jQuery selector. Any DataTables' matching the given selector\n    with be found and used.\n  * `node` - `TABLE` node which has already been formed into a DataTable.\n  * `jQuery` - A jQuery object of `TABLE` nodes.\n  * `object` - DataTables settings object\n  * `DataTables.Api` - API instance",
                    "type": "String|node|jQuery|object"
                }
            ],
            "return": {
                "description": "Matching DataTables settings objects. `null` or\n  `undefined` is returned if no matching DataTable is found.",
                "type": "Array|null"
            },
            "ignore": "",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 7330,
            "description": "Selector for HTML tables. Apply the given selector to the give array of\nDataTables settings objects.",
            "params": [
                {
                    "name": "selector",
                    "description": "jQuery selector string or integer",
                    "type": "String|integer",
                    "optional": true
                },
                {
                    "name": "Array",
                    "description": "of DataTables settings objects to be filtered",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "ignore": "",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 7363,
            "description": "Context selector for the API's context (i.e. the tables the API instance\nrefers to.",
            "name": "DataTable.Api#tables",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector to pick which tables the iterator\n  should operate on. If not given, all tables in the current context are\n  used. This can be given as a jQuery selector (for example `':gt(0)'`) to\n  select multiple tables or as an integer to select a single table.",
                    "type": "String|integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns a new API instance if a selector is given.",
                "type": "DataTable.Api"
            },
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 7429,
            "description": "Redraw the tables in the current context.",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 7451,
            "description": "Get the current page index.",
            "return": {
                "description": "this",
                "type": "DataTables.Api"
            },
            "params": [
                {
                    "name": "action",
                    "description": "The paging action to take. This can be one of:\n * `integer` - The page index to jump to\n * `string` - An action to take:\n   * `first` - Jump to first page.\n   * `next` - Jump to the next page\n   * `previous` - Jump to previous page\n   * `last` - Jump to the last page.",
                    "type": "Integer|string"
                }
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 7482,
            "description": "Paging information for the first table in the current context.\n\nIf you require paging information for another table, use the `table()` method\nwith a suitable selector.",
            "return": {
                "description": "Object with the following properties set:\n * `page` - Current page index (zero based - i.e. the first page is `0`)\n * `pages` - Total number of pages\n * `start` - Display index for the first record shown on the current page\n * `end` - Display index for the last record shown on the current page\n * `length` - Display length (number of records). Note that generally `start\n   + length = end`, but this is not always true, for example if there are\n   only 2 records to show on the final page, with a length of 10.\n * `recordsTotal` - Full data set length\n * `recordsDisplay` - Data set length once the current filtering criterion\n   are applied.",
                "type": "Object"
            },
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 7525,
            "description": "Get the current page length.",
            "return": {
                "description": "this",
                "type": "DataTables.Api"
            },
            "params": [
                {
                    "name": "Page",
                    "description": "length to set. Use `-1` to show all records.",
                    "type": "Integer"
                }
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 7592,
            "description": "Get the JSON response from the last Ajax request that DataTables made to the\nserver. Note that this returns the JSON from the first table in the current\ncontext.",
            "return": {
                "description": "JSON received from the server.",
                "type": "Object"
            },
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 7610,
            "description": "Get the data submitted in the last Ajax request",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 7624,
            "description": "Reload tables from the Ajax data source. Note that this function will\nautomatically re-draw the table when the remote data has been loaded.",
            "params": [
                {
                    "name": "reset",
                    "description": "Reset (default) or hold the current paging\n  position. A full re-sort and re-filter is performed when this method is\n  called, which is why the pagination reset is the default action.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "this",
                "type": "DataTables.Api"
            },
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 7640,
            "description": "Get the current Ajax URL. Note that this returns the URL from the first\ntable in the current context.",
            "return": {
                "description": "this",
                "type": "DataTables.Api"
            },
            "params": [
                {
                    "name": "url",
                    "description": "URL to set.",
                    "type": "String"
                }
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 7684,
            "description": "Load data from the newly set Ajax URL. Note that this method is only\navailable when `ajax.url()` is used to set a URL. Additionally, this method\nhas the same effect as calling `ajax.reload()` but is provided for\nconvenience when setting a new URL. Like `ajax.reload()` it will\nautomatically redraw the table once the remote data has been loaded.",
            "return": {
                "description": "this",
                "type": "DataTables.Api"
            },
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 8107,
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 8888,
            "description": "Get current ordering (sorting) that has been applied to the table.",
            "return": {
                "description": "this",
                "type": "DataTables.Api"
            },
            "params": [
                {
                    "name": "order",
                    "description": "Column index to sort upon.",
                    "type": "Integer"
                },
                {
                    "name": "direction",
                    "description": "Direction of the sort to be applied (`asc` or `desc`)",
                    "type": "String"
                },
                {
                    "name": "order",
                    "description": "1D array of sorting information to be applied.",
                    "type": "Array"
                },
                {
                    "name": "",
                    "description": "Optional additional sorting conditions",
                    "type": "Array",
                    "optional": true,
                    "multiple": true
                },
                {
                    "name": "order",
                    "description": "2D array of sorting information to be applied.",
                    "type": "Array"
                }
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 8943,
            "description": "Attach a sort listener to an element for a given column",
            "params": [
                {
                    "name": "node",
                    "description": "Identifier for the element(s) to attach the\n  listener to. This can take the form of a single DOM node, a jQuery\n  collection of nodes or a jQuery selector which will identify the node(s).",
                    "type": "Node|jQuery|string"
                },
                {
                    "name": "column",
                    "description": "the column that a click on this node will sort on",
                    "type": "Integer"
                },
                {
                    "name": "callback",
                    "description": "callback function when sort is run",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "this",
                "type": "DataTables.Api"
            },
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9087,
            "description": "Provide a common method for plug-ins to check the version of DataTables being\nused, in order to ensure compatibility.",
            "params": [
                {
                    "name": "version",
                    "description": "Version string to check for, in the format \"X.Y.Z\".\n   Note that the formats \"X\" and \"X.Y\" are also acceptable.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if this version of DataTables is greater or equal to\n   the required version, or false if this version of DataTales is not\n   suitable",
                "type": "Boolean"
            },
            "static": 1,
            "dtopt": "API-Static",
            "example": [
                "\n   alert( $.fn.dataTable.versionCheck( '1.9.0' ) );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9125,
            "description": "Check if a `<table>` node is a DataTable table already or not.",
            "params": [
                {
                    "name": "table",
                    "description": "Table node, jQuery object or jQuery\n     selector for the table to test. Note that if more than more than one\n     table is passed on, only the first will be checked",
                    "type": "Node|jquery|string"
                }
            ],
            "return": {
                "description": "true the table given is a DataTable, or false otherwise",
                "type": "Boolean"
            },
            "static": 1,
            "dtopt": "API-Static",
            "example": [
                "\n   if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {\n     $('#example').dataTable();\n   }"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9162,
            "description": "Get all DataTable tables that have been initialised - optionally you can\nselect to get only currently visible tables.",
            "params": [
                {
                    "name": "visible",
                    "description": "Flag to indicate if you want all (default)\n   or visible tables only.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Array of `table` nodes (not DataTable instances) which are\n   DataTables",
                "type": "Array"
            },
            "static": 1,
            "dtopt": "API-Static",
            "example": [
                "\n   $.each( $.fn.dataTable.tables(true), function () {\n     $(table).DataTable().columns.adjust();\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9199,
            "description": "Convert from camel case parameters to Hungarian notation. This is made public\nfor the extensions to provide the same ability as DataTables core to accept\neither the 1.9 style Hungarian notation, or the 1.10+ style camelCase\nparameters.",
            "params": [
                {
                    "name": "src",
                    "description": "The model object which holds all parameters that can be\n   mapped.",
                    "type": "Object"
                },
                {
                    "name": "user",
                    "description": "The object to convert from camel case to Hungarian.",
                    "type": "Object"
                },
                {
                    "name": "force",
                    "description": "When set to `true`, properties which already have a\n   Hungarian value in the `user` object will be overwritten. Otherwise they\n   won't be.",
                    "type": "Boolean"
                }
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9216,
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9420,
            "description": "Version string for plug-ins to check compatibility. Allowed format is\n`a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used\nonly for non-release builds. See http://semver.org/ for more information.",
            "itemtype": "method",
            "name": "",
            "type": "string",
            "default": "Version number",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9430,
            "description": "Private data store, containing all of the settings objects that are\ncreated for the tables on a given page.\n\nNote that the `DataTable.settings` object is aliased to\n`jQuery.fn.dataTableExt` through which it may be accessed and\nmanipulated, or `jQuery.fn.dataTable.settings`.",
            "itemtype": "method",
            "name": "",
            "type": "array",
            "default": "[]",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9444,
            "description": "Object models container, for the various models that DataTables has\navailable to it. These models define the objects that are used to hold\nthe active state and configuration of the table.",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9454,
            "description": "Template object for the way in which DataTables holds information about\nsearch information for the global filter and individual column filters.",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9460,
            "description": "Flag to indicate if the filtering should be case insensitive or not",
            "type": "boolean",
            "default": "true",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9467,
            "description": "Applied search term",
            "type": "string",
            "default": "<i>Empty string</i>",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9474,
            "description": "Flag to indicate if the search term should be interpreted as a\nregular expression (true) or not (false) and therefore and special\nregex characters escaped.",
            "type": "boolean",
            "default": "false",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9483,
            "description": "Flag to indicate if DataTables is to use its smart filtering or not.",
            "type": "boolean",
            "default": "true",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9494,
            "description": "Template object for the way in which DataTables holds information about\neach individual row. This is the object format used for the settings\naoData array.",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9501,
            "description": "TR element for the row",
            "type": "node",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9508,
            "description": "Array of TD elements for each row. This is null until the row has been\ncreated.",
            "type": "array nodes",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9516,
            "description": "Data object from the original data source for the row. This is either\nan array if using the traditional form of DataTables, or an object if\nusing mData options. The exact type will depend on the passed in\ndata from the data source, or will be an array if using DOM a data\nsource.",
            "type": "array|object",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9527,
            "description": "Sorting data cache - this array is ostensibly the same length as the\nnumber of columns (although each index is generated only as it is\nneeded), and holds the data that is used for sorting each column in the\nrow. We do this cache generation at the start of the sort in order that\nthe formatting of the sort data need be done only once for each cell\nper sort. This array should not be read from or written to by anything\nother than the master sorting methods.",
            "type": "array",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9541,
            "description": "Per cell filtering data cache. As per the sort data cache, used to\nincrease the performance of the filtering in DataTables",
            "type": "array",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9550,
            "description": "Filtering data cache. This is the same as the cell filtering cache, but\nin this case a string rather than an array. This is easily computed with\na join on `_aFilterData`, but is provided as a cache so the join isn't\nneeded on every search (memory traded for performance)",
            "type": "array",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9561,
            "description": "Cache of the class name that DataTables has applied to the row, so we\ncan quickly look at this variable rather than needing to do a DOM check\non className for the nTr property.",
            "type": "string",
            "default": "<i>Empty string</i>",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9571,
            "description": "Denote if the original data source was from the DOM, or the data source\nobject. This is used for invalidating data, so DataTables can\nautomatically read data from the original source, unless uninstructed\notherwise.",
            "type": "string",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9582,
            "description": "Index in the aoData array. This saves an indexOf lookup when we have the\nobject, but want to know the index",
            "type": "integer",
            "default": "-1",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9593,
            "description": "Template object for the column information object in DataTables. This object\nis held in the settings aoColumns array and contains all the information that\nDataTables needs about each individual column.\n\nNote that this object is related to {@link DataTable.defaults.column}\nbut this one is the internal data store for DataTables's cache of columns.\nIt should NOT be manipulated outside of DataTables. Any configuration should\nbe done through the initialisation options.",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9605,
            "description": "Column index. This could be worked out on-the-fly with $.inArray, but it\nis faster to just hold it as a variable",
            "type": "integer",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9613,
            "description": "A list of the columns that sorting should occur on when this column\nis sorted. That this property is an array allows multi-column sorting\nto be defined for a column (for example first name / last name columns\nwould benefit from this). The values are integers pointing to the\ncolumns to be sorted on (typically it will be a single integer pointing\nat itself, but that doesn't need to be the case).",
            "type": "array",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9624,
            "description": "Define the sorting directions that are applied to the column, in sequence\nas the column is repeatedly sorted upon - i.e. the first value is used\nas the sorting direction when the column if first sorted (clicked on).\nSort it again (click again) and it will move on to the next index.\nRepeat until loop.",
            "type": "array",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9634,
            "description": "Flag to indicate if the column is searchable, and thus should be included\nin the filtering or not.",
            "type": "boolean",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9641,
            "description": "Flag to indicate if the column is sortable or not.",
            "type": "boolean",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9647,
            "description": "Flag to indicate if the column is currently visible in the table or not",
            "type": "boolean",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9653,
            "description": "Store for manual type assignment using the `column.type` option. This\nis held in store so we can manipulate the column's `sType` property.",
            "type": "string",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9662,
            "description": "Flag to indicate if HTML5 data attributes should be used as the data\nsource for filtering or sorting. True is either are.",
            "type": "boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9671,
            "description": "Developer definable function that is called whenever a cell is created (Ajax source,\netc) or processed for input (DOM source). This can be used as a compliment to mRender\nallowing you to modify the DOM element (add background colour for example) when the\nelement is available.",
            "type": "function",
            "params": [
                {
                    "name": "nTd",
                    "description": "The TD node that has been created",
                    "type": "Element"
                },
                {
                    "name": "sData",
                    "description": "The Data for the cell",
                    "type": "*"
                },
                {
                    "name": "oData",
                    "description": "The data for the whole row",
                    "type": "Array|object"
                },
                {
                    "name": "iRow",
                    "description": "The row index for the aoData data store",
                    "type": "Int"
                }
            ],
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9685,
            "description": "Function to get data from a cell in a column. You should <b>never</b>\naccess data directly through _aData internally in DataTables - always use\nthe method attached to this property. It allows mData to function as\nrequired. This function is automatically assigned by the column\ninitialisation method",
            "type": "function",
            "params": [
                {
                    "name": "oData",
                    "description": "The data array/object for the array\n   (i.e. aoData[]._aData)",
                    "type": "Array|object"
                },
                {
                    "name": "sSpecific",
                    "description": "The specific data type you want to get -\n   'display', 'type' 'filter' 'sort'",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The data for the cell from the given row's data",
                "type": "*"
            },
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9701,
            "description": "Function to set data for a cell in the column. You should <b>never</b>\nset the data directly to _aData internally in DataTables - always use\nthis method. It allows mData to function as required. This function\nis automatically assigned by the column initialisation method",
            "type": "function",
            "params": [
                {
                    "name": "oData",
                    "description": "The data array/object for the array\n   (i.e. aoData[]._aData)",
                    "type": "Array|object"
                },
                {
                    "name": "sValue",
                    "description": "Value to set",
                    "type": "*"
                }
            ],
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9714,
            "description": "Property to read the value for the cells in the column from the data\nsource array / object. If null, then the default content is used, if a\nfunction is given then the return from the function is used.",
            "type": "function|int|string|null",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9723,
            "description": "Partner property to mData which is used (only when defined) to get\nthe data - i.e. it is basically the same as mData, but without the\n'set' option, and also the data fed to it is the result from mData.\nThis is the rendering method to match the data method of mData.",
            "type": "function|int|string|null",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9733,
            "description": "Unique header TH/TD element for this column - this is what the sorting\nlistener is attached to (if sorting is enabled.)",
            "type": "node",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9741,
            "description": "Unique footer TH/TD element for this column (if there is one). Not used\nin DataTables as such, but can be used for plug-ins to reference the\nfooter for each column.",
            "type": "node",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9750,
            "description": "The class to apply to all TD elements in the table's TBODY for the column",
            "type": "string",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9757,
            "description": "When DataTables calculates the column widths to assign to each column,\nit finds the longest string in each column and then constructs a\ntemporary table and reads the widths from that. The problem with this\nis that \"mmm\" is much wider then \"iiii\", but the latter is a longer\nstring - thus the calculation can go wrong (doing it properly and putting\nit into an DOM object and measuring that is horribly(!) slow). Thus as\na \"work around\" we provide this option. It will append its value to the\ntext that is found to be the longest string for the column - i.e. padding.",
            "type": "string",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9770,
            "description": "Allows a default value to be given for a column's data, and will be used\nwhenever a null data source is encountered (this can be because mData\nis set to null, or because the data source itself is null).",
            "type": "string",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9779,
            "description": "Name for the column, allowing reference to the column by name as well as\nby index (needs a lookup to work by name).",
            "type": "string",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9786,
            "description": "Custom sorting data type - defines which of the available plug-ins in\nafnSortData the custom sorting will use - if any is defined.",
            "type": "string",
            "default": "std",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9794,
            "description": "Class to be applied to the header element when sorting on this column",
            "type": "string",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9801,
            "description": "Class to be applied to the header element when sorting on this column -\nwhen jQuery UI theming is used.",
            "type": "string",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9809,
            "description": "Title of the column - what is seen in the TH element (nTh).",
            "type": "string",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9815,
            "description": "Column sorting and filtering type",
            "type": "string",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9822,
            "description": "Width of the column",
            "type": "string",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9829,
            "description": "Width of the column when it was first \"encountered\"",
            "type": "string",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9854,
            "description": "Initialisation options that can be given to DataTables at initialisation\ntime.",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9860,
            "description": "An array of data to use for the table, passed in at initialisation which\nwill be used in preference to any data which is already in the DOM. This is\nparticularly useful for constructing tables purely in Javascript, for\nexample with a custom Ajax call.",
            "type": "array",
            "default": "null",
            "dtopt": "Option",
            "name": "DataTable.defaults.data",
            "example": [
                "\n   // Using a 2D array data source\n   $(document).ready( function () {\n     $('#example').dataTable( {\n       \"data\": [\n         ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],\n         ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],\n       ],\n       \"columns\": [\n         { \"title\": \"Engine\" },\n         { \"title\": \"Browser\" },\n         { \"title\": \"Platform\" },\n         { \"title\": \"Version\" },\n         { \"title\": \"Grade\" }\n       ]\n     } );\n   } );",
                "\n   // Using an array of objects as a data source (`data`)\n   $(document).ready( function () {\n     $('#example').dataTable( {\n       \"data\": [\n         {\n           \"engine\":   \"Trident\",\n           \"browser\":  \"Internet Explorer 4.0\",\n           \"platform\": \"Win 95+\",\n           \"version\":  4,\n           \"grade\":    \"X\"\n         },\n         {\n           \"engine\":   \"Trident\",\n           \"browser\":  \"Internet Explorer 5.0\",\n           \"platform\": \"Win 95+\",\n           \"version\":  5,\n           \"grade\":    \"C\"\n         }\n       ],\n       \"columns\": [\n         { \"title\": \"Engine\",   \"data\": \"engine\" },\n         { \"title\": \"Browser\",  \"data\": \"browser\" },\n         { \"title\": \"Platform\", \"data\": \"platform\" },\n         { \"title\": \"Version\",  \"data\": \"version\" },\n         { \"title\": \"Grade\",    \"data\": \"grade\" }\n       ]\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9922,
            "description": "If ordering is enabled, then DataTables will perform a first pass sort on\ninitialisation. You can define which column(s) the sort is performed\nupon, and the sorting direction, with this variable. The `sorting` array\nshould contain an array for each column to be sorted initially containing\nthe column's index and a direction string ('asc' or 'desc').",
            "type": "array",
            "default": "[[0,'asc']]",
            "dtopt": "Option",
            "name": "DataTable.defaults.order",
            "example": [
                "\n   // Sort by 3rd column first, and then 4th column\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"order\": [[2,'asc'], [3,'desc']]\n     } );\n   } );\n\n   // No initial sorting\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"order\": []\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9952,
            "description": "This parameter is basically identical to the `sorting` parameter, but\ncannot be overridden by user interaction with the table. What this means\nis that you could have a column (visible or hidden) which the sorting\nwill always be forced on first - any sorting after that (from the user)\nwill then be performed as required. This can be useful for grouping rows\ntogether.",
            "type": "array",
            "default": "null",
            "dtopt": "Option",
            "name": "DataTable.defaults.orderFixed",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"orderFixed\": [[0,'asc']]\n     } );\n   } )"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 9975,
            "description": "DataTables can be instructed to load data to display in the table from a\nAjax source. This option defines how that Ajax call is made and where to.\n\nThe `ajax` property has three different modes of operation, depending on\nhow it is defined. These are:\n\n* `string` - Set the URL from where the data should be loaded from.\n* `object` - Define properties for `jQuery.ajax`.\n* `function` - Custom data get function\n\n`string`\n--------\n\nAs a string, the `ajax` property simply defines the URL from which\nDataTables will load data.\n\n`object`\n--------\n\nAs an object, the parameters in the object are passed to\n[jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control\nof the Ajax request. DataTables has a number of default parameters which\nyou can override using this option. Please refer to the jQuery\ndocumentation for a full description of the options available, although\nthe following parameters provide additional options in DataTables or\nrequire special consideration:\n\n* `data` - As with jQuery, `data` can be provided as an object, but it\n  can also be used as a function to manipulate the data DataTables sends\n  to the server. The function takes a single parameter, an object of\n  parameters with the values that DataTables has readied for sending. An\n  object may be returned which will be merged into the DataTables\n  defaults, or you can add the items to the object that was passed in and\n  not return anything from the function. This supersedes `fnServerParams`\n  from DataTables 1.9-.\n\n* `dataSrc` - By default DataTables will look for the property `data` (or\n  `aaData` for compatibility with DataTables 1.9-) when obtaining data\n  from an Ajax source or for server-side processing - this parameter\n  allows that property to be changed. You can use Javascript dotted\n  object notation to get a data source for multiple levels of nesting, or\n  it my be used as a function. As a function it takes a single parameter,\n  the JSON returned from the server, which can be manipulated as\n  required, with the returned value being that used by DataTables as the\n  data source for the table. This supersedes `sAjaxDataProp` from\n  DataTables 1.9-.\n\n* `success` - Should not be overridden it is used internally in\n  DataTables. To manipulate / transform the data returned by the server\n  use `ajax.dataSrc`, or use `ajax` as a function (see below).\n\n`function`\n----------\n\nAs a function, making the Ajax call is left up to yourself allowing\ncomplete control of the Ajax request. Indeed, if desired, a method other\nthan Ajax could be used to obtain the required data, such as Web storage\nor an AIR database.\n\nThe function is given four parameters and no return is required. The\nparameters are:\n\n1. _object_ - Data to send to the server\n2. _function_ - Callback function that must be executed when the required\n   data has been obtained. That data should be passed into the callback\n   as the only parameter\n3. _object_ - DataTables settings object for the table\n\nNote that this supersedes `fnServerData` from DataTables 1.9-.",
            "type": "string|object|function",
            "default": "null",
            "dtopt": "Option",
            "name": "DataTable.defaults.ajax",
            "since": "1.10.0",
            "example": [
                "\n  // Get JSON data from a file via Ajax.\n  // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).\n  $('#example').dataTable( {\n    \"ajax\": \"data.json\"\n  } );",
                "\n  // Get JSON data from a file via Ajax, using `dataSrc` to change\n  // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)\n  $('#example').dataTable( {\n    \"ajax\": {\n      \"url\": \"data.json\",\n      \"dataSrc\": \"tableData\"\n    }\n  } );",
                "\n  // Get JSON data from a file via Ajax, using `dataSrc` to read data\n  // from a plain array rather than an array in an object\n  $('#example').dataTable( {\n    \"ajax\": {\n      \"url\": \"data.json\",\n      \"dataSrc\": \"\"\n    }\n  } );",
                "\n  // Manipulate the data returned from the server - add a link to data\n  // (note this can, should, be done using `render` for the column - this\n  // is just a simple example of how the data can be manipulated).\n  $('#example').dataTable( {\n    \"ajax\": {\n      \"url\": \"data.json\",\n      \"dataSrc\": function ( json ) {\n        for ( var i=0, ien=json.length ; i<ien ; i++ ) {\n          json[i][0] = '<a href=\"/message/'+json[i][0]+'>View message</a>';\n        }\n        return json;\n      }\n    }\n  } );",
                "\n  // Add data to the request\n  $('#example').dataTable( {\n    \"ajax\": {\n      \"url\": \"data.json\",\n      \"data\": function ( d ) {\n        return {\n          \"extra_search\": $('#extra').val()\n        };\n      }\n    }\n  } );",
                "\n  // Send request as POST\n  $('#example').dataTable( {\n    \"ajax\": {\n      \"url\": \"data.json\",\n      \"type\": \"POST\"\n    }\n  } );",
                "\n  // Get the data from localStorage (could interface with a form for\n  // adding, editing and removing rows).\n  $('#example').dataTable( {\n    \"ajax\": function (data, callback, settings) {\n      callback(\n        JSON.parse( localStorage.getItem('dataTablesData') )\n      );\n    }\n  } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10132,
            "description": "This parameter allows you to readily specify the entries in the length drop\ndown menu that DataTables shows when pagination is enabled. It can be\neither a 1D array of options which will be used for both the displayed\noption and the value, or a 2D array which will use the array in the first\nposition as the value, and the array in the second position as the\ndisplayed options (useful for language strings such as 'All').\n\nNote that the `pageLength` property will be automatically set to the\nfirst value given in this array, unless `pageLength` is also provided.",
            "type": "array",
            "default": "[ 10, 25, 50, 100 ]",
            "dtopt": "Option",
            "name": "DataTable.defaults.lengthMenu",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"lengthMenu\": [[10, 25, 50, -1], [10, 25, 50, \"All\"]]\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10158,
            "description": "The `columns` option in the initialisation parameter allows you to define\ndetails about the way individual columns behave. For a full list of\ncolumn options that can be set, please see\n{@link DataTable.defaults.column}. Note that if you use `columns` to\ndefine your columns, you must have an entry in the array for every single\ncolumn that you have in your table (these can be null if you don't which\nto specify any options).",
            "itemtype": "method",
            "name": "DataTable.defaults.column",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10172,
            "description": "Very similar to `columns`, `columnDefs` allows you to target a specific\ncolumn, multiple columns, or all columns, using the `targets` property of\neach object in the array. This allows great flexibility when creating\ntables, as the `columnDefs` arrays can be of any length, targeting the\ncolumns you specifically want. `columnDefs` may use any of the column\noptions available: {@link DataTable.defaults.column}, but it _must_\nhave `targets` defined in each object in the array. Values in the `targets`\narray may be:\n  <ul>\n    <li>a string - class name will be matched on the TH for the column</li>\n    <li>0 or a positive integer - column index counting from the left</li>\n    <li>a negative integer - column index counting from the right</li>\n    <li>the string \"_all\" - all columns (i.e. assign a default)</li>\n  </ul>",
            "itemtype": "method",
            "name": "DataTable.defaults.columnDefs",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10194,
            "description": "Basically the same as `search`, this parameter defines the individual column\nfiltering state at initialisation time. The array must be of the same size\nas the number of columns, and each element be an object with the parameters\n`search` and `escapeRegex` (the latter is optional). 'null' is also\naccepted and the default will be used.",
            "type": "array",
            "default": "[]",
            "dtopt": "Option",
            "name": "DataTable.defaults.searchCols",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"searchCols\": [\n         null,\n         { \"search\": \"My filter\" },\n         null,\n         { \"search\": \"^[0-9]\", \"escapeRegex\": false }\n       ]\n     } );\n   } )"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10221,
            "description": "An array of CSS classes that should be applied to displayed rows. This\narray may be of any length, and DataTables will apply each class\nsequentially, looping when required.",
            "type": "array",
            "default": "null <i>Will take the values determined by the `oClasses.stripe*`\n   options</i>",
            "dtopt": "Option",
            "name": "DataTable.defaults.stripeClasses",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"stripeClasses\": [ 'strip1', 'strip2', 'strip3' ]\n     } );\n   } )"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10242,
            "description": "Enable or disable automatic column width calculation. This can be disabled\nas an optimisation (it takes some time to calculate the widths) if the\ntables widths are passed in using `columns`.",
            "type": "boolean",
            "default": "true",
            "dtopt": "Features",
            "name": "DataTable.defaults.autoWidth",
            "example": [
                "\n   $(document).ready( function () {\n     $('#example').dataTable( {\n       \"autoWidth\": false\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10262,
            "description": "Deferred rendering can provide DataTables with a huge speed boost when you\nare using an Ajax or JS data source for the table. This option, when set to\ntrue, will cause DataTables to defer the creation of the table elements for\neach row until they are needed for a draw - saving a significant amount of\ntime.",
            "type": "boolean",
            "default": "false",
            "dtopt": "Features",
            "name": "DataTable.defaults.deferRender",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"ajax\": \"sources/arrays.txt\",\n       \"deferRender\": true\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10285,
            "description": "Replace a DataTable which matches the given selector and replace it with\none which has the properties of the new initialisation object passed. If no\ntable matches the selector, then the new DataTable will be constructed as\nper normal.",
            "type": "boolean",
            "default": "false",
            "dtopt": "Options",
            "name": "DataTable.defaults.destroy",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"srollY\": \"200px\",\n       \"paginate\": false\n     } );\n\n     // Some time later....\n     $('#example').dataTable( {\n       \"filter\": false,\n       \"destroy\": true\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10313,
            "description": "Enable or disable filtering of data. Filtering in DataTables is \"smart\" in\nthat it allows the end user to input multiple words (space separated) and\nwill match a row containing those words, even if not in the order that was\nspecified (this allow matching across multiple columns). Note that if you\nwish to use filtering in DataTables this must remain 'true' - to remove the\ndefault filtering input box and retain filtering abilities, please use\n{@link DataTable.defaults.dom}.",
            "type": "boolean",
            "default": "true",
            "dtopt": "Features",
            "name": "DataTable.defaults.searching",
            "example": [
                "\n   $(document).ready( function () {\n     $('#example').dataTable( {\n       \"searching\": false\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10337,
            "description": "Enable or disable the table information display. This shows information\nabout the data that is currently visible on the page, including information\nabout filtered data if that action is being performed.",
            "type": "boolean",
            "default": "true",
            "dtopt": "Features",
            "name": "DataTable.defaults.info",
            "example": [
                "\n   $(document).ready( function () {\n     $('#example').dataTable( {\n       \"info\": false\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10357,
            "description": "Allows the end user to select the size of a formatted page from a select\nmenu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).",
            "type": "boolean",
            "default": "true",
            "dtopt": "Features",
            "name": "DataTable.defaults.lengthChange",
            "example": [
                "\n   $(document).ready( function () {\n     $('#example').dataTable( {\n       \"lengthChange\": false\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10376,
            "description": "Enable or disable pagination.",
            "type": "boolean",
            "default": "true",
            "dtopt": "Features",
            "name": "DataTable.defaults.paging",
            "example": [
                "\n   $(document).ready( function () {\n     $('#example').dataTable( {\n       \"paging\": false\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10394,
            "description": "Enable or disable the display of a 'processing' indicator when the table is\nbeing processed (e.g. a sort). This is particularly useful for tables with\nlarge amounts of data where it can take a noticeable amount of time to sort\nthe entries.",
            "type": "boolean",
            "default": "false",
            "dtopt": "Features",
            "name": "DataTable.defaults.processing",
            "example": [
                "\n   $(document).ready( function () {\n     $('#example').dataTable( {\n       \"processing\": true\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10415,
            "description": "Retrieve the DataTables object for the given selector. Note that if the\ntable has already been initialised, this parameter will cause DataTables\nto simply return the object that has already been set up - it will not take\naccount of any changes you might have made to the initialisation object\npassed to DataTables (setting this parameter to true is an acknowledgement\nthat you understand this). `destroy` can be used to reinitialise a table if\nyou need.",
            "type": "boolean",
            "default": "false",
            "dtopt": "Options",
            "name": "DataTable.defaults.retrieve",
            "example": [
                "\n   $(document).ready( function() {\n     initTable();\n     tableActions();\n   } );\n\n   function initTable ()\n   {\n     return $('#example').dataTable( {\n       \"scrollY\": \"200px\",\n       \"paginate\": false,\n       \"retrieve\": true\n     } );\n   }\n\n   function tableActions ()\n   {\n     var table = initTable();\n     // perform API operations with oTable\n   }"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10453,
            "description": "When vertical (y) scrolling is enabled, DataTables will force the height of\nthe table's viewport to the given height at all times (useful for layout).\nHowever, this can look odd when filtering data down to a small data set,\nand the footer is left \"floating\" further down. This parameter (when\nenabled) will cause DataTables to collapse the table's viewport down when\nthe result set will fit within the given Y height.",
            "type": "boolean",
            "default": "false",
            "dtopt": "Options",
            "name": "DataTable.defaults.scrollCollapse",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"scrollY\": \"200\",\n       \"scrollCollapse\": true\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10477,
            "description": "Configure DataTables to use server-side processing. Note that the\n`ajax` parameter must also be given in order to give DataTables a\nsource to obtain the required data for each draw.",
            "type": "boolean",
            "default": "false",
            "dtopt": "Server-side",
            "name": "DataTable.defaults.serverSide",
            "example": [
                "\n   $(document).ready( function () {\n     $('#example').dataTable( {\n       \"serverSide\": true,\n       \"ajax\": \"xhr.php\"\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10499,
            "description": "Enable or disable sorting of columns. Sorting of individual columns can be\ndisabled by the `sortable` option for each column.",
            "type": "boolean",
            "default": "true",
            "dtopt": "Features",
            "name": "DataTable.defaults.ordering",
            "example": [
                "\n   $(document).ready( function () {\n     $('#example').dataTable( {\n       \"ordering\": false\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10518,
            "description": "Enable or display DataTables' ability to sort multiple columns at the\nsame time (activated by shift-click by the user).",
            "type": "boolean",
            "default": "true",
            "dtopt": "Options",
            "name": "DataTable.defaults.orderMulti",
            "example": [
                "\n   // Disable multiple column sorting ability\n   $(document).ready( function () {\n     $('#example').dataTable( {\n       \"orderMulti\": false\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10538,
            "description": "Allows control over whether DataTables should use the top (true) unique\ncell that is found for a single column, or the bottom (false - default).\nThis is useful when using complex headers.",
            "type": "boolean",
            "default": "false",
            "dtopt": "Options",
            "name": "DataTable.defaults.orderCellsTop",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"orderCellsTop\": true\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10558,
            "description": "Enable or disable the addition of the classes `sorting\\_1`, `sorting\\_2` and\n`sorting\\_3` to the columns which are currently being sorted on. This is\npresented as a feature switch as it can increase processing time (while\nclasses are removed and added) so for large data sets you might want to\nturn this off.",
            "type": "boolean",
            "default": "true",
            "dtopt": "Features",
            "name": "DataTable.defaults.orderClasses",
            "example": [
                "\n   $(document).ready( function () {\n     $('#example').dataTable( {\n       \"orderClasses\": false\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10580,
            "description": "Enable or disable state saving. When enabled HTML5 `localStorage` will be\nused to save table display information such as pagination information,\ndisplay length, filtering and sorting. As such when the end user reloads\nthe page the display display will match what thy had previously set up.\n\nDue to the use of `localStorage` the default state saving is not supported\nin IE6 or 7. If state saving is required in those browsers, use\n`stateSaveCallback` to provide a storage solution such as cookies.",
            "type": "boolean",
            "default": "false",
            "dtopt": "Features",
            "name": "DataTable.defaults.stateSave",
            "example": [
                "\n   $(document).ready( function () {\n     $('#example').dataTable( {\n       \"stateSave\": true\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10605,
            "description": "This function is called when a TR element is created (and all TD child\nelements have been inserted), or registered if using a DOM source, allowing\nmanipulation of the TR element (adding classes etc).",
            "type": "function",
            "params": [
                {
                    "name": "row",
                    "description": "\"TR\" element for the current row",
                    "type": "Node"
                },
                {
                    "name": "data",
                    "description": "Raw data array for this row",
                    "type": "Array"
                },
                {
                    "name": "dataIndex",
                    "description": "The index of this row in the internal aoData array",
                    "type": "Int"
                }
            ],
            "dtopt": "Callbacks",
            "name": "DataTable.defaults.createdRow",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"createdRow\": function( row, data, dataIndex ) {\n         // Bold the grade for all 'A' grade browsers\n         if ( data[4] == \"A\" )\n         {\n           $('td:eq(4)', row).html( '<b>A</b>' );\n         }\n       }\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10633,
            "description": "This function is called on every 'draw' event, and allows you to\ndynamically modify any aspect you want about the created DOM.",
            "type": "function",
            "params": [
                {
                    "name": "settings",
                    "description": "DataTables settings object",
                    "type": "Object"
                }
            ],
            "dtopt": "Callbacks",
            "name": "DataTable.defaults.drawCallback",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"drawCallback\": function( settings ) {\n         alert( 'DataTables has redrawn the table' );\n       }\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10654,
            "description": "Identical to fnHeaderCallback() but for the table footer this function\nallows you to modify the table footer on every 'draw' event.",
            "type": "function",
            "params": [
                {
                    "name": "foot",
                    "description": "\"TR\" element for the footer",
                    "type": "Node"
                },
                {
                    "name": "data",
                    "description": "Full table data (as derived from the original HTML)",
                    "type": "Array"
                },
                {
                    "name": "start",
                    "description": "Index for the current display starting point in the\n   display array",
                    "type": "Int"
                },
                {
                    "name": "end",
                    "description": "Index for the current display ending point in the\n   display array",
                    "type": "Int"
                },
                {
                    "name": "display",
                    "description": "Index array to translate the visual position\n   to the full data array",
                    "type": "Array int"
                }
            ],
            "dtopt": "Callbacks",
            "name": "DataTable.defaults.footerCallback",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"footerCallback\": function( tfoot, data, start, end, display ) {\n         tfoot.getElementsByTagName('th')[0].innerHTML = \"Starting index is \"+start;\n       }\n     } );\n   } )"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10682,
            "description": "When rendering large numbers in the information element for the table\n(i.e. \"Showing 1 to 10 of 57 entries\") DataTables will render large numbers\nto have a comma separator for the 'thousands' units (e.g. 1 million is\nrendered as \"1,000,000\") to help readability for the end user. This\nfunction will override the default method DataTables uses.",
            "type": "function",
            "itemtype": "method",
            "name": "DataTable.defaults.formatNumber",
            "params": [
                {
                    "name": "toFormat",
                    "description": "number to be formatted",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "formatted string for DataTables to show the number",
                "type": "String"
            },
            "dtopt": "Callbacks",
            "example": [
                "\n   // Format a number using a single quote for the separator (note that\n   // this can also be done with the language.thousands option)\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"formatNumber\": function ( toFormat ) {\n         return toFormat.toString().replace(\n           /\\B(?=(\\d{3})+(?!\\d))/g, \"'\"\n         );\n       };\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10717,
            "description": "This function is called on every 'draw' event, and allows you to\ndynamically modify the header row. This can be used to calculate and\ndisplay useful information about the table.",
            "type": "function",
            "params": [
                {
                    "name": "head",
                    "description": "\"TR\" element for the header",
                    "type": "Node"
                },
                {
                    "name": "data",
                    "description": "Full table data (as derived from the original HTML)",
                    "type": "Array"
                },
                {
                    "name": "start",
                    "description": "Index for the current display starting point in the\n   display array",
                    "type": "Int"
                },
                {
                    "name": "end",
                    "description": "Index for the current display ending point in the\n   display array",
                    "type": "Int"
                },
                {
                    "name": "display",
                    "description": "Index array to translate the visual position\n   to the full data array",
                    "type": "Array int"
                }
            ],
            "dtopt": "Callbacks",
            "name": "DataTable.defaults.headerCallback",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"fheaderCallback\": function( head, data, start, end, display ) {\n         head.getElementsByTagName('th')[0].innerHTML = \"Displaying \"+(end-start)+\" records\";\n       }\n     } );\n   } )"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10746,
            "description": "The information element can be used to convey information about the current\nstate of the table. Although the internationalisation options presented by\nDataTables are quite capable of dealing with most customisations, there may\nbe times where you wish to customise the string further. This callback\nallows you to do exactly that.",
            "type": "function",
            "params": [
                {
                    "name": "oSettings",
                    "description": "DataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "start",
                    "description": "Starting position in data for the draw",
                    "type": "Int"
                },
                {
                    "name": "end",
                    "description": "End position in data for the draw",
                    "type": "Int"
                },
                {
                    "name": "max",
                    "description": "Total number of rows in the table (regardless of\n   filtering)",
                    "type": "Int"
                },
                {
                    "name": "total",
                    "description": "Total number of rows in the data set, after filtering",
                    "type": "Int"
                },
                {
                    "name": "pre",
                    "description": "The string that DataTables has formatted using it's\n   own rules",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The string to be displayed in the information element.",
                "type": "String"
            },
            "dtopt": "Callbacks",
            "name": "DataTable.defaults.infoCallback",
            "example": [
                "\n   $('#example').dataTable( {\n     \"infoCallback\": function( settings, start, end, max, total, pre ) {\n       return start +\" to \"+ end;\n     }\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10776,
            "description": "Called when the table has been initialised. Normally DataTables will\ninitialise sequentially and there will be no need for this function,\nhowever, this does not hold true when using external language information\nsince that is obtained using an async XHR call.",
            "type": "function",
            "params": [
                {
                    "name": "settings",
                    "description": "DataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "json",
                    "description": "The JSON object request from the server - only\n   present if client-side Ajax sourced data is used",
                    "type": "Object"
                }
            ],
            "dtopt": "Callbacks",
            "name": "DataTable.defaults.initComplete",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"initComplete\": function(settings, json) {\n         alert( 'DataTables has finished its initialisation.' );\n       }\n     } );\n   } )"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10801,
            "description": "Called at the very start of each table draw and can be used to cancel the\ndraw by returning false, any other return (including undefined) results in\nthe full draw occurring).",
            "type": "function",
            "params": [
                {
                    "name": "settings",
                    "description": "DataTables settings object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "False will cancel the draw, anything else (including no\n   return) will allow it to complete.",
                "type": "Boolean"
            },
            "dtopt": "Callbacks",
            "name": "DataTable.defaults.preDrawCallback",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"preDrawCallback\": function( settings ) {\n         if ( $('#test').val() == 1 ) {\n           return false;\n         }\n       }\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10827,
            "description": "This function allows you to 'post process' each row after it have been\ngenerated for each table draw, but before it is rendered on screen. This\nfunction might be used for setting the row class name etc.",
            "type": "function",
            "params": [
                {
                    "name": "row",
                    "description": "\"TR\" element for the current row",
                    "type": "Node"
                },
                {
                    "name": "data",
                    "description": "Raw data array for this row",
                    "type": "Array"
                },
                {
                    "name": "displayIndex",
                    "description": "The display index for the current table draw",
                    "type": "Int"
                },
                {
                    "name": "displayIndexFull",
                    "description": "The index of the data in the full list of\n   rows (after filtering)",
                    "type": "Int"
                }
            ],
            "dtopt": "Callbacks",
            "name": "DataTable.defaults.rowCallback",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"rowCallback\": function( row, data, displayIndex, displayIndexFull ) {\n         // Bold the grade for all 'A' grade browsers\n         if ( data[4] == \"A\" ) {\n           $('td:eq(4)', row).html( '<b>A</b>' );\n         }\n       }\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10856,
            "description": "__Deprecated__ The functionality provided by this parameter has now been\nsuperseded by that provided through `ajax`, which should be used instead.\n\nThis parameter allows you to override the default function which obtains\nthe data from the server so something more suitable for your application.\nFor example you could use POST data, or pull information from a Gears or\nAIR database.",
            "type": "function",
            "itemtype": "method",
            "name": "DataTable.defaults.serverData",
            "params": [
                {
                    "name": "source",
                    "description": "HTTP source to obtain the data from (`ajax`)",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "A key/value pair object containing the data to send\n   to the server",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "to be called on completion of the data get\n   process that will draw the data on the page.",
                    "type": "Function"
                },
                {
                    "name": "settings",
                    "description": "DataTables settings object",
                    "type": "Object"
                }
            ],
            "dtopt": "Server-side",
            "deprecated": true,
            "deprecationMessage": "1.10. Please use `ajax` for this functionality now.",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10882,
            "description": "__Deprecated__ The functionality provided by this parameter has now been\nsuperseded by that provided through `ajax`, which should be used instead.\n\n It is often useful to send extra data to the server when making an Ajax\nrequest - for example custom filtering information, and this callback\nfunction makes it trivial to send extra information to the server. The\npassed in parameter is the data set that has been constructed by\nDataTables, and you can add to this or modify it as you require.",
            "type": "function",
            "params": [
                {
                    "name": "data",
                    "description": "Data array (array of objects which are name/value\n   pairs) that has been constructed by DataTables and will be sent to the\n   server. In the case of Ajax sourced data with server-side processing\n   this will be an empty array, for server-side processing there will be a\n   significant number of parameters!",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Ensure that you modify the data array passed in,\n   as this is passed by reference.",
                "type": "Undefined"
            },
            "dtopt": "Server-side",
            "name": "DataTable.defaults.serverParams",
            "deprecated": true,
            "deprecationMessage": "1.10. Please use `ajax` for this functionality now.",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10909,
            "description": "Load the table state. With this function you can define from where, and how, the\nstate of a table is loaded. By default DataTables will load from `localStorage`\nbut you might wish to use a server-side database or cookies.",
            "type": "function",
            "itemtype": "method",
            "name": "DataTable.defaults.stateLoadCallback",
            "params": [
                {
                    "name": "settings",
                    "description": "DataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Callback that can be executed when done. It\n   should be passed the loaded state object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The DataTables state object to be loaded",
                "type": "Object"
            },
            "dtopt": "Callbacks",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"stateSave\": true,\n       \"stateLoadCallback\": function (settings, callback) {\n         $.ajax( {\n           \"url\": \"/state_load\",\n           \"dataType\": \"json\",\n           \"success\": function (json) {\n             callback( json );\n           }\n         } );\n       }\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10950,
            "description": "Callback which allows modification of the saved state prior to loading that state.\nThis callback is called when the table is loading state from the stored data, but\nprior to the settings object being modified by the saved state. Note that for\nplug-in authors, you should use the `stateLoadParams` event to load parameters for\na plug-in.",
            "type": "function",
            "params": [
                {
                    "name": "settings",
                    "description": "DataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "The state object that is to be loaded",
                    "type": "Object"
                }
            ],
            "dtopt": "Callbacks",
            "name": "DataTable.defaults.stateLoadParams",
            "example": [
                "\n   // Remove a saved filter, so filtering is never loaded\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"stateSave\": true,\n       \"stateLoadParams\": function (settings, data) {\n         data.oSearch.sSearch = \"\";\n       }\n     } );\n   } );",
                "\n   // Disallow state loading by returning false\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"stateSave\": true,\n       \"stateLoadParams\": function (settings, data) {\n         return false;\n       }\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 10988,
            "description": "Callback that is called when the state has been loaded from the state saving method\nand the DataTables settings object has been modified as a result of the loaded state.",
            "type": "function",
            "params": [
                {
                    "name": "settings",
                    "description": "DataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "The state object that was loaded",
                    "type": "Object"
                }
            ],
            "dtopt": "Callbacks",
            "name": "DataTable.defaults.stateLoaded",
            "example": [
                "\n   // Show an alert with the filtering value that was saved\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"stateSave\": true,\n       \"stateLoaded\": function (settings, data) {\n         alert( 'Saved filter was: '+data.oSearch.sSearch );\n       }\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11012,
            "description": "Save the table state. This function allows you to define where and how the state\ninformation for the table is stored By default DataTables will use `localStorage`\nbut you might wish to use a server-side database or cookies.",
            "type": "function",
            "itemtype": "method",
            "name": "DataTable.defaults.stateSaveCallback",
            "params": [
                {
                    "name": "settings",
                    "description": "DataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "The state object to be saved",
                    "type": "Object"
                }
            ],
            "dtopt": "Callbacks",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"stateSave\": true,\n       \"stateSaveCallback\": function (settings, data) {\n         // Send an Ajax request to the server with the state object\n         $.ajax( {\n           \"url\": \"/state_save\",\n           \"data\": data,\n           \"dataType\": \"json\",\n           \"method\": \"POST\"\n           \"success\": function () {}\n         } );\n       }\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11051,
            "description": "Callback which allows modification of the state to be saved. Called when the table\nhas changed state a new state save is required. This method allows modification of\nthe state saving object prior to actually doing the save, including addition or\nother state properties or modification. Note that for plug-in authors, you should\nuse the `stateSaveParams` event to save parameters for a plug-in.",
            "type": "function",
            "params": [
                {
                    "name": "settings",
                    "description": "DataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "The state object to be saved",
                    "type": "Object"
                }
            ],
            "dtopt": "Callbacks",
            "name": "DataTable.defaults.stateSaveParams",
            "example": [
                "\n   // Remove a saved filter, so filtering is never saved\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"stateSave\": true,\n       \"stateSaveParams\": function (settings, data) {\n         data.oSearch.sSearch = \"\";\n       }\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11078,
            "description": "Duration for which the saved state information is considered valid. After this period\nhas elapsed the state will be returned to the default.\nValue is given in seconds.",
            "type": "int",
            "default": "7200 <i>(2 hours)</i>",
            "dtopt": "Options",
            "name": "DataTable.defaults.stateDuration",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"stateDuration\": 60*60*24; // 1 day\n     } );\n   } )"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11098,
            "description": "When enabled DataTables will not make a request to the server for the first\npage draw - rather it will use the data already on the page (no sorting etc\nwill be applied to it), thus saving on an XHR at load time. `deferLoading`\nis used to indicate that deferred loading is required, but it is also used\nto tell DataTables how many records there are in the full table (allowing\nthe information element and pagination to be displayed correctly). In the case\nwhere a filtering is applied to the table on initial load, this can be\nindicated by giving the parameter as an array, where the first element is\nthe number of records available after filtering and the second element is the\nnumber of records without filtering (allowing the table information element\nto be shown correctly).",
            "type": "int | array",
            "default": "null",
            "dtopt": "Options",
            "name": "DataTable.defaults.deferLoading",
            "example": [
                "\n   // 57 records available in the table, no filtering applied\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"serverSide\": true,\n       \"ajax\": \"scripts/server_processing.php\",\n       \"deferLoading\": 57\n     } );\n   } );",
                "\n   // 57 records after filtering, 100 without filtering (an initial filter applied)\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"serverSide\": true,\n       \"ajax\": \"scripts/server_processing.php\",\n       \"deferLoading\": [ 57, 100 ],\n       \"search\": {\n         \"search\": \"my_filter\"\n       }\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11142,
            "description": "Number of rows to display on a single page when using pagination. If\nfeature enabled (`lengthChange`) then the end user will be able to override\nthis to a custom setting using a pop-up menu.",
            "type": "int",
            "default": "10",
            "dtopt": "Options",
            "name": "DataTable.defaults.pageLength",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"pageLength\": 50\n     } );\n   } )"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11162,
            "description": "Define the starting point for data display when using DataTables with\npagination. Note that this parameter is the number of records, rather than\nthe page number, so if you have 10 records per page and want to start on\nthe third page, it should be \"20\".",
            "type": "int",
            "default": "0",
            "dtopt": "Options",
            "name": "DataTable.defaults.displayStart",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"displayStart\": 20\n     } );\n   } )"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11183,
            "description": "By default DataTables allows keyboard navigation of the table (sorting, paging,\nand filtering) by adding a `tabindex` attribute to the required elements. This\nallows you to tab through the controls and press the enter key to activate them.\nThe tabindex is default 0, meaning that the tab follows the flow of the document.\nYou can overrule this using this parameter if you wish. Use a value of -1 to\ndisable built-in keyboard navigation.",
            "type": "int",
            "default": "0",
            "dtopt": "Options",
            "name": "DataTable.defaults.tabIndex",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"tabIndex\": 1\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11206,
            "description": "Classes that DataTables assigns to the various components and features\nthat it adds to the HTML table. This allows classes to be configured\nduring initialisation in addition to through the static\n{@link DataTable.ext.oStdClasses} object).",
            "name": "DataTable.defaults.classes",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11217,
            "description": "All strings that DataTables uses in the user interface that it creates\nare defined in this object, allowing you to modified them individually or\ncompletely replace them all as required.",
            "name": "DataTable.defaults.language",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11225,
            "description": "Strings that are used for WAI-ARIA labels and controls only (these are not\nactually visible on the page, but will be read by screenreaders, and thus\nmust be internationalised as well).",
            "name": "DataTable.defaults.language.aria",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11233,
            "description": "ARIA label that is added to the table headers when the column may be\nsorted ascending by activing the column (click or return when focused).\nNote that the column header is prefixed to this string.",
            "type": "string",
            "default": ": activate to sort column ascending",
            "dtopt": "Language",
            "name": "DataTable.defaults.language.aria.sortAscending",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"language\": {\n         \"aria\": {\n           \"sortAscending\": \" - click/return to sort ascending\"\n         }\n       }\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11256,
            "description": "ARIA label that is added to the table headers when the column may be\nsorted descending by activing the column (click or return when focused).\nNote that the column header is prefixed to this string.",
            "type": "string",
            "default": ": activate to sort column ascending",
            "dtopt": "Language",
            "name": "DataTable.defaults.language.aria.sortDescending",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"language\": {\n         \"aria\": {\n           \"sortDescending\": \" - click/return to sort descending\"\n         }\n       }\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11280,
            "description": "Pagination string used by DataTables for the built-in pagination\ncontrol types.",
            "name": "DataTable.defaults.language.paginate",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11287,
            "description": "Text to use when using the 'full_numbers' type of pagination for the\nbutton to take the user to the first page.",
            "type": "string",
            "default": "First",
            "dtopt": "Language",
            "name": "DataTable.defaults.language.paginate.first",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"language\": {\n         \"paginate\": {\n           \"first\": \"First page\"\n         }\n       }\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11310,
            "description": "Text to use when using the 'full_numbers' type of pagination for the\nbutton to take the user to the last page.",
            "type": "string",
            "default": "Last",
            "dtopt": "Language",
            "name": "DataTable.defaults.language.paginate.last",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"language\": {\n         \"paginate\": {\n           \"last\": \"Last page\"\n         }\n       }\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11333,
            "description": "Text to use for the 'next' pagination button (to take the user to the\nnext page).",
            "type": "string",
            "default": "Next",
            "dtopt": "Language",
            "name": "DataTable.defaults.language.paginate.next",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"language\": {\n         \"paginate\": {\n           \"next\": \"Next page\"\n         }\n       }\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11356,
            "description": "Text to use for the 'previous' pagination button (to take the user to\nthe previous page).",
            "type": "string",
            "default": "Previous",
            "dtopt": "Language",
            "name": "DataTable.defaults.language.paginate.previous",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"language\": {\n         \"paginate\": {\n           \"previous\": \"Previous page\"\n         }\n       }\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11379,
            "description": "This string is shown in preference to `zeroRecords` when the table is\nempty of data (regardless of filtering). Note that this is an optional\nparameter - if it is not given, the value of `zeroRecords` will be used\ninstead (either the default or given value).",
            "type": "string",
            "default": "No data available in table",
            "dtopt": "Language",
            "name": "DataTable.defaults.language.emptyTable",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"language\": {\n         \"emptyTable\": \"No data available in table\"\n       }\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11402,
            "description": "This string gives information to the end user about the information\nthat is current on display on the page. The following tokens can be\nused in the string and will be dynamically replaced as the table\ndisplay updates. This tokens can be placed anywhere in the string, or\nremoved as needed by the language requires:\n\n* `\\_START\\_` - Display index of the first record on the current page\n* `\\_END\\_` - Display index of the last record on the current page\n* `\\_TOTAL\\_` - Number of records in the table after filtering\n* `\\_MAX\\_` - Number of records in the table without filtering\n* `\\_PAGE\\_` - Current page number\n* `\\_PAGES\\_` - Total number of pages of data in the table",
            "type": "string",
            "default": "Showing _START_ to _END_ of _TOTAL_ entries",
            "dtopt": "Language",
            "name": "DataTable.defaults.language.info",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"language\": {\n         \"info\": \"Showing page _PAGE_ of _PAGES_\"\n       }\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11434,
            "description": "Display information string for when the table is empty. Typically the\nformat of this string should match `info`.",
            "type": "string",
            "default": "Showing 0 to 0 of 0 entries",
            "dtopt": "Language",
            "name": "DataTable.defaults.language.infoEmpty",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"language\": {\n         \"infoEmpty\": \"No entries to show\"\n       }\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11455,
            "description": "When a user filters the information in a table, this string is appended\nto the information (`info`) to give an idea of how strong the filtering\nis. The variable _MAX_ is dynamically updated.",
            "type": "string",
            "default": "(filtered from _MAX_ total entries)",
            "dtopt": "Language",
            "name": "DataTable.defaults.language.infoFiltered",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"language\": {\n         \"infoFiltered\": \" - filtering from _MAX_ records\"\n       }\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11477,
            "description": "If can be useful to append extra information to the info string at times,\nand this variable does exactly that. This information will be appended to\nthe `info` (`infoEmpty` and `infoFiltered` in whatever combination they are\nbeing used) at all times.",
            "type": "string",
            "default": "<i>Empty string</i>",
            "dtopt": "Language",
            "name": "DataTable.defaults.language.infoPostFix",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"language\": {\n         \"infoPostFix\": \"All records shown are derived from real information.\"\n       }\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11500,
            "description": "This decimal place operator is a little different from the other\nlanguage options since DataTables doesn't output floating point\nnumbers, so it won't ever use this for display of a number. Rather,\nwhat this parameter does is modify the sort methods of the table so\nthat numbers which are in a format which has a character other than\na period (`.`) as a decimal place will be sorted numerically.\n\nNote that numbers with different decimal places cannot be shown in\nthe same table and still be sortable, the table must be consistent.\nHowever, multiple different tables on the page can use different\ndecimal place characters.",
            "type": "string",
            "default": "",
            "dtopt": "Language",
            "name": "DataTable.defaults.language.decimal",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"language\": {\n         \"decimal\": \",\"\n         \"thousands\": \".\"\n       }\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11531,
            "description": "DataTables has a build in number formatter (`formatNumber`) which is\nused to format large numbers that are used in the table information.\nBy default a comma is used, but this can be trivially changed to any\ncharacter you wish with this parameter.",
            "type": "string",
            "default": ",",
            "dtopt": "Language",
            "name": "DataTable.defaults.language.thousands",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"language\": {\n         \"thousands\": \"'\"\n       }\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11554,
            "description": "Detail the action that will be taken when the drop down menu for the\npagination length option is changed. The '_MENU_' variable is replaced\nwith a default select list of 10, 25, 50 and 100, and can be replaced\nwith a custom select box if required.",
            "type": "string",
            "default": "Show _MENU_ entries",
            "dtopt": "Language",
            "name": "DataTable.defaults.language.lengthMenu",
            "example": [
                "\n   // Language change only\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"language\": {\n         \"lengthMenu\": \"Display _MENU_ records\"\n       }\n     } );\n   } );",
                "\n   // Language and options change\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"language\": {\n         \"lengthMenu\": 'Display <select>'+\n           '<option value=\"10\">10</option>'+\n           '<option value=\"20\">20</option>'+\n           '<option value=\"30\">30</option>'+\n           '<option value=\"40\">40</option>'+\n           '<option value=\"50\">50</option>'+\n           '<option value=\"-1\">All</option>'+\n           '</select> records'\n       }\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11595,
            "description": "When using Ajax sourced data and during the first draw when DataTables is\ngathering the data, this message is shown in an empty row in the table to\nindicate to the end user the the data is being loaded. Note that this\nparameter is not used when loading data by server-side processing, just\nAjax sourced data with client-side processing.",
            "type": "string",
            "default": "Loading...",
            "dtopt": "Language",
            "name": "DataTable.defaults.language.loadingRecords",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"language\": {\n         \"loadingRecords\": \"Please wait - loading...\"\n       }\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11619,
            "description": "Text which is displayed when the table is processing a user action\n(usually a sort command or similar).",
            "type": "string",
            "default": "Processing...",
            "dtopt": "Language",
            "name": "DataTable.defaults.language.processing",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"language\": {\n         \"processing\": \"DataTables is currently busy\"\n       }\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11640,
            "description": "Details the actions that will be taken when the user types into the\nfiltering input text box. The variable \"_INPUT_\", if used in the string,\nis replaced with the HTML text box for the filtering input allowing\ncontrol over where it appears in the string. If \"_INPUT_\" is not given\nthen the input box is appended to the string automatically.",
            "type": "string",
            "default": "Search:",
            "dtopt": "Language",
            "name": "DataTable.defaults.language.search",
            "example": [
                "\n   // Input text box will be appended at the end automatically\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"language\": {\n         \"search\": \"Filter records:\"\n       }\n     } );\n   } );",
                "\n   // Specify where the filter should appear\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"language\": {\n         \"search\": \"Apply filter _INPUT_ to table\"\n       }\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11675,
            "description": "Assign a `placeholder` attribute to the search `input` element",
            "type": "string",
            "default": "",
            "dtopt": "Language",
            "name": "DataTable.defaults.language.searchPlaceholder",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11686,
            "description": "All of the language information can be stored in a file on the\nserver-side, which DataTables will look up if this parameter is passed.\nIt must store the URL of the language file, which is in a JSON format,\nand the object has the same properties as the oLanguage object in the\ninitialiser object (i.e. the above parameters). Please refer to one of\nthe example language files to see how this works in action.",
            "type": "string",
            "default": "<i>Empty string - i.e. disabled</i>",
            "dtopt": "Language",
            "name": "DataTable.defaults.language.url",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"language\": {\n         \"url\": \"http://www.sprymedia.co.uk/dataTables/lang.txt\"\n       }\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11711,
            "description": "Text shown inside the table records when the is no information to be\ndisplayed after filtering. `emptyTable` is shown when there is simply no\ninformation in the table at all (regardless of filtering).",
            "type": "string",
            "default": "No matching records found",
            "dtopt": "Language",
            "name": "DataTable.defaults.language.zeroRecords",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"language\": {\n         \"zeroRecords\": \"No records to display\"\n       }\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11734,
            "description": "This parameter allows you to have define the global filtering state at\ninitialisation time. As an object the `search` parameter must be\ndefined, but all other parameters are optional. When `regex` is true,\nthe search string will be treated as a regular expression, when false\n(default) it will be treated as a straight string. When `smart`\nDataTables will use it's smart filtering methods (to word match at\nany point in the data), when false this will not be done.",
            "extends": "DataTable.models.oSearch",
            "dtopt": "Options",
            "name": "DataTable.defaults.search",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"search\": {\"search\": \"Initial search\"}\n     } );\n   } )"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11758,
            "description": "__Deprecated__ The functionality provided by this parameter has now been\nsuperseded by that provided through `ajax`, which should be used instead.\n\nBy default DataTables will look for the property `data` (or `aaData` for\ncompatibility with DataTables 1.9-) when obtaining data from an Ajax\nsource or for server-side processing - this parameter allows that\nproperty to be changed. You can use Javascript dotted object notation to\nget a data source for multiple levels of nesting.",
            "type": "string",
            "default": "data",
            "dtopt": "Server-side",
            "name": "DataTable.defaults.ajaxDataProp",
            "deprecated": true,
            "deprecationMessage": "1.10. Please use `ajax` for this functionality now.",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11779,
            "description": "__Deprecated__ The functionality provided by this parameter has now been\nsuperseded by that provided through `ajax`, which should be used instead.\n\nYou can instruct DataTables to load data from an external\nsource using this parameter (use aData if you want to pass data in you\nalready have). Simply provide a url a JSON object can be obtained from.",
            "type": "string",
            "default": "null",
            "dtopt": "Server-side",
            "name": "DataTable.defaults.ajaxSource",
            "deprecated": true,
            "deprecationMessage": "1.10. Please use `ajax` for this functionality now.",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11798,
            "description": "This initialisation variable allows you to specify exactly where in the\nDOM you want DataTables to inject the various controls it adds to the page\n(for example you might want the pagination controls at the top of the\ntable). DIV elements (with or without a custom class) can also be added to\naid styling. The follow syntax is used:\n  <ul>\n    <li>The following options are allowed:\n      <ul>\n        <li>'l' - Length changing</li>\n        <li>'f' - Filtering input</li>\n        <li>'t' - The table!</li>\n        <li>'i' - Information</li>\n        <li>'p' - Pagination</li>\n        <li>'r' - pRocessing</li>\n      </ul>\n    </li>\n    <li>The following constants are allowed:\n      <ul>\n        <li>'H' - jQueryUI theme \"header\" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>\n        <li>'F' - jQueryUI theme \"footer\" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>\n      </ul>\n    </li>\n    <li>The following syntax is expected:\n      <ul>\n        <li>'&lt;' and '&gt;' - div elements</li>\n        <li>'&lt;\"class\" and '&gt;' - div with a class</li>\n        <li>'&lt;\"#id\" and '&gt;' - div with an ID</li>\n      </ul>\n    </li>\n    <li>Examples:\n      <ul>\n        <li>'&lt;\"wrapper\"flipt&gt;'</li>\n        <li>'&lt;lf&lt;t&gt;ip&gt;'</li>\n      </ul>\n    </li>\n  </ul>",
            "type": "string",
            "default": "lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>\n   <\"H\"lfr>t<\"F\"ip> <i>(when `jQueryUI` is true)</i>",
            "dtopt": "Options",
            "name": "DataTable.defaults.dom",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"dom\": '&lt;\"top\"i&gt;rt&lt;\"bottom\"flp&gt;&lt;\"clear\"&gt;'\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11852,
            "description": "Search delay option. This will throttle full table searches that use the\nDataTables provided search input element (it does not effect calls to\n`dt-api search()`, providing a delay before the search is made.",
            "type": "integer",
            "default": "0",
            "dtopt": "Options",
            "name": "DataTable.defaults.searchDelay",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"searchDelay\": 200\n     } );\n   } )"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11872,
            "description": "DataTables features six different built-in options for the buttons to\ndisplay for pagination control:\n\n* `numbers` - Page number buttons only\n* `simple` - 'Previous' and 'Next' buttons only\n* 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers\n* `full` - 'First', 'Previous', 'Next' and 'Last' buttons\n* `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers\n* `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers\n \nFurther methods can be added using {@link DataTable.ext.oPagination}.",
            "type": "string",
            "default": "simple_numbers",
            "dtopt": "Options",
            "name": "DataTable.defaults.pagingType",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"pagingType\": \"full_numbers\"\n     } );\n   } )"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11900,
            "description": "Enable horizontal scrolling. When a table is too wide to fit into a\ncertain layout, or you have a large number of columns in the table, you\ncan enable x-scrolling to show the table in a viewport, which can be\nscrolled. This property can be `true` which will allow the table to\nscroll horizontally when needed, or any CSS unit, or a number (in which\ncase it will be treated as a pixel measurement). Setting as simply `true`\nis recommended.",
            "type": "boolean|string",
            "default": "<i>blank string - i.e. disabled</i>",
            "dtopt": "Features",
            "name": "DataTable.defaults.scrollX",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"scrollX\": true,\n       \"scrollCollapse\": true\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11925,
            "description": "This property can be used to force a DataTable to use more width than it\nmight otherwise do when x-scrolling is enabled. For example if you have a\ntable which requires to be well spaced, this parameter is useful for\n\"over-sizing\" the table, and thus forcing scrolling. This property can by\nany CSS unit, or a number (in which case it will be treated as a pixel\nmeasurement).",
            "type": "string",
            "default": "<i>blank string - i.e. disabled</i>",
            "dtopt": "Options",
            "name": "DataTable.defaults.scrollXInner",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"scrollX\": \"100%\",\n       \"scrollXInner\": \"110%\"\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11949,
            "description": "Enable vertical scrolling. Vertical scrolling will constrain the DataTable\nto the given height, and enable scrolling for any data which overflows the\ncurrent viewport. This can be used as an alternative to paging to display\na lot of data in a small area (although paging and scrolling can both be\nenabled at the same time). This property can be any CSS unit, or a number\n(in which case it will be treated as a pixel measurement).",
            "type": "string",
            "default": "<i>blank string - i.e. disabled</i>",
            "dtopt": "Features",
            "name": "DataTable.defaults.scrollY",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"scrollY\": \"200px\",\n       \"paginate\": false\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11973,
            "description": "__Deprecated__ The functionality provided by this parameter has now been\nsuperseded by that provided through `ajax`, which should be used instead.\n\nSet the HTTP method that is used to make the Ajax call for server-side\nprocessing or Ajax sourced data.",
            "type": "string",
            "default": "GET",
            "dtopt": "Server-side",
            "name": "DataTable.defaults.serverMethod",
            "deprecated": true,
            "deprecationMessage": "1.10. Please use `ajax` for this functionality now.",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 11991,
            "description": "DataTables makes use of renderers when displaying HTML elements for\na table. These renderers can be added or modified by plug-ins to\ngenerate suitable mark-up for a site. For example the Bootstrap\nintegration plug-in for DataTables uses a paging button renderer to\ndisplay pagination buttons in the mark-up required by Bootstrap.\n\nFor further information about the renderers available see\nDataTable.ext.renderer",
            "type": "string|object",
            "default": "null",
            "name": "DataTable.defaults.renderer",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12009,
            "description": "Set the data property name that DataTables should use to get a row's id\nto set as the `id` property in the node.",
            "type": "string",
            "default": "DT_RowId",
            "name": "DataTable.defaults.rowId",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12029,
            "description": "Column options that can be given to DataTables at initialisation time.",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12034,
            "description": "Define which column(s) an order will occur on for this column. This\nallows a column's ordering to take multiple columns into account when\ndoing a sort or use the data from a different column. For example first\nname / last name columns make sense to do a multi-column sort over the\ntwo columns.",
            "type": "array|int",
            "default": "null <i>Takes the value of the column index automatically</i>",
            "name": "DataTable.defaults.column.orderData",
            "dtopt": "Columns",
            "example": [
                "\n   // Using `columnDefs`\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columnDefs\": [\n         { \"orderData\": [ 0, 1 ], \"targets\": [ 0 ] },\n         { \"orderData\": [ 1, 0 ], \"targets\": [ 1 ] },\n         { \"orderData\": 2, \"targets\": [ 2 ] }\n       ]\n     } );\n   } );",
                "\n   // Using `columns`\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columns\": [\n         { \"orderData\": [ 0, 1 ] },\n         { \"orderData\": [ 1, 0 ] },\n         { \"orderData\": 2 },\n         null,\n         null\n       ]\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12076,
            "description": "You can control the default ordering direction, and even alter the\nbehaviour of the sort handler (i.e. only allow ascending ordering etc)\nusing this parameter.",
            "type": "array",
            "default": "[ 'asc', 'desc' ]",
            "name": "DataTable.defaults.column.orderSequence",
            "dtopt": "Columns",
            "example": [
                "\n   // Using `columnDefs`\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columnDefs\": [\n         { \"orderSequence\": [ \"asc\" ], \"targets\": [ 1 ] },\n         { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ], \"targets\": [ 2 ] },\n         { \"orderSequence\": [ \"desc\" ], \"targets\": [ 3 ] }\n       ]\n     } );\n   } );",
                "\n   // Using `columns`\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columns\": [\n         null,\n         { \"orderSequence\": [ \"asc\" ] },\n         { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ] },\n         { \"orderSequence\": [ \"desc\" ] },\n         null\n       ]\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12115,
            "description": "Enable or disable filtering on the data in this column.",
            "type": "boolean",
            "default": "true",
            "name": "DataTable.defaults.column.searchable",
            "dtopt": "Columns",
            "example": [
                "\n   // Using `columnDefs`\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columnDefs\": [\n         { \"searchable\": false, \"targets\": [ 0 ] }\n       ] } );\n   } );",
                "\n   // Using `columns`\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columns\": [\n         { \"searchable\": false },\n         null,\n         null,\n         null,\n         null\n       ] } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12148,
            "description": "Enable or disable ordering on this column.",
            "type": "boolean",
            "default": "true",
            "name": "DataTable.defaults.column.orderable",
            "dtopt": "Columns",
            "example": [
                "\n   // Using `columnDefs`\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columnDefs\": [\n         { \"orderable\": false, \"targets\": [ 0 ] }\n       ] } );\n   } );",
                "\n   // Using `columns`\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columns\": [\n         { \"orderable\": false },\n         null,\n         null,\n         null,\n         null\n       ] } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12181,
            "description": "Enable or disable the display of this column.",
            "type": "boolean",
            "default": "true",
            "name": "DataTable.defaults.column.visible",
            "dtopt": "Columns",
            "example": [
                "\n   // Using `columnDefs`\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columnDefs\": [\n         { \"visible\": false, \"targets\": [ 0 ] }\n       ] } );\n   } );",
                "\n   // Using `columns`\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columns\": [\n         { \"visible\": false },\n         null,\n         null,\n         null,\n         null\n       ] } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12214,
            "description": "Developer definable function that is called whenever a cell is created (Ajax source,\netc) or processed for input (DOM source). This can be used as a compliment to mRender\nallowing you to modify the DOM element (add background colour for example) when the\nelement is available.",
            "type": "function",
            "params": [
                {
                    "name": "td",
                    "description": "The TD node that has been created",
                    "type": "Element"
                },
                {
                    "name": "cellData",
                    "description": "The Data for the cell",
                    "type": "*"
                },
                {
                    "name": "rowData",
                    "description": "The data for the whole row",
                    "type": "Array|object"
                },
                {
                    "name": "row",
                    "description": "The row index for the aoData data store",
                    "type": "Int"
                },
                {
                    "name": "col",
                    "description": "The column index for aoColumns",
                    "type": "Int"
                }
            ],
            "name": "DataTable.defaults.column.createdCell",
            "dtopt": "Columns",
            "example": [
                "\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columnDefs\": [ {\n         \"targets\": [3],\n         \"createdCell\": function (td, cellData, rowData, row, col) {\n           if ( cellData == \"1.7\" ) {\n             $(td).css('color', 'blue')\n           }\n         }\n       } ]\n     });\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12246,
            "description": "This parameter has been replaced by `data` in DataTables to ensure naming\nconsistency. `dataProp` can still be used, as there is backwards\ncompatibility in DataTables for this option, but it is strongly\nrecommended that you use `data` in preference to `dataProp`.",
            "name": "DataTable.defaults.column.dataProp",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12255,
            "description": "This property can be used to read data from any data source property,\nincluding deeply nested objects / properties. `data` can be given in a\nnumber of different ways which effect its behaviour:\n\n* `integer` - treated as an array index for the data source. This is the\n  default that DataTables uses (incrementally increased for each column).\n* `string` - read an object property from the data source. There are\n  three 'special' options that can be used in the string to alter how\n  DataTables reads the data from the source object:\n   * `.` - Dotted Javascript notation. Just as you use a `.` in\n     Javascript to read from nested objects, so to can the options\n     specified in `data`. For example: `browser.version` or\n     `browser.name`. If your object parameter name contains a period, use\n     `\\\\` to escape it - i.e. `first\\\\.name`.\n   * `[]` - Array notation. DataTables can automatically combine data\n     from and array source, joining the data with the characters provided\n     between the two brackets. For example: `name[, ]` would provide a\n     comma-space separated list from the source array. If no characters\n     are provided between the brackets, the original array source is\n     returned.\n   * `()` - Function notation. Adding `()` to the end of a parameter will\n     execute a function of the name given. For example: `browser()` for a\n     simple function on the data source, `browser.version()` for a\n     function in a nested property or even `browser().version` to get an\n     object property if the function called returns an object. Note that\n     function notation is recommended for use in `render` rather than\n     `data` as it is much simpler to use as a renderer.\n* `null` - use the original data source for the row rather than plucking\n  data directly from it. This action has effects on two other\n  initialisation options:\n   * `defaultContent` - When null is given as the `data` option and\n     `defaultContent` is specified for the column, the value defined by\n     `defaultContent` will be used for the cell.\n   * `render` - When null is used for the `data` option and the `render`\n     option is specified for the column, the whole data source for the\n     row is used for the renderer.\n* `function` - the function given will be executed whenever DataTables\n  needs to set or get the data for a cell in the column. The function\n  takes three parameters:\n   * Parameters:\n     * `{array|object}` The data source for the row\n     * `{string}` The type call data requested - this will be 'set' when\n       setting data or 'filter', 'display', 'type', 'sort' or undefined\n       when gathering data. Note that when `undefined` is given for the\n       type DataTables expects to get the raw data for the object back<\n     * `{*}` Data to set when the second parameter is 'set'.\n   * Return:\n     * The return value from the function is not required when 'set' is\n       the type of call, but otherwise the return is what will be used\n       for the data requested.\n\nNote that `data` is a getter and setter option. If you just require\nformatting of data for output, you will likely want to use `render` which\nis simply a getter and thus simpler to use.\n\nNote that prior to DataTables 1.9.2 `data` was called `mDataProp`. The\nname change reflects the flexibility of this property and is consistent\nwith the naming of mRender. If 'mDataProp' is given, then it will still\nbe used by DataTables, as it automatically maps the old name to the new\nif required.",
            "type": "string|int|function|null",
            "default": "null <i>Use automatically calculated column index</i>",
            "name": "DataTable.defaults.column.data",
            "dtopt": "Columns",
            "example": [
                "\n   // Read table data from objects\n   // JSON structure for each row:\n   //   {\n   //      \"engine\": {value},\n   //      \"browser\": {value},\n   //      \"platform\": {value},\n   //      \"version\": {value},\n   //      \"grade\": {value}\n   //   }\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"ajaxSource\": \"sources/objects.txt\",\n       \"columns\": [\n         { \"data\": \"engine\" },\n         { \"data\": \"browser\" },\n         { \"data\": \"platform\" },\n         { \"data\": \"version\" },\n         { \"data\": \"grade\" }\n       ]\n     } );\n   } );",
                "\n   // Read information from deeply nested objects\n   // JSON structure for each row:\n   //   {\n   //      \"engine\": {value},\n   //      \"browser\": {value},\n   //      \"platform\": {\n   //         \"inner\": {value}\n   //      },\n   //      \"details\": [\n   //         {value}, {value}\n   //      ]\n   //   }\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"ajaxSource\": \"sources/deep.txt\",\n       \"columns\": [\n         { \"data\": \"engine\" },\n         { \"data\": \"browser\" },\n         { \"data\": \"platform.inner\" },\n         { \"data\": \"platform.details.0\" },\n         { \"data\": \"platform.details.1\" }\n       ]\n     } );\n   } );",
                "\n   // Using `data` as a function to provide different information for\n   // sorting, filtering and display. In this case, currency (price)\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columnDefs\": [ {\n         \"targets\": [ 0 ],\n         \"data\": function ( source, type, val ) {\n           if (type === 'set') {\n             source.price = val;\n             // Store the computed dislay and filter values for efficiency\n             source.price_display = val==\"\" ? \"\" : \"$\"+numberFormat(val);\n             source.price_filter  = val==\"\" ? \"\" : \"$\"+numberFormat(val)+\" \"+val;\n             return;\n           }\n           else if (type === 'display') {\n             return source.price_display;\n           }\n           else if (type === 'filter') {\n             return source.price_filter;\n           }\n           // 'sort', 'type' and undefined all just use the integer\n           return source.price;\n         }\n       } ]\n     } );\n   } );",
                "\n   // Using default content\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columnDefs\": [ {\n         \"targets\": [ 0 ],\n         \"data\": null,\n         \"defaultContent\": \"Click to edit\"\n       } ]\n     } );\n   } );",
                "\n   // Using array notation - outputting a list from an array\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columnDefs\": [ {\n         \"targets\": [ 0 ],\n         \"data\": \"name[, ]\"\n       } ]\n     } );\n   } );\n"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12427,
            "description": "This property is the rendering partner to `data` and it is suggested that\nwhen you want to manipulate data for display (including filtering,\nsorting etc) without altering the underlying data for the table, use this\nproperty. `render` can be considered to be the the read only companion to\n`data` which is read / write (then as such more complex). Like `data`\nthis option can be given in a number of different ways to effect its\nbehaviour:\n\n* `integer` - treated as an array index for the data source. This is the\n  default that DataTables uses (incrementally increased for each column).\n* `string` - read an object property from the data source. There are\n  three 'special' options that can be used in the string to alter how\n  DataTables reads the data from the source object:\n   * `.` - Dotted Javascript notation. Just as you use a `.` in\n     Javascript to read from nested objects, so to can the options\n     specified in `data`. For example: `browser.version` or\n     `browser.name`. If your object parameter name contains a period, use\n     `\\\\` to escape it - i.e. `first\\\\.name`.\n   * `[]` - Array notation. DataTables can automatically combine data\n     from and array source, joining the data with the characters provided\n     between the two brackets. For example: `name[, ]` would provide a\n     comma-space separated list from the source array. If no characters\n     are provided between the brackets, the original array source is\n     returned.\n   * `()` - Function notation. Adding `()` to the end of a parameter will\n     execute a function of the name given. For example: `browser()` for a\n     simple function on the data source, `browser.version()` for a\n     function in a nested property or even `browser().version` to get an\n     object property if the function called returns an object.\n* `object` - use different data for the different data types requested by\n  DataTables ('filter', 'display', 'type' or 'sort'). The property names\n  of the object is the data type the property refers to and the value can\n  defined using an integer, string or function using the same rules as\n  `render` normally does. Note that an `_` option _must_ be specified.\n  This is the default value to use if you haven't specified a value for\n  the data type requested by DataTables.\n* `function` - the function given will be executed whenever DataTables\n  needs to set or get the data for a cell in the column. The function\n  takes three parameters:\n   * Parameters:\n     * {array|object} The data source for the row (based on `data`)\n     * {string} The type call data requested - this will be 'filter',\n       'display', 'type' or 'sort'.\n     * {array|object} The full data source for the row (not based on\n       `data`)\n   * Return:\n     * The return value from the function is what will be used for the\n       data requested.",
            "type": "string|int|function|object|null",
            "default": "null Use the data source value.",
            "name": "DataTable.defaults.column.render",
            "dtopt": "Columns",
            "example": [
                "\n   // Create a comma separated list from an array of objects\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"ajaxSource\": \"sources/deep.txt\",\n       \"columns\": [\n         { \"data\": \"engine\" },\n         { \"data\": \"browser\" },\n         {\n           \"data\": \"platform\",\n           \"render\": \"[, ].name\"\n         }\n       ]\n     } );\n   } );",
                "\n   // Execute a function to obtain data\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columnDefs\": [ {\n         \"targets\": [ 0 ],\n         \"data\": null, // Use the full data source object for the renderer's source\n         \"render\": \"browserName()\"\n       } ]\n     } );\n   } );",
                "\n   // As an object, extracting different data for the different types\n   // This would be used with a data source such as:\n   //   { \"phone\": 5552368, \"phone_filter\": \"5552368 555-2368\", \"phone_display\": \"555-2368\" }\n   // Here the `phone` integer is used for sorting and type detection, while `phone_filter`\n   // (which has both forms) is used for filtering for if a user inputs either format, while\n   // the formatted phone number is the one that is shown in the table.\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columnDefs\": [ {\n         \"targets\": [ 0 ],\n         \"data\": null, // Use the full data source object for the renderer's source\n         \"render\": {\n           \"_\": \"phone\",\n           \"filter\": \"phone_filter\",\n           \"display\": \"phone_display\"\n         }\n       } ]\n     } );\n   } );",
                "\n   // Use as a function to create a link from the data source\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columnDefs\": [ {\n         \"targets\": [ 0 ],\n         \"data\": \"download_link\",\n         \"render\": function ( data, type, full ) {\n           return '<a href=\"'+data+'\">Download</a>';\n         }\n       } ]\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12549,
            "description": "Change the cell type created for the column - either TD cells or TH cells. This\ncan be useful as TH cells have semantic meaning in the table body, allowing them\nto act as a header for a row (you may wish to add scope='row' to the TH elements).",
            "type": "string",
            "default": "td",
            "name": "DataTable.defaults.column.cellType",
            "dtopt": "Columns",
            "example": [
                "\n   // Make the first column use TH cells\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columnDefs\": [ {\n         \"targets\": [ 0 ],\n         \"cellType\": \"th\"\n       } ]\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12573,
            "description": "Class to give to each cell in this column.",
            "type": "string",
            "default": "<i>Empty string</i>",
            "name": "DataTable.defaults.column.class",
            "dtopt": "Columns",
            "example": [
                "\n   // Using `columnDefs`\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columnDefs\": [\n         { \"class\": \"my_class\", \"targets\": [ 0 ] }\n       ]\n     } );\n   } );",
                "\n   // Using `columns`\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columns\": [\n         { \"class\": \"my_class\" },\n         null,\n         null,\n         null,\n         null\n       ]\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12607,
            "description": "When DataTables calculates the column widths to assign to each column,\nit finds the longest string in each column and then constructs a\ntemporary table and reads the widths from that. The problem with this\nis that \"mmm\" is much wider then \"iiii\", but the latter is a longer\nstring - thus the calculation can go wrong (doing it properly and putting\nit into an DOM object and measuring that is horribly(!) slow). Thus as\na \"work around\" we provide this option. It will append its value to the\ntext that is found to be the longest string for the column - i.e. padding.\nGenerally you shouldn't need this!",
            "type": "string",
            "default": "<i>Empty string<i>",
            "name": "DataTable.defaults.column.contentPadding",
            "dtopt": "Columns",
            "example": [
                "\n   // Using `columns`\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columns\": [\n         null,\n         null,\n         null,\n         {\n           \"contentPadding\": \"mmm\"\n         }\n       ]\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12641,
            "description": "Allows a default value to be given for a column's data, and will be used\nwhenever a null data source is encountered (this can be because `data`\nis set to null, or because the data source itself is null).",
            "type": "string",
            "default": "null",
            "name": "DataTable.defaults.column.defaultContent",
            "dtopt": "Columns",
            "example": [
                "\n   // Using `columnDefs`\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columnDefs\": [\n         {\n           \"data\": null,\n           \"defaultContent\": \"Edit\",\n           \"targets\": [ -1 ]\n         }\n       ]\n     } );\n   } );",
                "\n   // Using `columns`\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columns\": [\n         null,\n         null,\n         null,\n         {\n           \"data\": null,\n           \"defaultContent\": \"Edit\"\n         }\n       ]\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12684,
            "description": "This parameter is only used in DataTables' server-side processing. It can\nbe exceptionally useful to know what columns are being displayed on the\nclient side, and to map these to database fields. When defined, the names\nalso allow DataTables to reorder information from the server if it comes\nback in an unexpected order (i.e. if you switch your columns around on the\nclient-side, your server-side code does not also need updating).",
            "type": "string",
            "default": "<i>Empty string</i>",
            "name": "DataTable.defaults.column.name",
            "dtopt": "Columns",
            "example": [
                "\n   // Using `columnDefs`\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columnDefs\": [\n         { \"name\": \"engine\", \"targets\": [ 0 ] },\n         { \"name\": \"browser\", \"targets\": [ 1 ] },\n         { \"name\": \"platform\", \"targets\": [ 2 ] },\n         { \"name\": \"version\", \"targets\": [ 3 ] },\n         { \"name\": \"grade\", \"targets\": [ 4 ] }\n       ]\n     } );\n   } );",
                "\n   // Using `columns`\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columns\": [\n         { \"name\": \"engine\" },\n         { \"name\": \"browser\" },\n         { \"name\": \"platform\" },\n         { \"name\": \"version\" },\n         { \"name\": \"grade\" }\n       ]\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12728,
            "description": "Defines a data source type for the ordering which can be used to read\nreal-time information from the table (updating the internally cached\nversion) prior to ordering. This allows ordering to occur on user\neditable elements such as form inputs.",
            "type": "string",
            "default": "std",
            "name": "DataTable.defaults.column.orderDataType",
            "dtopt": "Columns",
            "example": [
                "\n   // Using `columnDefs`\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columnDefs\": [\n         { \"orderDataType\": \"dom-text\", \"targets\": [ 2, 3 ] },\n         { \"type\": \"numeric\", \"targets\": [ 3 ] },\n         { \"orderDataType\": \"dom-select\", \"targets\": [ 4 ] },\n         { \"orderDataType\": \"dom-checkbox\", \"targets\": [ 5 ] }\n       ]\n     } );\n   } );",
                "\n   // Using `columns`\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columns\": [\n         null,\n         null,\n         { \"orderDataType\": \"dom-text\" },\n         { \"orderDataType\": \"dom-text\", \"type\": \"numeric\" },\n         { \"orderDataType\": \"dom-select\" },\n         { \"orderDataType\": \"dom-checkbox\" }\n       ]\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12770,
            "description": "The title of this column.",
            "type": "string",
            "default": "null <i>Derived from the 'TH' value for this column in the\n   original HTML table.</i>",
            "name": "DataTable.defaults.column.title",
            "dtopt": "Columns",
            "example": [
                "\n   // Using `columnDefs`\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columnDefs\": [\n         { \"title\": \"My column title\", \"targets\": [ 0 ] }\n       ]\n     } );\n   } );",
                "\n   // Using `columns`\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columns\": [\n         { \"title\": \"My column title\" },\n         null,\n         null,\n         null,\n         null\n       ]\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12806,
            "description": "The type allows you to specify how the data for this column will be\nordered. Four types (string, numeric, date and html (which will strip\nHTML tags before ordering)) are currently available. Note that only date\nformats understood by Javascript's Date() object will be accepted as type\ndate. For example: \"Mar 26, 2008 5:03 PM\". May take the values: 'string',\n'numeric', 'date' or 'html' (by default). Further types can be adding\nthrough plug-ins.",
            "type": "string",
            "default": "null <i>Auto-detected from raw data</i>",
            "name": "DataTable.defaults.column.type",
            "dtopt": "Columns",
            "example": [
                "\n   // Using `columnDefs`\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columnDefs\": [\n         { \"type\": \"html\", \"targets\": [ 0 ] }\n       ]\n     } );\n   } );",
                "\n   // Using `columns`\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columns\": [\n         { \"type\": \"html\" },\n         null,\n         null,\n         null,\n         null\n       ]\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12847,
            "description": "Defining the width of the column, this parameter may take any CSS value\n(3em, 20px etc). DataTables applies 'smart' widths to columns which have not\nbeen given a specific width through this interface ensuring that the table\nremains readable.",
            "type": "string",
            "default": "null <i>Automatic</i>",
            "name": "DataTable.defaults.column.width",
            "dtopt": "Columns",
            "example": [
                "\n   // Using `columnDefs`\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columnDefs\": [\n         { \"width\": \"20%\", \"targets\": [ 0 ] }\n       ]\n     } );\n   } );",
                "\n   // Using `columns`\n   $(document).ready( function() {\n     $('#example').dataTable( {\n       \"columns\": [\n         { \"width\": \"20%\" },\n         null,\n         null,\n         null,\n         null\n       ]\n     } );\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12889,
            "description": "DataTables settings object - this holds all the information needed for a\ngiven table, including configuration, data and current application of the\ntable options. DataTables does not have a single instance for each DataTable\nwith the settings attached to that instance, but rather instances of the\nDataTable \"class\" are created on-the-fly as needed (typically by a\n$().dataTable() call) and the settings object is then applied to that\ninstance.\n\nNote that this object is related to {@link DataTable.defaults} but this\none is the internal data store for DataTables's cache of columns. It should\nNOT be manipulated outside of DataTables. Any configuration should be done\nthrough the initialisation options.",
            "todo": [
                "Really should attach the settings object to individual instances so we\n   don't need to create new instances on each $().dataTable() call (if the\n   table already exists). It would also save passing oSettings around and\n   into every single function. However",
                "this is a very significant\n   architecture change for DataTables and will almost certainly break\n   backwards compatibility with older installations. This is something that\n   will be done in 2.0."
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12912,
            "description": "Primary features of DataTables and their enablement state.",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12918,
            "description": "Flag to say if DataTables should automatically try to calculate the\noptimum table and columns widths (true) or not (false).\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "boolean",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12927,
            "description": "Delay the creation of TR and TD elements until they are actually\nneeded by a driven page draw. This can give a significant speed\nincrease for Ajax source and Javascript source data, but makes no\ndifference at all fro DOM and server-side processing tables.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "boolean",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12938,
            "description": "Enable filtering on the table or not. Note that if this is disabled\nthen there is no filtering at all on the table, including fnFilter.\nTo just remove the filtering input use sDom and remove the 'f' option.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "boolean",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12948,
            "description": "Table information element (the 'Showing x of y records' div) enable\nflag.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "boolean",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12957,
            "description": "Present a user control allowing the end user to change the page size\nwhen pagination is enabled.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "boolean",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12966,
            "description": "Pagination enabled or not. Note that if this is disabled then length\nchanging must also be disabled.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "boolean",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12975,
            "description": "Processing indicator enable flag whenever DataTables is enacting a\nuser request - typically an Ajax request for server-side processing.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "boolean",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12984,
            "description": "Server-side processing enabled flag - when enabled DataTables will\nget all data from the server for every draw - there is no filtering,\nsorting or paging done on the client-side.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "boolean",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 12994,
            "description": "Sorting enablement flag.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "boolean",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13002,
            "description": "Multi-column sorting\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "boolean",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13010,
            "description": "Apply a class to the columns which are being sorted to provide a\nvisual highlight or not. This can slow things down when enabled since\nthere is a lot of DOM interaction.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "boolean",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13020,
            "description": "State saving enablement flag.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "boolean",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13030,
            "description": "Scrolling settings for a table.",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13035,
            "description": "When the table is shorter in height than sScrollY, collapse the\ntable container down to the height of the table (when true).\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "boolean",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13044,
            "description": "Width of the scrollbar for the web-browser's platform. Calculated\nduring table initialisation.",
            "type": "int",
            "default": "0",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13052,
            "description": "Viewport width for horizontal scrolling. Horizontal scrolling is\ndisabled if an empty string.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "string",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13061,
            "description": "Width to expand the table to when using x-scrolling. Typically you\nshould not need to use this.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "string",
            "deprecated": true,
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13071,
            "description": "Viewport height for vertical scrolling. Vertical scrolling is disabled\nif an empty string.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "string",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13081,
            "description": "Language information for the table.",
            "extends": "DataTable.defaults.oLanguage",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13087,
            "description": "Information callback function. See\n{@link DataTable.defaults.fnInfoCallback}",
            "type": "function",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13096,
            "description": "Browser support parameters",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13101,
            "description": "Indicate if the browser incorrectly calculates width:100% inside a\nscrolling element (IE6/7)",
            "type": "boolean",
            "default": "false",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13109,
            "description": "Determine if the vertical scrollbar is on the right or left of the\nscrolling container - needed for rtl language layout, although not\nall browsers move the scrollbar (Safari).",
            "type": "boolean",
            "default": "false",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13118,
            "description": "Flag for if `getBoundingClientRect` is fully supported or not",
            "type": "boolean",
            "default": "false",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13125,
            "description": "Browser scrollbar width",
            "type": "integer",
            "default": "0",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13137,
            "description": "Array referencing the nodes which are used for the features. The\nparameters of this object match what is allowed by sDom - i.e.\n  <ul>\n    <li>'l' - Length changing</li>\n    <li>'f' - Filtering input</li>\n    <li>'t' - The table!</li>\n    <li>'i' - Information</li>\n    <li>'p' - Pagination</li>\n    <li>'r' - pRocessing</li>\n  </ul>",
            "type": "array",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13153,
            "description": "Store data information - see {@link DataTable.models.oRow} for detailed\ninformation.",
            "type": "array",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13161,
            "description": "Array of indexes which are in the current display (after filtering etc)",
            "type": "array",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13168,
            "description": "Array of indexes for display - no filtering",
            "type": "array",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13175,
            "description": "Map of row ids to data indexes",
            "type": "object",
            "default": "{}",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13182,
            "description": "Store information about each column that is in use",
            "type": "array",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13189,
            "description": "Store information about the table's header",
            "type": "array",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13196,
            "description": "Store information about the table's footer",
            "type": "array",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13203,
            "description": "Store the applied global search information in case we want to force a\nresearch or compare the old search to a new one.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "extends": "DataTable.models.oSearch",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13213,
            "description": "Store the applied search for each column - see\n{@link DataTable.models.oSearch} for the format that is used for the\nfiltering information for each column.",
            "type": "array",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13222,
            "description": "Sorting that is applied to the table. Note that the inner arrays are\nused in the following manner:\n<ul>\n  <li>Index 0 - column number</li>\n  <li>Index 1 - current sorting direction</li>\n</ul>\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "array",
            "todo": [
                "These inner arrays should really be objects"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13236,
            "description": "Sorting that is always applied to the table (i.e. prefixed in front of\naaSorting).\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "array",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13246,
            "description": "Classes to use for the striping of a table.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "array",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13255,
            "description": "If restoring a table - we should restore its striping classes as well",
            "type": "array",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13262,
            "description": "If restoring a table - we should restore its width",
            "type": "int",
            "default": "0",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13269,
            "description": "Callback functions array for every time a row is inserted (i.e. on a draw).",
            "type": "array",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13276,
            "description": "Callback functions for the header on each draw.",
            "type": "array",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13283,
            "description": "Callback function for the footer on each draw.",
            "type": "array",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13290,
            "description": "Array of callback functions for draw callback functions",
            "type": "array",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13297,
            "description": "Array of callback functions for row created function",
            "type": "array",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13304,
            "description": "Callback functions for just before the table is redrawn. A return of\nfalse will be used to cancel the draw.",
            "type": "array",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13312,
            "description": "Callback functions for when the table has been initialised.",
            "type": "array",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13320,
            "description": "Callbacks for modifying the settings to be stored for state saving, prior to\nsaving state.",
            "type": "array",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13328,
            "description": "Callbacks for modifying the settings that have been stored for state saving\nprior to using the stored values to restore the state.",
            "type": "array",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13336,
            "description": "Callbacks for operating on the settings object once the saved state has been\nloaded",
            "type": "array",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13344,
            "description": "Cache the table ID for quick access",
            "type": "string",
            "default": "<i>Empty string</i>",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13351,
            "description": "The TABLE node for the main table",
            "type": "node",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13358,
            "description": "Permanent ref to the thead element",
            "type": "node",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13365,
            "description": "Permanent ref to the tfoot element - if it exists",
            "type": "node",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13372,
            "description": "Permanent ref to the tbody element",
            "type": "node",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13379,
            "description": "Cache the wrapper node (contains all DataTables controlled elements)",
            "type": "node",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13386,
            "description": "Indicate if when using server-side processing the loading of data\nshould be deferred until the second draw.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "boolean",
            "default": "false",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13396,
            "description": "Indicate if all required information has been read in",
            "type": "boolean",
            "default": "false",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13403,
            "description": "Information about open rows. Each object in the array has the parameters\n'nTr' and 'nParent'",
            "type": "array",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13411,
            "description": "Dictate the positioning of DataTables' control elements - see\n{@link DataTable.model.oInit.sDom}.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "string",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13421,
            "description": "Search delay (in mS)",
            "type": "integer",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13428,
            "description": "Which type of pagination should be used.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "string",
            "default": "two_button",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13437,
            "description": "The state duration (for `stateSave`) in seconds.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "int",
            "default": "0",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13446,
            "description": "Array of callback functions for state saving. Each array element is an\nobject with the following parameters:\n  <ul>\n    <li>function:fn - function to call. Takes two parameters, oSettings\n      and the JSON string to save that has been thus far created. Returns\n      a JSON string to be inserted into a json object\n      (i.e. '\"param\": [ 0, 1, 2]')</li>\n    <li>string:sName - name of callback</li>\n  </ul>",
            "type": "array",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13461,
            "description": "Array of callback functions for state loading. Each array element is an\nobject with the following parameters:\n  <ul>\n    <li>function:fn - function to call. Takes two parameters, oSettings\n      and the object stored. May return false to cancel state loading</li>\n    <li>string:sName - name of callback</li>\n  </ul>",
            "type": "array",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13474,
            "description": "State that was saved. Useful for back reference",
            "type": "object",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13481,
            "description": "State that was loaded. Useful for back reference",
            "type": "object",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13488,
            "description": "Source url for AJAX data for the table.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "string",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13497,
            "description": "Property from a given object from which to read the table data from. This\ncan be an empty string (when not server-side processing), in which case\nit is  assumed an an array is given directly.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "string",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13507,
            "description": "Note if draw should be blocked while getting data",
            "type": "boolean",
            "default": "true",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13514,
            "description": "The last jQuery XHR object that was used for server-side data gathering.\nThis can be used for working with the XHR information in one of the\ncallbacks",
            "type": "object",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13523,
            "description": "JSON returned from the server in the last Ajax request",
            "type": "object",
            "default": "undefined",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13530,
            "description": "Data submitted as part of the last Ajax request",
            "type": "object",
            "default": "undefined",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13537,
            "description": "Function to get the server-side data.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "function",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13545,
            "description": "Functions which are called prior to sending an Ajax request so extra\nparameters can easily be sent to the server",
            "type": "array",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13553,
            "description": "Send the XHR HTTP method - GET or POST (could be PUT or DELETE if\nrequired).\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "string",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13562,
            "description": "Format numbers for display.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "function",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13570,
            "description": "List of options that can be used for the user selectable length menu.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "array",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13579,
            "description": "Counter for the draws that the table does. Also used as a tracker for\nserver-side processing",
            "type": "int",
            "default": "0",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13587,
            "description": "Indicate if a redraw is being done - useful for Ajax",
            "type": "boolean",
            "default": "false",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13594,
            "description": "Draw index (iDraw) of the last error when parsing the returned data",
            "type": "int",
            "default": "-1",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13601,
            "description": "Paging display length",
            "type": "int",
            "default": "10",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13608,
            "description": "Paging start point - aiDisplay index",
            "type": "int",
            "default": "0",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13615,
            "description": "Server-side processing - number of records in the result set\n(i.e. before filtering), Use fnRecordsTotal rather than\nthis property to get the value of the number of records, regardless of\nthe server-side processing setting.",
            "type": "int",
            "default": "0",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13626,
            "description": "Server-side processing - number of records in the current display set\n(i.e. after filtering). Use fnRecordsDisplay rather than\nthis property to get the value of the number of records, regardless of\nthe server-side processing setting.",
            "type": "boolean",
            "default": "0",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13637,
            "description": "The classes to use for the table",
            "type": "object",
            "default": "{}",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13644,
            "description": "Flag attached to the settings object so you can check in the draw\ncallback if filtering has been done in the draw. Deprecated in favour of\nevents.",
            "type": "boolean",
            "default": "false",
            "deprecated": true,
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13654,
            "description": "Flag attached to the settings object so you can check in the draw\ncallback if sorting has been done in the draw. Deprecated in favour of\nevents.",
            "type": "boolean",
            "default": "false",
            "deprecated": true,
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13664,
            "description": "Indicate that if multiple rows are in the header and there is more than\none unique cell per column, if the top one (true) or bottom one (false)\nshould be used for sorting / title by DataTables.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "type": "boolean",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13674,
            "description": "Initialisation object that is used for the table",
            "type": "object",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13681,
            "description": "Destroy callback functions - for plug-ins to attach themselves to the\ndestroy so they can clean up markup and events.",
            "type": "array",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13690,
            "description": "Get the number of records in the current record set, before filtering",
            "type": "function",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13701,
            "description": "Get the number of records in the current record set, after filtering",
            "type": "function",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13712,
            "description": "Get the display end point - aiDisplay index",
            "type": "function",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13738,
            "description": "The DataTables object for this table",
            "type": "object",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13745,
            "description": "Unique identifier for each instance of the DataTables object. If there\nis an ID on the table node, then it takes that value, otherwise an\nincrementing internal counter is used.",
            "type": "string",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13754,
            "description": "tabindex attribute value that is added to DataTables control elements, allowing\nkeyboard navigation of the table and its controls.",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13760,
            "description": "DIV container for the footer scrolling table if scrolling",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13765,
            "description": "DIV container for the footer scrolling table if scrolling",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13770,
            "description": "Last applied sort",
            "type": "array",
            "default": "[]",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13777,
            "description": "Stored plug-in instances",
            "type": "object",
            "default": "{}",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13784,
            "description": "Function used to get a row's id from the row's data",
            "type": "function",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13791,
            "description": "Data location where to store a row's id",
            "type": "string",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13799,
            "description": "Extension object for DataTables that is used to provide all extension\noptions.\n\nNote that the `DataTable.ext` object is available through\n`jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is\nalso aliased to `jQuery.fn.dataTableExt` for historic reasons.",
            "extends": "DataTable.models.ext",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13811,
            "description": "DataTables extensions\n\nThis namespace acts as a collection area for plug-ins that can be used to\nextend DataTables capabilities. Indeed many of the build in methods\nuse this method to provide their own capabilities (sorting methods for\nexample).\n\nNote that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy\nreasons",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13825,
            "description": "Buttons. For use with the Buttons extension for DataTables. This is\ndefined here so other extensions can define buttons regardless of load\norder. It is _not_ used by DataTables core.",
            "type": "object",
            "default": "{}",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13836,
            "description": "Element class names",
            "type": "object",
            "default": "{}",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13845,
            "description": "DataTables build type (expanded by the download builder)",
            "type": "string",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13853,
            "description": "Error reporting.\n\nHow should DataTables report an error. Can take the value 'alert',\n'throw', 'none' or a function.",
            "type": "string|function",
            "default": "alert",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13865,
            "description": "Feature plug-ins.\n\nThis is an array of objects which describe the feature plug-ins that are\navailable to DataTables. These feature plug-ins are then available for\nuse through the `dom` initialisation option.\n\nEach feature plug-in is described by an object which must have the\nfollowing properties:\n\n* `fnInit` - function that is used to initialise the plug-in,\n* `cFeature` - a character so the feature can be enabled by the `dom`\n  instillation option. This is case sensitive.\n\nThe `fnInit` function has the following input parameters:\n\n1. `{object}` DataTables settings object: see\n   {@link DataTable.models.oSettings}\n\nAnd the following return is expected:\n\n* {node|null} The element which contains your feature. Note that the\n  return may also be void if your plug-in does not require to inject any\n  DOM elements into DataTables control (`dom`) - for example this might\n  be useful when developing a plug-in which allows table control via\n  keyboard entry",
            "type": "array",
            "example": [
                "\n   $.fn.dataTable.ext.features.push( {\n     \"fnInit\": function( oSettings ) {\n       return new TableTools( { \"oDTSettings\": oSettings } );\n     },\n     \"cFeature\": \"T\"\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13905,
            "description": "Row searching.\n\nThis method of searching is complimentary to the default type based\nsearching, and a lot more comprehensive as it allows you complete control\nover the searching logic. Each element in this array is a function\n(parameters described below) that is called for every row in the table,\nand your logic decides if it should be included in the searching data set\nor not.\n\nSearching functions have the following input parameters:\n\n1. `{object}` DataTables settings object: see\n   {@link DataTable.models.oSettings}\n2. `{array|object}` Data for the row to be processed (same as the\n   original format that was passed in as the data source, or an array\n   from a DOM data source\n3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which\n   can be useful to retrieve the `TR` element if you need DOM interaction.\n\nAnd the following return is expected:\n\n* {boolean} Include the row in the searched result set (true) or not\n  (false)\n\nNote that as with the main search ability in DataTables, technically this\nis \"filtering\", since it is subtractive. However, for consistency in\nnaming we call it searching here.",
            "type": "array",
            "default": "[]",
            "example": [
                "\n   // The following example shows custom search being applied to the\n   // fourth column (i.e. the data[3] index) based on two input values\n   // from the end-user, matching the data in a certain range.\n   $.fn.dataTable.ext.search.push(\n     function( settings, data, dataIndex ) {\n       var min = document.getElementById('min').value * 1;\n       var max = document.getElementById('max').value * 1;\n       var version = data[3] == \"-\" ? 0 : data[3]*1;\n\n       if ( min == \"\" && max == \"\" ) {\n         return true;\n       }\n       else if ( min == \"\" && version < max ) {\n         return true;\n       }\n       else if ( min < version && \"\" == max ) {\n         return true;\n       }\n       else if ( min < version && version < max ) {\n         return true;\n       }\n       return false;\n     }\n   );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13966,
            "description": "Selector extensions\n\nThe `selector` option can be used to extend the options available for the\nselector modifier options (`selector-modifier` object data type) that\neach of the three built in selector types offer (row, column and cell +\ntheir plural counterparts). For example the Select extension uses this\nmechanism to provide an option to select only rows, columns and cells\nthat have been marked as selected by the end user (`{selected: true}`),\nwhich can be used in conjunction with the existing built in selector\noptions.\n\nEach property is an array to which functions can be pushed. The functions\ntake three attributes:\n\n* Settings object for the host table\n* Options object (`selector-modifier` object type)\n* Array of selected item indexes\n\nThe return is an array of the resulting item indexes after the custom\nselector has been applied.",
            "type": "object",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 13997,
            "description": "Internal functions, exposed for used in plug-ins.\n\nPlease note that you should not need to use the internal methods for\nanything other than a plug-in (and even then, try to avoid if possible).\nThe internal function may change between releases.",
            "type": "object",
            "default": "{}",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 14010,
            "description": "Legacy configuration options. Enable and disable legacy options that\nare available in DataTables.",
            "type": "object",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 14017,
            "description": "Enable / disable DataTables 1.9 compatible server-side processing\nrequests",
            "type": "boolean",
            "default": "null",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 14028,
            "description": "Pagination plug-in methods.\n\nEach entry in this object is a function and defines which buttons should\nbe shown by the pagination rendering method that is used for the table:\n{@link DataTable.ext.renderer.pageButton}. The renderer addresses how the\nbuttons are displayed in the document, while the functions here tell it\nwhat buttons to display. This is done by returning an array of button\ndescriptions (what each button will do).\n\nPagination types (the four built in options and any additional plug-in\noptions defined here) can be used through the `paginationType`\ninitialisation parameter.\n\nThe functions defined take two parameters:\n\n1. `{int} page` The current page index\n2. `{int} pages` The number of pages in the table\n\nEach function is expected to return an array where each element of the\narray can be one of:\n\n* `first` - Jump to first page when activated\n* `last` - Jump to last page when activated\n* `previous` - Show previous page when activated\n* `next` - Show next page when activated\n* `{int}` - Show page of the index given\n* `{array}` - A nested array containing the above elements to add a\n  containing 'DIV' element (might be useful for styling).\n\nNote that DataTables v1.9- used this object slightly differently whereby\nan object with two functions would be defined for each plug-in. That\nability is still supported by DataTables 1.10+ to provide backwards\ncompatibility, but this option of use is now decremented and no longer\ndocumented in DataTables 1.10+.",
            "type": "object",
            "default": "{}",
            "example": [
                "\n   // Show previous, next and current page buttons only\n   $.fn.dataTableExt.oPagination.current = function ( page, pages ) {\n     return [ 'previous', page, 'next' ];\n   };"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 14082,
            "description": "Ordering plug-ins - custom data source\n\nThe extension options for ordering of data available here is complimentary\nto the default type based ordering that DataTables typically uses. It\nallows much greater control over the the data that is being used to\norder a column, but is necessarily therefore more complex.\n\nThis type of ordering is useful if you want to do ordering based on data\nlive from the DOM (for example the contents of an 'input' element) rather\nthan just the static string that DataTables knows of.\n\nThe way these plug-ins work is that you create an array of the values you\nwish to be ordering for the column in question and then return that\narray. The data in the array much be in the index order of the rows in\nthe table (not the currently ordering order!). Which order data gathering\nfunction is run here depends on the `dt-init columns.orderDataType`\nparameter that is used for the column (if any).\n\nThe functions defined take two parameters:\n\n1. `{object}` DataTables settings object: see\n   {@link DataTable.models.oSettings}\n2. `{int}` Target column index\n\nEach function is expected to return an array:\n\n* `{array}` Data for the column to be ordering upon",
            "type": "array",
            "example": [
                "\n   // Ordering using `input` node values\n   $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )\n   {\n     return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {\n       return $('input', td).val();\n     } );\n   }"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 14125,
            "description": "Type based plug-ins.\n\nEach column in DataTables has a type assigned to it, either by automatic\ndetection or by direct assignment using the `type` option for the column.\nThe type of a column will effect how it is ordering and search (plug-ins\ncan also make use of the column type if required).",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 14136,
            "description": "Type detection functions.\n\nThe functions defined in this object are used to automatically detect\na column's type, making initialisation of DataTables super easy, even\nwhen complex data is in the table.\n\nThe functions defined take two parameters:\n\n 1. `{*}` Data from the column cell to be analysed\n 2. `{settings}` DataTables settings object. This can be used to\n    perform context specific type detection - for example detection\n    based on language settings such as using a comma for a decimal\n    place. Generally speaking the options from the settings will not\n    be required\n\nEach function is expected to return:\n\n* `{string|null}` Data type detected, or null if unknown (and thus\n  pass it on to the other type detection functions.",
            "type": "array",
            "example": [
                "\n   // Currency type detection plug-in:\n   $.fn.dataTable.ext.type.detect.push(\n     function ( data, settings ) {\n       // Check the numeric part\n       if ( ! $.isNumeric( data.substring(1) ) ) {\n         return null;\n       }\n\n       // Check prefixed by currency\n       if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {\n         return 'currency';\n       }\n       return null;\n     }\n   );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 14179,
            "description": "Type based search formatting.\n\nThe type based searching functions can be used to pre-format the\ndata to be search on. For example, it can be used to strip HTML\ntags or to de-format telephone numbers for numeric only searching.\n\nNote that is a search is not defined for a column of a given type,\nno search formatting will be performed.\n\nPre-processing of searching data plug-ins - When you assign the sType\nfor a column (or have it automatically detected for you by DataTables\nor a type detection plug-in), you will typically be using this for\ncustom sorting, but it can also be used to provide custom searching\nby allowing you to pre-processing the data and returning the data in\nthe format that should be searched upon. This is done by adding\nfunctions this object with a parameter name which matches the sType\nfor that target column. This is the corollary of <i>afnSortData</i>\nfor searching data.\n\nThe functions defined take a single parameter:\n\n 1. `{*}` Data from the column cell to be prepared for searching\n\nEach function is expected to return:\n\n* `{string|null}` Formatted string that will be used for the searching.",
            "type": "object",
            "default": "{}",
            "example": [
                "\n   $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {\n     return d.replace(/\\n/g,\" \").replace( /<.*?>/g, \"\" );\n   }"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 14218,
            "description": "Type based ordering.\n\nThe column type tells DataTables what ordering to apply to the table\nwhen a column is sorted upon. The order for each type that is defined,\nis defined by the functions available in this object.\n\nEach ordering option can be described by three properties added to\nthis object:\n\n* `{type}-pre` - Pre-formatting function\n* `{type}-asc` - Ascending order function\n* `{type}-desc` - Descending order function\n\nAll three can be used together, only `{type}-pre` or only\n`{type}-asc` and `{type}-desc` together. It is generally recommended\nthat only `{type}-pre` is used, as this provides the optimal\nimplementation in terms of speed, although the others are provided\nfor compatibility with existing Javascript sort functions.\n\n`{type}-pre`: Functions defined take a single parameter:\n\n 1. `{*}` Data from the column cell to be prepared for ordering\n\nAnd return:\n\n* `{*}` Data to be sorted upon\n\n`{type}-asc` and `{type}-desc`: Functions are typical Javascript sort\nfunctions, taking two parameters:\n\n 1. `{*}` Data to compare to the second parameter\n 2. `{*}` Data to compare to the first parameter\n\nAnd returning:\n\n* `{*}` Ordering match: <0 if first parameter should be sorted lower\n  than the second parameter, ===0 if the two parameters are equal and\n  >0 if the first parameter should be sorted height than the second\n  parameter.",
            "type": "object",
            "default": "{}",
            "example": [
                "\n   // Numeric ordering of formatted numbers with a pre-formatter\n   $.extend( $.fn.dataTable.ext.type.order, {\n     \"string-pre\": function(x) {\n       a = (a === \"-\" || a === \"\") ? 0 : a.replace( /[^\\d\\-\\.]/g, \"\" );\n       return parseFloat( a );\n     }\n   } );",
                "\n   // Case-sensitive string ordering, with no pre-formatting method\n   $.extend( $.fn.dataTable.ext.order, {\n     \"string-case-asc\": function(x,y) {\n       return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n     },\n     \"string-case-desc\": function(x,y) {\n       return ((x < y) ? 1 : ((x > y) ? -1 : 0));\n     }\n   } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 14285,
            "description": "Unique DataTables instance counter",
            "type": "int",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 14301,
            "description": "Version check function.",
            "type": "function",
            "deprecated": true,
            "deprecationMessage": "Since 1.10",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 14309,
            "description": "Index for what 'this' index API functions should use",
            "type": "int",
            "deprecated": true,
            "deprecationMessage": "Since v1.10",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 14317,
            "description": "jQuery UI class container",
            "type": "object",
            "deprecated": true,
            "deprecationMessage": "Since v1.10",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 14325,
            "description": "Software version",
            "type": "string",
            "deprecated": true,
            "deprecationMessage": "Since v1.10",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 14874,
            "description": "Helpers for `columns.render`.\n\nThe options defined here can be used with the `columns.render` initialisation\noption to provide a display renderer. The following functions are defined:\n\n* `number` - Will format numeric data (defined by `columns.data`) for\n  display, retaining the original unformatted data for sorting and filtering.\n  It takes 5 parameters:\n  * `string` - Thousands grouping separator\n  * `string` - Decimal point indicator\n  * `integer` - Number of decimal points to show\n  * `string` (optional) - Prefix.\n  * `string` (optional) - Postfix (/suffix).\n* `text` - Escape HTML to help prevent XSS attacks. It has no optional\n  parameters.",
            "example": [
                "\n  // Column definition using the number renderer\n  {\n    data: \"salary\",\n    render: $.fn.dataTable.render.number( '\\'', '.', 0, '$' )\n  }"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 14950,
            "description": "Create a wrapper function for exporting an internal functions to an external API.",
            "params": [
                {
                    "name": "fn",
                    "description": "API function name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "wrapped function",
                "type": "Function"
            },
            "memberof": "DataTable#internal",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 14967,
            "description": "Reference to internal functions for use by plug-in developers. Note that\nthese methods are references to internal functions and are considered to be\nprivate. If you use these methods, be aware that they are liable to change\nbetween versions.",
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 15093,
            "description": "Draw event, fired whenever the table is redrawn on the page, at the same\npoint as fnDrawCallback. This may be useful for binding events or\nperforming calculations when the table is altered at all.",
            "name": "",
            "itemtype": "event",
            "params": [
                {
                    "name": "e",
                    "description": "jQuery event object",
                    "type": "Event"
                },
                {
                    "name": "o",
                    "description": "DataTables settings object {@link DataTable.models.oSettings}",
                    "type": "Object"
                }
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 15103,
            "description": "Search event, fired when the searching applied to the table (using the\nbuilt-in global search, or column filters) is altered.",
            "name": "",
            "itemtype": "event",
            "params": [
                {
                    "name": "e",
                    "description": "jQuery event object",
                    "type": "Event"
                },
                {
                    "name": "o",
                    "description": "DataTables settings object {@link DataTable.models.oSettings}",
                    "type": "Object"
                }
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 15112,
            "description": "Page change event, fired when the paging of the table is altered.",
            "name": "",
            "itemtype": "event",
            "params": [
                {
                    "name": "e",
                    "description": "jQuery event object",
                    "type": "Event"
                },
                {
                    "name": "o",
                    "description": "DataTables settings object {@link DataTable.models.oSettings}",
                    "type": "Object"
                }
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 15120,
            "description": "Order event, fired when the ordering applied to the table is altered.",
            "name": "",
            "itemtype": "event",
            "params": [
                {
                    "name": "e",
                    "description": "jQuery event object",
                    "type": "Event"
                },
                {
                    "name": "o",
                    "description": "DataTables settings object {@link DataTable.models.oSettings}",
                    "type": "Object"
                }
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 15128,
            "description": "DataTables initialisation complete event, fired when the table is fully\ndrawn, including Ajax data loaded, if Ajax data is required.",
            "name": "",
            "itemtype": "event",
            "params": [
                {
                    "name": "e",
                    "description": "jQuery event object",
                    "type": "Event"
                },
                {
                    "name": "oSettings",
                    "description": "DataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "json",
                    "description": "The JSON object request from the server - only\n   present if client-side Ajax sourced data is used</li></ol>",
                    "type": "Object"
                }
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 15139,
            "description": "State save event, fired when the table has changed state a new state save\nis required. This event allows modification of the state saving object\nprior to actually doing the save, including addition or other state\nproperties (for plug-ins) or modification of a DataTables core property.",
            "name": "",
            "itemtype": "event",
            "params": [
                {
                    "name": "e",
                    "description": "jQuery event object",
                    "type": "Event"
                },
                {
                    "name": "oSettings",
                    "description": "DataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "json",
                    "description": "The state information to be saved",
                    "type": "Object"
                }
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 15151,
            "description": "State load event, fired when the table is loading state from the stored\ndata, but prior to the settings object being modified by the saved state\n- allowing modification of the saved state is required or loading of\nstate for a plug-in.",
            "name": "",
            "itemtype": "event",
            "params": [
                {
                    "name": "e",
                    "description": "jQuery event object",
                    "type": "Event"
                },
                {
                    "name": "oSettings",
                    "description": "DataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "json",
                    "description": "The saved state information",
                    "type": "Object"
                }
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 15163,
            "description": "State loaded event, fired when state has been loaded from stored data and\nthe settings object has been modified by the loaded data.",
            "name": "",
            "itemtype": "event",
            "params": [
                {
                    "name": "e",
                    "description": "jQuery event object",
                    "type": "Event"
                },
                {
                    "name": "oSettings",
                    "description": "DataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "json",
                    "description": "The saved state information",
                    "type": "Object"
                }
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 15173,
            "description": "Processing event, fired when DataTables is doing some kind of processing\n(be it, order, searcg or anything else). It can be used to indicate to\nthe end user that there is something happening, or that something has\nfinished.",
            "name": "",
            "itemtype": "event",
            "params": [
                {
                    "name": "e",
                    "description": "jQuery event object",
                    "type": "Event"
                },
                {
                    "name": "oSettings",
                    "description": "DataTables settings object",
                    "type": "Object"
                },
                {
                    "name": "bShow",
                    "description": "Flag for if DataTables is doing processing or not",
                    "type": "Boolean"
                }
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 15185,
            "description": "Ajax (XHR) event, fired whenever an Ajax request is completed from a\nrequest to made to the server for new data. This event is called before\nDataTables processed the returned data, so it can also be used to pre-\nprocess the data returned from the server, if needed.\n\nNote that this trigger is called in `fnServerData`, if you override\n`fnServerData` and which to use this event, you need to trigger it in you\nsuccess function.",
            "name": "",
            "itemtype": "event",
            "params": [
                {
                    "name": "e",
                    "description": "jQuery event object",
                    "type": "Event"
                },
                {
                    "name": "o",
                    "description": "DataTables settings object {@link DataTable.models.oSettings}",
                    "type": "Object"
                },
                {
                    "name": "json",
                    "description": "JSON returned from the server",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    // Use a custom property returned from the server in another DOM element\n    $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\n      $('#status').html( json.status );\n    } );",
                "\n    // Pre-process the data returned from the server\n    $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\n      for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {\n        json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;\n      }\n      // Note no return - manipulate the data directly in the JSON object.\n    } );"
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 15216,
            "description": "Destroy event, fired when the DataTable is destroyed by calling fnDestroy\nor passing the bDestroy:true parameter in the initialisation object. This\ncan be used to remove bound events, added DOM nodes, etc.",
            "name": "",
            "itemtype": "event",
            "params": [
                {
                    "name": "e",
                    "description": "jQuery event object",
                    "type": "Event"
                },
                {
                    "name": "o",
                    "description": "DataTables settings object {@link DataTable.models.oSettings}",
                    "type": "Object"
                }
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 15226,
            "description": "Page length change event, fired when number of records to show on each\npage (the length) is changed.",
            "name": "",
            "itemtype": "event",
            "params": [
                {
                    "name": "e",
                    "description": "jQuery event object",
                    "type": "Event"
                },
                {
                    "name": "o",
                    "description": "DataTables settings object {@link DataTable.models.oSettings}",
                    "type": "Object"
                },
                {
                    "name": "len",
                    "description": "New length",
                    "type": "Integer"
                }
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 15236,
            "description": "Column sizing has changed.",
            "name": "",
            "itemtype": "event",
            "params": [
                {
                    "name": "e",
                    "description": "jQuery event object",
                    "type": "Event"
                },
                {
                    "name": "o",
                    "description": "DataTables settings object {@link DataTable.models.oSettings}",
                    "type": "Object"
                }
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\datatables.js",
            "line": 15244,
            "description": "Column visibility has changed.",
            "name": "",
            "itemtype": "event",
            "params": [
                {
                    "name": "e",
                    "description": "jQuery event object",
                    "type": "Event"
                },
                {
                    "name": "o",
                    "description": "DataTables settings object {@link DataTable.models.oSettings}",
                    "type": "Object"
                },
                {
                    "name": "column",
                    "description": "Column index",
                    "type": "Int"
                },
                {
                    "name": "vis",
                    "description": "`false` if column now hidden, or `true` if visible",
                    "type": "Bool"
                }
            ],
            "class": "DataTable.Api"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 26,
            "description": "The function which handles the actual dir_rendering of the solution file animation\n and loading in the models",
            "itemtype": "method",
            "name": "dir_recieveData",
            "params": [
                {
                    "name": "theXMLFile",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "theSTLFiles",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 75,
            "description": "Is called whenever the user submits the part table and every entry has been\n properly filled out.",
            "itemtype": "method",
            "name": "dir_sendData",
            "params": [
                {
                    "name": "theXMLText",
                    "description": "The contents of the disassembly directions in the webpage, as a string\n in XML formatting",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 99,
            "description": "Given an HTML element corresponding to a \"confirm\" button, moves the parent element\n to the confirmed section of the webpage",
            "itemtype": "method",
            "name": "dir_confirmPair",
            "params": [
                {
                    "name": "theButton",
                    "description": "The confirm button of the element to be moved",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 120,
            "description": "Given an HTML element corresponding to a \"unconfirm\" button, moves the parent element\n to the unconfirmed section of the webpage",
            "itemtype": "method",
            "name": "dir_deconfirmPair",
            "params": [
                {
                    "name": "theButton",
                    "description": "The unconfirm button of the element to be moved",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 141,
            "description": "Given an HTML element corresponding to a \"focus\" button, makes the corresponding pair\n of parts to be displayed",
            "itemtype": "method",
            "name": "dir_changeCurrentPair",
            "params": [
                {
                    "name": "theButton",
                    "description": "The confirm button of the element to be moved",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 173,
            "description": "Given a jQuery object and a string, returns the first child of the given element with\n a tag equivalent to the given string.",
            "itemtype": "method",
            "name": "dir_grab",
            "params": [
                {
                    "name": "theTree",
                    "description": "The jQuery object whose child is to be returned",
                    "type": "JQuery Object"
                },
                {
                    "name": "theMember",
                    "description": "The name of the tag being searched",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The first child with the given tag. If such a child does not\n exist, null is returned.",
                "type": "JQuery Object"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 203,
            "description": "The dir_rendering function for the webpage",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 263,
            "description": "Accepts a string and outputs the string of all characters following the final '.' symbol\n in the string. This is used internally to extract file extensions from file names.",
            "itemtype": "method",
            "name": "dir_grabExtension",
            "params": [
                {
                    "name": "theName",
                    "description": "The file name to be processed",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the extension in the given file name. If no extension is found, the\n 'undefined' value is returned.",
                "type": "String"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 284,
            "description": "Outputs through the console the list of FileReaders in theReaders which have\n not yet completed their loading",
            "itemtype": "method",
            "name": "dir_whoIsLeft",
            "params": [
                {
                    "name": "theReaders",
                    "description": "The list of FileReaders to be checked",
                    "type": "FileReader Object List"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 313,
            "description": "Accepts a fileinput event, presumably from a file upload event listener, and assigns\n functions to each file reader listed in the event to be called upon the full loading\n of that given reader's files",
            "itemtype": "method",
            "name": "dir_readMultipleFiles",
            "params": [
                {
                    "name": "evt",
                    "description": "A fileinput event, to be given by a fileinput event listener",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 381,
            "description": "Called internally upon every recieved fileload event. Checks if every file reader in the\n array \"fileReaders\" has fully read each of their files. If so, then the function converts\n all recieved stl files into threeJS models and executes \"dir_renderParts\".",
            "itemtype": "method",
            "name": "dir_loadParts",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 469,
            "description": "Accepts two strings, a and b, and a vector, vec, and outputs a\n constructed part pair object if the two strings correspond to two\n extant parts",
            "itemtype": "method",
            "name": "dir_linkPair",
            "params": [
                {
                    "name": "a",
                    "description": "The first part name",
                    "type": "String"
                },
                {
                    "name": "b",
                    "description": "The second part name",
                    "type": "String"
                },
                {
                    "name": "vec",
                    "description": "The vector to be added to the pair",
                    "type": "Vector3"
                }
            ],
            "return": {
                "description": "The resulting pair object",
                "type": "Object"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 517,
            "description": "Links together the pairs of parts corresponding to the strings present in\n the namePairs array.",
            "itemtype": "method",
            "name": "dir_linkParts",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 546,
            "description": "Populates the webpage with data stored int the global variable theSML",
            "itemtype": "method",
            "name": "dir_parseData",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 659,
            "description": "Populates the webpage with graphical representations of the assembly pairs\n stored in the global variable assemblyPairs",
            "itemtype": "method",
            "name": "dir_insertAssemblyPairs",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 713,
            "description": "dir_dehighlights the given pair of parts",
            "itemtype": "method",
            "name": "dir_dehighlight",
            "params": [
                {
                    "name": "thePair",
                    "description": "The pair object to be dir_dehighlighted",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 732,
            "description": "dir_highlights the given pair of parts",
            "itemtype": "method",
            "name": "dir_highlight",
            "params": [
                {
                    "name": "thePair",
                    "description": "The pair object to be dir_highlighted",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 801,
            "description": "Sets the opacity of each (non-dir_highlighted) mesh object to the value of the\n slider element provided",
            "itemtype": "method",
            "name": "dir_fixOpacity",
            "params": [
                {
                    "name": "theSlider",
                    "description": "The slider which is to be referenced when setting object opacity",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 830,
            "description": "Given a mouseup event, sets corresponding internal button states for mouse-related controls",
            "itemtype": "method",
            "name": "dir_doMouseUp",
            "params": [
                {
                    "name": "theEvent",
                    "description": "",
                    "type": "Mouseup event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 850,
            "description": "Given a mousedown event, sets corresponding internal button states for mouse-related controls",
            "itemtype": "method",
            "name": "dir_doMouseDown",
            "params": [
                {
                    "name": "theEvent",
                    "description": "",
                    "type": "Mousedown event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 870,
            "description": "Given a mouseleave event, sets corresponding internal button states for mouse-related controls",
            "itemtype": "method",
            "name": "dir_doMouseLeave",
            "params": [
                {
                    "name": "theEvent",
                    "description": "",
                    "type": "Mouseup event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 887,
            "description": "Prevents the default response of the given event (used to prevent dropdown menus when right\n clicking on the display).",
            "itemtype": "method",
            "name": "dir_justDont",
            "params": [
                {
                    "name": "theEvent",
                    "description": "The event to suppress the default response of.",
                    "type": "Event Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 903,
            "description": "Given a mousedrag event, rotates the camera or adds a vector to the currently displayed pair,\n depending upon whether or not the left or right mouse button is depressed",
            "itemtype": "method",
            "name": "dir_doDrag",
            "params": [
                {
                    "name": "theEvent",
                    "description": "",
                    "type": "Mouseup event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 962,
            "description": "Given a mousewheel event, changes the distance of the camera from the center of the scene",
            "itemtype": "method",
            "name": "dir_doMouseUp",
            "params": [
                {
                    "name": "theEvent",
                    "description": "",
                    "type": "Mouseup event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 981,
            "description": "Inserts the vector view into the webpage",
            "itemtype": "method",
            "name": "dir_insertVectorView",
            "params": [
                {
                    "name": "theButton",
                    "description": "The vector viewing button",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 1083,
            "description": "Removes the vector view from the webpage",
            "itemtype": "method",
            "name": "dir_removeVectorView",
            "params": [
                {
                    "name": "theButton",
                    "description": "The vector viewing button",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 1139,
            "description": "Inserts a blank vector widget into the vector view element",
            "itemtype": "method",
            "name": "dir_addVectorToPair",
            "params": [
                {
                    "name": "theButton",
                    "description": "The \"add vector\" button",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 1202,
            "description": "Removes a vector widget from the vector view element",
            "itemtype": "method",
            "name": "dir_remVectorFromPair",
            "params": [
                {
                    "name": "theButton",
                    "description": "The \"remove\" button of the widget to be removed",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 1228,
            "description": "Updates a vector to match the values in its corresponding widget",
            "itemtype": "method",
            "name": "dir_vecEntryUpdate",
            "params": [
                {
                    "name": "theInput",
                    "description": "An input element of the vector's widget",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 1308,
            "description": "Finds and returns the index of the direction in the list of usable vector directions\n which best matches the given vector",
            "itemtype": "method",
            "name": "dir_getDir",
            "params": [
                {
                    "name": "theVec",
                    "description": "The vector to be searched with",
                    "type": "Vector3"
                }
            ],
            "return": {
                "description": "The index of the best matching direction in the list of usable vector directions",
                "type": "Int"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 1340,
            "description": "Processes the information in the webpage into an XML string and inserts a download link\n for the data into the top of the page",
            "itemtype": "method",
            "name": "dir_renderXML",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 1398,
            "description": "Initializes the lines for the XYZ compass in the display",
            "itemtype": "method",
            "name": "dir_initAxisLines",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 1439,
            "description": "Updates the lines for the XYZ compass in the display",
            "itemtype": "method",
            "name": "dir_updateAxisLines",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 1484,
            "description": "Maps a given mouse X position and mouse Y position to a point on a unit hemisphere facing\n towards the user then returns the index of the closest valid direction",
            "itemtype": "method",
            "name": "dir_getDirectionFromMouse",
            "params": [
                {
                    "name": "mouseX",
                    "description": "",
                    "type": "Float"
                },
                {
                    "name": "mouseY",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\dirConScript.js",
            "line": 1516,
            "description": "Adds a vector to the currently displayed pair based off of camera position, mouse X and mouse Y",
            "itemtype": "method",
            "name": "dir_addVectorFromMouse",
            "params": [
                {
                    "name": "mouseX",
                    "description": "The X position of the mouse",
                    "type": "Float"
                },
                {
                    "name": "mouseY",
                    "description": "The Y position of the mouse",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\jquery.js",
            "line": 890,
            "description": "Create key-value caches of limited size",
            "return": {
                "description": "Returns the Object data after storing it on itself with\n\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n\tdeleting the oldest entry",
                "type": "Function(string, object)"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\jquery.js",
            "line": 910,
            "description": "Mark a function for special use by Sizzle",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to mark",
                    "type": "Function"
                }
            ],
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\jquery.js",
            "line": 919,
            "description": "Support testing using an element",
            "params": [
                {
                    "name": "fn",
                    "description": "Passed the created element and returns a boolean result",
                    "type": "Function"
                }
            ],
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\jquery.js",
            "line": 940,
            "description": "Adds the same handler for all of the specified attrs",
            "params": [
                {
                    "name": "attrs",
                    "description": "Pipe-separated list of attributes",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "The method that will be applied",
                    "type": "Function"
                }
            ],
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\jquery.js",
            "line": 954,
            "description": "Checks document order of two siblings",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Element"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "Returns less than 0 if a precedes b, greater than 0 if a follows b",
                "type": "Number"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\jquery.js",
            "line": 982,
            "description": "Returns a function to use in pseudos for input types",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\jquery.js",
            "line": 993,
            "description": "Returns a function to use in pseudos for buttons",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\jquery.js",
            "line": 1004,
            "description": "Returns a function to use in pseudos for :enabled/:disabled",
            "params": [
                {
                    "name": "disabled",
                    "description": "true for :disabled; false for :enabled",
                    "type": "Boolean"
                }
            ],
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\jquery.js",
            "line": 1032,
            "description": "Returns a function to use in pseudos for positionals",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\jquery.js",
            "line": 1054,
            "description": "Checks a node for validity as a Sizzle context",
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Element|Object="
                }
            ],
            "return": {
                "description": "The input node if acceptable, otherwise a falsy value",
                "type": "Element|Object|Boolean"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\jquery.js",
            "line": 1066,
            "description": "Detects XML nodes",
            "params": [
                {
                    "name": "elem",
                    "description": "An element or a document",
                    "type": "Element|Object"
                }
            ],
            "return": {
                "description": "True iff elem is a non-HTML XML node",
                "type": "Boolean"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\jquery.js",
            "line": 1078,
            "description": "Sets document-related variables once based on the current document",
            "params": [
                {
                    "name": "doc",
                    "description": "An element or document object to use to set the document",
                    "type": "Element|Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the current document",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\jquery.js",
            "line": 1532,
            "description": "Document sorting and removing duplicates",
            "params": [
                {
                    "name": "results",
                    "description": "",
                    "type": "ArrayLike"
                }
            ],
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\jquery.js",
            "line": 1565,
            "description": "Utility function for retrieving the text value of an array of DOM nodes",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Array|Element"
                }
            ],
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\jquery.js",
            "line": 2594,
            "description": "A low-level selection function that works with Sizzle's compiled\n selector functions",
            "params": [
                {
                    "name": "selector",
                    "description": "A selector or a pre-compiled\n selector function built with Sizzle.compile",
                    "type": "String|Function"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Element"
                },
                {
                    "name": "results",
                    "description": "",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "seed",
                    "description": "A set of elements to match against",
                    "type": "Array",
                    "optional": true
                }
            ],
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\jquery.js",
            "line": 9606,
            "description": "Load a url into a page",
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\jquery.js",
            "line": 9698,
            "description": "Gets a window from an element",
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\jsstl.js",
            "line": 14,
            "description": "Converts a given block of binary stl data (as an arraybuffer) to a threeJS representation\n of the geometry. Function courtesy of 'tonylukasavage' from Github, who released this to\n the public domain.",
            "itemtype": "method",
            "name": "parseStlBinary",
            "params": [
                {
                    "name": "stl",
                    "description": "The binary stl data",
                    "type": "Arraybuffer"
                }
            ],
            "return": {
                "description": "threeJS geometry object",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\jsstl.js",
            "line": 71,
            "description": "Processes a given string to make it parsible for parseStl and returns\n the results",
            "itemtype": "method",
            "name": "trim",
            "params": [
                {
                    "name": "str",
                    "description": "ASCII STL data",
                    "type": "String"
                }
            ],
            "return": {
                "description": "processed string",
                "type": "String"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\jsstl.js",
            "line": 96,
            "description": "Converts an arraybuffer into a string of equivalent binary content",
            "itemtype": "method",
            "name": "arrayToString",
            "params": [
                {
                    "name": "buf",
                    "description": "The arraybuffer",
                    "type": "Arraybuffer"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\jsstl.js",
            "line": 119,
            "description": "Converts a given block of ASCII stl data (as an arraybuffer) to a threeJS representation\n of the geometry. Function courtesy of 'tonylukasavage' from Github, who released this to\n the public domain.",
            "itemtype": "method",
            "name": "parseStl",
            "params": [
                {
                    "name": "stl",
                    "description": "The ASCII stl data",
                    "type": "Arraybuffer"
                }
            ],
            "return": {
                "description": "threeJS geometry object",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\pageBaseScript.js",
            "line": 227,
            "description": "Accepts a string and outputs the string of all characters following the final '.' symbol\n in the string. This is used internally to extract file extensions from file names.",
            "itemtype": "method",
            "name": "grabExtension",
            "params": [
                {
                    "name": "theName",
                    "description": "The file name to be processed",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the extension in the given file name. If no extension is found, the\n 'undefined' value is returned.",
                "type": "String"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\pageBaseScript.js",
            "line": 245,
            "description": "Accepts a string and outputs the string of all characters following the final '.' symbol\n in the string. This is used internally to extract file extensions from file names.",
            "itemtype": "method",
            "name": "grabExtension",
            "params": [
                {
                    "name": "theName",
                    "description": "The file name to be processed",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the extension in the given file name. If no extension is found, the\n 'undefined' value is returned.",
                "type": "String"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 25,
            "description": "Given the contents of a part table XML file (as a string), fills out the table in the web page.",
            "itemtype": "method",
            "name": "part_recieveData",
            "params": [
                {
                    "name": "theXMLText",
                    "description": "The contents of a part table",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 56,
            "description": "Is called whenever the user submits the part table and every entry has been\n properly filled out.",
            "itemtype": "method",
            "name": "part_sendData",
            "params": [
                {
                    "name": "theXMLText",
                    "description": "The contents of the part table in the webpage, as a string\n in XML formatting",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 88,
            "description": "Accepts a key press event and, if the key press corresponds to one\n of the keys used for manipulating the view, sets the proper components\n of \"inputState\" to true.",
            "itemtype": "method",
            "name": "part_registerDown",
            "params": [
                {
                    "name": "e",
                    "description": "The key down event to be supplied to the function by a key down event\n listener on the web page",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 164,
            "description": "Accepts a key press release and, if the key release corresponds to one\n of the keys used for manipulating the view, sets the proper components\n of \"inputState\" to false",
            "itemtype": "method",
            "name": "part_registerUp",
            "params": [
                {
                    "name": "e",
                    "description": "The key up event to be supplied to the function by a key up event\n listener on the web page",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 223,
            "description": "Given an HTML element and a string, returns a list containing all child elements\n of the given element with a tag equivalent to the given string",
            "itemtype": "method",
            "name": "part_getChildrenByTag",
            "params": [
                {
                    "name": "theNode",
                    "description": "The HTML element whose children are to be searched",
                    "type": "HTML Element"
                },
                {
                    "name": "tag",
                    "description": "The string to be used when searching for element children",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 251,
            "description": "Given a jQuery object and a string, returns the first child of the given element with\n a tag equivalent to the given string.",
            "itemtype": "method",
            "name": "part_grab",
            "params": [
                {
                    "name": "theTree",
                    "description": "The jQuery object whose child is to be returned",
                    "type": "JQuery Object"
                },
                {
                    "name": "theMember",
                    "description": "The name of the tag being searched",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The first child with the given tag. If such a child does not\n exist, null is returned.",
                "type": "JQuery Object"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 275,
            "description": "Given a jQuery object and an integer \"N\", returns the Nth child of the given element with\n the given tag.",
            "itemtype": "method",
            "name": "part_grabInd",
            "params": [
                {
                    "name": "theTree",
                    "description": "The jQuery object whose child is to be returned",
                    "type": "JQuery Object"
                },
                {
                    "name": "theMember",
                    "description": "The name of the tag being searched",
                    "type": "String"
                },
                {
                    "name": "theIndex",
                    "description": "The ordinal of the matching child to be returned",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The child meeting the tag and ordinal requirement.\n If such a child does not exist, null is returned.",
                "type": "JQuery Object"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 301,
            "description": "Given a jQuery object representation of a part entry, inserts an html representation\n of that entry in the table",
            "itemtype": "method",
            "name": "part_addEntry",
            "params": [
                {
                    "name": "theEntry",
                    "description": "The jQuery object containing the representation of a table\n entry, as extracted from an XML document",
                    "type": "JQuery Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 350,
            "description": "Parses through each entry in the table and, if all entries are fully filled out, converts the table into an\n XML file and adds a download link for that file to the webpage",
            "itemtype": "method",
            "name": "part_renderXML",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 444,
            "description": "Given an html row element containing data regarding a part, converts the information into an\n xml formatted string and returns it",
            "itemtype": "method",
            "name": "part_renderEntry",
            "params": [
                {
                    "name": "theCells",
                    "description": "An html row element containing information about a part",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "XML representation of the table entry",
                "type": "String"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 532,
            "description": "A function automatically called by button elements associated with the mass option\n in an entry's mass section when pressed. Changes the parent mass section to contain a\n text input element and a button allowing the user to switch over to density input.",
            "itemtype": "method",
            "name": "part_insertMassInput",
            "params": [
                {
                    "name": "theButton",
                    "description": "The button that calls this function",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 553,
            "description": "A function automatically called by button elements associated with the density option\n in an entry's mass section when pressed. Changes the parent mass section to contain a\n text input element and a button allowing the user to switch over to mass input.",
            "itemtype": "method",
            "name": "part_insertDensityInput",
            "params": [
                {
                    "name": "theButton",
                    "description": "The button that calls this function",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 576,
            "description": "A function automatically called by button elements associated with the hollow option\n in an entry's volume section when pressed. Changes the parent volume section to contain a\n text input element and a button allowing the user to indicate the part is not hollow.",
            "itemtype": "method",
            "name": "part_insertHollowInput",
            "params": [
                {
                    "name": "theButton",
                    "description": "The button that calls this function",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 598,
            "description": "A function automatically called by button elements associated with the hollow option\n in an entry's volume section when pressed. Changes the parent volume section to contain\n only a mass value and a button allowing the user to indicate the part is hollow.",
            "itemtype": "method",
            "name": "removeHollowInput",
            "params": [
                {
                    "name": "theButton",
                    "description": "The button that calls this function",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 620,
            "description": "A function automatically called by text input elements associated with the hollow option\n in an entry's volume section when changed. Changes the currently displayed volume to\n match the given thickness",
            "itemtype": "method",
            "name": "part_insertVolumeDisplay",
            "params": [
                {
                    "name": "theBox",
                    "description": "The text input element that calls this function",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 641,
            "description": "A function automatically called by text input elements associated with the density option\n in an entry's mass section when changed. Changes the currently displayed mass to\n match the given density",
            "itemtype": "method",
            "name": "part_insertMassDisplay",
            "params": [
                {
                    "name": "theBox",
                    "description": "The text input element that calls this function",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 664,
            "description": "A function automatically called by button elements associated with accessing sample densities.\n Adds a div element containing several sample density options.",
            "itemtype": "method",
            "name": "part_doDensityDrop",
            "params": [
                {
                    "name": "theButton",
                    "description": "The button element that called this function",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 681,
            "description": "A function automatically called by button elements associated with accessing sample densities.\n Removes the sample density option div element.",
            "itemtype": "method",
            "name": "unpart_doDensityDrop",
            "params": [
                {
                    "name": "theButton",
                    "description": "The button element that called this function",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 700,
            "description": "A function automatically called by button elements associated with sample densities. Will fill\n the associated density input box with the value associated with the inner text of the button.",
            "itemtype": "method",
            "name": "part_changeDensity",
            "params": [
                {
                    "name": "theButton",
                    "description": "The button element that called this function",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 754,
            "description": "A function automatically called by text box elements upon becoming checked/unchecked.\n Sets an internal value to indicate the checked state of the element.",
            "itemtype": "method",
            "name": "part_flipCheck",
            "params": [
                {
                    "name": "theBox",
                    "description": "The checkbox element calling this function",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 783,
            "description": "Takes the value present in the global density input textbox and applies it to all\n parts currently in the table.",
            "itemtype": "method",
            "name": "part_fillGlobalDensity",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 827,
            "description": "Makes it so that the table row associated with this call has its part model\n displayed",
            "itemtype": "method",
            "name": "part_clickFocus",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 910,
            "description": "Sets up every table entry HTML element with the focus function as its \"onclick\"\n attribute",
            "itemtype": "method",
            "name": "part_setupClickFocus",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 938,
            "description": "Sets up every table entry HTML element with color highlighting",
            "itemtype": "method",
            "name": "part_setupHighlighting",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 970,
            "description": "Accepts a string and outputs a part_conversion value for the string's described unit to the standard\n units of this application. If no suitable unit is identified in the string, the part_conversion value\n returned is 0.",
            "itemtype": "method",
            "name": "part_conversion",
            "params": [
                {
                    "name": "theString",
                    "description": "A string representation of the unit being looked up",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the unit part_conversion value",
                "type": "Float"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 1018,
            "description": "Returns a blank mass input element for use in the table",
            "itemtype": "method",
            "name": "part_makeMassElem",
            "return": {
                "description": "a blank mass input element",
                "type": "HTML element"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 1046,
            "description": "Returns a blank volume input element for use in the table",
            "itemtype": "method",
            "name": "part_makeVolElem",
            "return": {
                "description": "a blank volume input element",
                "type": "HTML element"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 1067,
            "description": "Returns a standard button for a density dropdown menu",
            "itemtype": "method",
            "name": "part_makeDropButton",
            "return": {
                "description": "a standard density dropdown button",
                "type": "HTML element"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 1087,
            "description": "Returns a standard button to remove a density dropdown element",
            "itemtype": "method",
            "name": "part_makeUndropButton",
            "return": {
                "description": "a standard density dropdown removal button",
                "type": "HTML element"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 1108,
            "description": "Returns a standard sample density dropdown menu",
            "itemtype": "method",
            "name": "part_makeDensityDiv",
            "return": {
                "description": "a sample density dropdown menu",
                "type": "HTML element"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 1133,
            "description": "Given a mouseup event, sets corresponding internal button states for mouse-related controls",
            "itemtype": "method",
            "name": "part_doMouseUp",
            "params": [
                {
                    "name": "theEvent",
                    "description": "",
                    "type": "Mouseup event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 1153,
            "description": "Given a mousedown event, sets corresponding internal button states for mouse-related controls",
            "itemtype": "method",
            "name": "part_doMouseDown",
            "params": [
                {
                    "name": "theEvent",
                    "description": "",
                    "type": "Mousedown event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 1174,
            "description": "Given a mouseleave event, sets corresponding internal button states for mouse-related controls",
            "itemtype": "method",
            "name": "part_doMouseLeave",
            "params": [
                {
                    "name": "theEvent",
                    "description": "",
                    "type": "Mouseup event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 1191,
            "description": "Given a mousedrag event, rotates the camera or adds a vector to the currently displayed pair,\n depending upon whether or not the left or right mouse button is depressed",
            "itemtype": "method",
            "name": "doPartDrag",
            "params": [
                {
                    "name": "theEvent",
                    "description": "",
                    "type": "Mouseup event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 1215,
            "description": "Prevents the default response of the given event (used to prevent dropdown menus when right\n clicking on the display).",
            "itemtype": "method",
            "name": "part_justDont",
            "params": [
                {
                    "name": "theEvent",
                    "description": "The event to suppress the default response of.",
                    "type": "Event Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\partPropScript.js",
            "line": 1236,
            "description": "Given a mousewheel event, changes the distance of the camera from the center of the scene",
            "itemtype": "method",
            "name": "part_doZoom",
            "params": [
                {
                    "name": "theEvent",
                    "description": "",
                    "type": "Mouseup event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 7,
            "description": "Returns a normal material for meshes if the global variable \"standard\" is false. If \"standard\"\n is set to true, returns a chromadepth material instead.",
            "itemtype": "method",
            "name": "getStdMaterial",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 44,
            "description": "Returns a normal material for lines if the global variable \"standard\" is false. If \"standard\"\n is set to true, returns a chromadepth material instead.",
            "itemtype": "method",
            "name": "getStdMaterial",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 83,
            "description": "Accepts an array of objects containing a string property called \"Name\" and returns\n the first index where any two \"Name\" properties in the array have different characters.",
            "itemtype": "method",
            "name": "getPartNameCutoff",
            "params": [
                {
                    "name": "partFrames",
                    "description": "An array of objects, each of which should containin\n a property called \"Name\" with a non-null string.",
                    "type": "Object Array"
                }
            ],
            "return": {
                "description": "The first index where any two \"Name\" properties in the array are different.",
                "type": "Int"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 118,
            "description": "Accepts an array of objects containing a string property called \"Name\" removes\n the first N characters in each string, where N is the first index where any two\n \"Name\" properties in the array have different characters.",
            "itemtype": "method",
            "name": "cutoffPartNames",
            "params": [
                {
                    "name": "partFrames",
                    "description": "An array of objects, each of which should containin\n a property called \"Name\" with a non-null string.",
                    "type": "Object Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 146,
            "description": "Finds the average position of all the vertices in a given threeJS Geometry model.",
            "itemtype": "method",
            "name": "centerGeometry",
            "params": [
                {
                    "name": "theGeo",
                    "description": "",
                    "type": "ThreeJS Geometry Object"
                }
            ],
            "return": {
                "description": "A 3d coordinate, with each component being the unweighted\n average of the corresponding component in each vector in the provided geometry object. If nodeName\n vertices are present in the object, a zeroed vector is returned.",
                "type": "ThreeJS Vector3 Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 196,
            "description": "Accepts a list of binary stl buffer objects and returns a corresponding list\n of ThreeJS objects.",
            "itemtype": "method",
            "name": "getGeometries",
            "params": [
                {
                    "name": "theSTLs",
                    "description": "",
                    "type": "Buffer Object List"
                }
            ],
            "return": {
                "description": "",
                "type": "ThreeJS Object List"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 223,
            "description": "Combines a given array of objects (each associating an array of keyframes to name) with a\n given array of objects (each associating a threeJS mesh with a name), creating an array\n of objects with keyFrame arrays and threeJS meshes associated with the same name",
            "itemtype": "method",
            "name": "bindPartsToKeyFrames",
            "params": [
                {
                    "name": "theKeyFrameLists",
                    "description": "An array of objects, each containing an array of keyframe objects\n called \"Frames\" and a string property called \"Name\")",
                    "type": "Array"
                },
                {
                    "name": "theParts",
                    "description": "An array of objects, each containing a threeJS mesh object called \"Mesh\" and\n a string property called \"Name\"",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 290,
            "description": "Combines a jagged array of objects, each object at least possessing a numeric\n property called \"Time\", returns the value of the greatest \"Time\" property",
            "itemtype": "method",
            "name": "longestTimeFromFrames",
            "params": [
                {
                    "name": "partFrames",
                    "description": "The jagged array",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The greatest \"Time\" value in the jagged array",
                "type": "Int"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 323,
            "description": "Given a jagged array of objects, each object at least possessing a numeric\n property called \"Time\", sets each Time property to the greatest Time value in\n the jagged array minus the origional value, thus effectively reversing the\n temporal order of each object",
            "itemtype": "method",
            "name": "flipTheTimes",
            "params": [
                {
                    "name": "partFrames",
                    "description": "The jagged array",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The greatest \"Time\" value in the jagged array",
                "type": "Int"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 358,
            "description": "Logs the contents of the given jagged array of keyFrame objects, each containing numeric properties \"X\",\n \"Y\", \"Z\", and \"Time\", to the console as a string.",
            "itemtype": "method",
            "name": "showFrames",
            "params": [
                {
                    "name": "partFrames",
                    "description": "A jagged array of keyframe objects",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 396,
            "description": "Logs the contents of a given keyFrame object, containing numeric properties \"X\",\n \"Y\", \"Z\", and \"Time\", to the console as a string.",
            "itemtype": "method",
            "name": "showFrame",
            "params": [
                {
                    "name": "theFrame",
                    "description": "the keyFrame object to be logged",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 414,
            "description": "Returns true if any position component of the given keyframe object is NaN",
            "itemtype": "method",
            "name": "hasNaN",
            "params": [
                {
                    "name": "theFrame",
                    "description": "A keyFrame object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 431,
            "description": "Returns a copy of the provided keyframe object",
            "itemtype": "method",
            "name": "copyFrame",
            "params": [
                {
                    "name": "theFrame",
                    "description": "A keyFrame object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The copy",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 457,
            "description": "Returns a copy of the provided array of keyframe objects",
            "itemtype": "method",
            "name": "copyFrameList",
            "params": [
                {
                    "name": "partFrames",
                    "description": "A keyFrame object array",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The copy",
                "type": "Array"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 485,
            "description": "Creates a keyframe list for the given fastener object and adds it to currentFrameList",
            "itemtype": "method",
            "name": "makeFastenerKeyFrames",
            "params": [
                {
                    "name": "theFst",
                    "description": "The object representation of the fastener being keyframed",
                    "type": "Object"
                },
                {
                    "name": "runningList",
                    "description": "The current running list of keyframes",
                    "type": "Object List"
                },
                {
                    "name": "currentFrameList",
                    "description": "The list of part-keyframe list objects",
                    "type": "Object List"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 532,
            "description": "Given a tree representation of the assembly process through nested javascript objects, returns an array\n of keyframe array objects, with each keyframe array object being a representation of the movement of each part\n in the tree representation throughout the assembly proceess, with a list of keyframe objects and a given part name",
            "itemtype": "method",
            "name": "makeKeyFrames",
            "params": [
                {
                    "name": "theTree",
                    "description": "Tree representation of the assembly process through nested javascript objects",
                    "type": "Object"
                },
                {
                    "name": "runningList",
                    "description": "Internally used variable. Should be an empty array for outside use.",
                    "type": "Array"
                },
                {
                    "name": "currentFrameList",
                    "description": "Internally used variable. Should be an empty array for outside use.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The jagged array of keyFrame objects",
                "type": "Array"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 600,
            "description": "Given two keyFrames and a normalized float \"proportion\", returns an interpolation\n between the two keyframes with a weight towards the second keyframe proportional\n to \"proportion\"",
            "itemtype": "method",
            "name": "interpolate",
            "params": [
                {
                    "name": "keyFrame1",
                    "description": "The earlier keyFrame",
                    "type": "Object"
                },
                {
                    "name": "keyFrame2",
                    "description": "The later keyFrame",
                    "type": "Object"
                },
                {
                    "name": "proportion",
                    "description": "A normalized value representing what proportion of the path of\n interpolation is between the result and the earlier keyFrame",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "The jagged array of keyFrame objects",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 642,
            "description": "Given a list of keyframes and a time quantity, returns a keyframe object interpolating\n between the two temporally closest keyframes. In cases where the provide time is beyond the\n range of times represented by the list, returns the closest keyframe",
            "itemtype": "method",
            "name": "grabInterp",
            "params": [
                {
                    "name": "frameList",
                    "description": "A list of keyframes. Must be organized from least time value to greatest time value",
                    "type": "Array"
                },
                {
                    "name": "time",
                    "description": "Floating-point representation of what time in the keyframe progression the interpolation\n should occur",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "The interpolated keyframe",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 698,
            "description": "Given an array of objects (each containing a threeJS mesh object and an array of\n keyFrame objects), and two floating points \"time\" and \"timeWarp\", will animate each\n mesh in the array along the keyframes in their associate objects according to the\n given \"time\" and returns the new time as given by the standard time step multiplied\n by \"timeWarp\"",
            "itemtype": "method",
            "name": "animate",
            "params": [
                {
                    "name": "partFrames",
                    "description": "List of objects relating threeJS mesh objects with their\n respective keyframe arrays",
                    "type": "Array"
                },
                {
                    "name": "time",
                    "description": "The time to be used when interpolating keyFrames for the models",
                    "type": "Float"
                },
                {
                    "name": "timeWarp",
                    "description": "The coefficeint to be applied to the timestep in the\n animation",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "The new value of time in the animation",
                "type": "Float"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 748,
            "description": "Given two threeJS boundingBox objects, returns the smallest bounding box\n encompassing the two",
            "itemtype": "method",
            "name": "combineBounds",
            "params": [
                {
                    "name": "a",
                    "description": "The first bounding box",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "The second bounding box",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The combined bounds",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 777,
            "description": "Given two threeJS boundingBox objects, returns the smallest bounding box\n encompassing the two",
            "itemtype": "method",
            "name": "getGlobBounds",
            "params": [
                {
                    "name": "a",
                    "description": "The first bounding box",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "The second bounding box",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The combined bounds",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 811,
            "description": "Given an object, containing a threeJS mesh object as \"Mesh\", will\n return the center of the mesh's bounding box",
            "itemtype": "method",
            "name": "getPartCenter",
            "params": [
                {
                    "name": "a",
                    "description": "The object containing the threeJS mesh object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The center of the mesh's bounding box, represented as\n a threeJS Vector3 object",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 839,
            "description": "Aligns the camera to look at the point at the average of the centers of all the parts bounding boxes",
            "itemtype": "method",
            "name": "alignAssemblyCenter",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 866,
            "description": "Given a threeJS scene object, a threeJS camera object, and an array of objects containing\n threeJS mesh objects, finds the first mesh in the scene which is intersected the ray extending\n through the center of the camera's field of vision. If this mesh is in the provided array of\n objects, then that object is returned, otherwise null is returned instead",
            "itemtype": "method",
            "name": "getFirstIntersect",
            "params": [
                {
                    "name": "theScene",
                    "description": "The threeJS scene object in which intersections should\n be tested",
                    "type": "Object"
                },
                {
                    "name": "theCamera",
                    "description": "The threeJS camera object to be used to test for\n ray intersections",
                    "type": "Object"
                },
                {
                    "name": "partFrames",
                    "description": "An array containing a series of objects, each of which\n contain a threeJS mesh object (under the property \"Mesh\") to be tested for intersections",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The intersecting mesh (or null in case of no valid intersection)",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 917,
            "description": "Given an tree representation of the movement of parts in an assembly sequence, the\n parent node of that node, and a threeJS scene object, inserts a line for each subassembly\n path along the path of movement",
            "itemtype": "method",
            "name": "addLines",
            "params": [
                {
                    "name": "movTree",
                    "description": "Tree of nested objects representing the movement of each subassembly\n in it's assembly sequence",
                    "type": "Object"
                },
                {
                    "name": "parentNode",
                    "description": "Used for internal use. Null should be applied for external use.",
                    "type": "Object"
                },
                {
                    "name": "theScene",
                    "description": "the threeJS scene to which the line representations will be added",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 974,
            "description": "Given an tree representation of the movement of parts in an assembly sequence, an\n array of Objects each associating a list of keyframes with a threeJS mesh object and aLinkcolor\n string, and the index of the keyframe associated with the tree's root node, displaces the movement\n line points associated with that particular part of the assembly to match the displacement of the\n model",
            "itemtype": "method",
            "name": "addDisplacement",
            "params": [
                {
                    "name": "movTree",
                    "description": "Tree of nested objects representing the movement of each subassembly\n in it's assembly sequence",
                    "type": "Object"
                },
                {
                    "name": "partFrames",
                    "description": "An array of Objects each associating a list of keyframes with a threeJS\n mesh object and a string",
                    "type": "Array"
                },
                {
                    "name": "it",
                    "description": "The index of the keyframe associated with the root node of movTree. Used internally.\n For external use, apply 0.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 1029,
            "description": "Given an tree representation of the movement of parts in an assembly sequence, the\n parent node of that node, and the current time in the animation, updates the ends of the\n movement lines such that the portion of lines which have already been traversed are not shown",
            "itemtype": "method",
            "name": "updateLines",
            "params": [
                {
                    "name": "movTree",
                    "description": "Tree of nested objects representing the movement of each subassembly\n in it's assembly sequence",
                    "type": "Object"
                },
                {
                    "name": "parentNode",
                    "description": "Used for internal use. Null should be applied for external use.",
                    "type": "Object"
                },
                {
                    "name": "theTime",
                    "description": "the threeeJS scene to which the line representations will be added",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 1092,
            "description": "Initializes the axis lines for the bottom-left of the screen",
            "itemtype": "method",
            "name": "initAxisLines",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 1139,
            "description": "Updates the axis line dispay",
            "itemtype": "method",
            "name": "updateAxisLines",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 1210,
            "description": "Performs a bezier curve interpolation of the control points in pointlist given\n the time value T, and returns a ThreeJS Vector3 object with the interpolated coordinates.",
            "itemtype": "method",
            "name": "interp",
            "params": [
                {
                    "name": "pointList",
                    "description": "A list of control points for use in interpolation.",
                    "type": "Vector3 Array"
                },
                {
                    "name": "T",
                    "description": "A normalized value for use as a time value in interpolation.",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 1245,
            "description": "Returns a string describing the x, y, and z coordinates of theVec.",
            "itemtype": "method",
            "name": "vecDesc",
            "params": [
                {
                    "name": "theVec",
                    "description": "The ThreeJS Vector3 object to be described by the output string",
                    "type": "Vector3"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 1263,
            "description": "Recursively adds Vector3 objects onto the Vector3 list, target, interpolating from startDisp\n and endDisp in an arc centered at the Vector3 object center. Each layer of recursion\n adds the midpoint of the arc from startDisp to endDisp until level = 0.",
            "itemtype": "method",
            "name": "addArcSubDiv",
            "params": [
                {
                    "name": "target",
                    "description": "The list where the calculated Vector3 objects should be added",
                    "type": "Vector3 Array"
                },
                {
                    "name": "center",
                    "description": "The point which the generated arc should be centered on",
                    "type": "Vector3"
                },
                {
                    "name": "startDisp",
                    "description": "The starting point of the arc",
                    "type": "Vector3"
                },
                {
                    "name": "endDisp",
                    "description": "The ending point of the arc",
                    "type": "Vector3"
                },
                {
                    "name": "level",
                    "description": "The desired levels of recursion in the point interpolation",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 1313,
            "description": "Returns a list of 2^(resolution+1) points which trace an arc beginning at startPoint,\n terminating at endpoint, and centered around center",
            "itemtype": "method",
            "name": "makeArcPointList",
            "params": [
                {
                    "name": "startPoint",
                    "description": "The starting point of the arc",
                    "type": "Vector3"
                },
                {
                    "name": "center",
                    "description": "The point which the generated arc should be centered on",
                    "type": "Vector3"
                },
                {
                    "name": "endPoint",
                    "description": "The ending point of the arc",
                    "type": "Vector3"
                },
                {
                    "name": "resolution",
                    "description": "The desired levels of recursion in the point interpolation",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "Vector3 Array"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 1374,
            "description": "Adds keyframes onto the keyframe lists provided so that the keyframed parts begin their\n animation at start location and move in an arc to their previously defined start position",
            "itemtype": "method",
            "name": "addCurveKeyFrames",
            "params": [
                {
                    "name": "theFrameLists",
                    "description": "A list of keyframe lists describing the movement of 3d models",
                    "type": "Object List"
                },
                {
                    "name": "startLocation",
                    "description": "The desired new start location of the 3d models in the animation",
                    "type": "Vector3"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 1430,
            "description": "Adds a simple square grid of width equal to theSize and a number of lines equal to theDivs at Y=-1000",
            "itemtype": "method",
            "name": "addGrid",
            "params": [
                {
                    "name": "theSize",
                    "description": "The desired grid width",
                    "type": "Int"
                },
                {
                    "name": "theDivs",
                    "description": "The desired number of lines per side of the grid",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\partRender.js",
            "line": 1467,
            "description": "Adds a simple vertical column with a radius of theRad, a base Y value of theBot, a top terminating at\n theTop, an x and z position equal to theX and theZ, a line color of theColor, a number of vertical\n segmentations equal to stacks, and a number of radial segmentations equal to slices",
            "itemtype": "method",
            "name": "addGrid",
            "params": [
                {
                    "name": "theRad",
                    "description": "The desired radius of the column",
                    "type": "Float"
                },
                {
                    "name": "theBot",
                    "description": "The desired bottom y value of the column",
                    "type": "Float"
                },
                {
                    "name": "theTop",
                    "description": "The desired top y value of the column",
                    "type": "Float"
                },
                {
                    "name": "theX",
                    "description": "The desired x value of the column",
                    "type": "Float"
                },
                {
                    "name": "theZ",
                    "description": "The desired z value of the column",
                    "type": "Float"
                },
                {
                    "name": "slices",
                    "description": "The desired number of radial segmentations",
                    "type": "Float"
                },
                {
                    "name": "stacks",
                    "description": "The desired z value of vertical segmentations",
                    "type": "Float"
                },
                {
                    "name": "theColor",
                    "description": "The desired color of the column",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\renderScript.js",
            "line": 36,
            "description": "The function which handles the actual rendering of the solution file animation\n and loading in the models",
            "itemtype": "method",
            "name": "rdr_recieveData",
            "params": [
                {
                    "name": "theXMLFile",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "theSTLFiles",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\renderScript.js",
            "line": 102,
            "description": "Attempts to lock the mouse for camera manupulation",
            "itemtype": "method",
            "name": "rdr_tryMouseLock",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\renderScript.js",
            "line": 125,
            "description": "Adds or Removes event listeners for input meant for camera manipulation.\n Is triggered by a change in the state of the mouse locking or unlocking.\n The mouse locking results in input listeners being added to the webpage,\n whereas the unlocking of the mouse results in the removal of appropriate\n listeners.",
            "itemtype": "method",
            "name": "rdr_lockChange",
            "params": [
                {
                    "name": "e",
                    "description": "The event that is to be applied to the function by event listeners upon\n a change in the state of mouselock",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\renderScript.js",
            "line": 165,
            "description": "Changes the orientation of the camera based off of the mouse movement\n contained in the supplied mouse movement event. X-axis movement\n corresponds to change in the yaw of the camera whereas Y-axis movement\n corresponds to a change in the pitch of the camera.",
            "itemtype": "method",
            "name": "rdr_mouseMoved",
            "params": [
                {
                    "name": "e",
                    "description": "The mouse movement event to be supplied to the function by a mouse\n movement event listener on the web page",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\renderScript.js",
            "line": 212,
            "description": "Accepts a key press event and, if the key press corresponds to one\n of the keys used for manipulating the view, sets the proper components\n of \"inputState\" to true.",
            "itemtype": "method",
            "name": "rdr_registerDown",
            "params": [
                {
                    "name": "e",
                    "description": "The key down event to be supplied to the function by a key down event\n listener on the web page",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\renderScript.js",
            "line": 277,
            "description": "Accepts a key press release and, if the key release corresponds to one\n of the keys used for manipulating the view, sets the proper components\n of \"inputState\" to false",
            "itemtype": "method",
            "name": "rdr_registerUp",
            "params": [
                {
                    "name": "e",
                    "description": "The key up event to be supplied to the function by a key up event\n listener on the web page",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\renderScript.js",
            "line": 340,
            "description": "Once called, interprets the current state of registered inputs and manipulates\n the visualization accordingly, including the accelleration of the camera, as\n affected by the W,S,A, and D keys, and the rotation of the camera if the F key\n is depressed and there currently is a highlighted object of interest",
            "itemtype": "method",
            "name": "rdr_manageControls",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\renderScript.js",
            "line": 456,
            "description": "Accepts a string and outputs the string of all characters following the final '.' symbol\n in the string. This is used internally to extract file extensions from file names.",
            "itemtype": "method",
            "name": "rdr_grabExtension",
            "params": [
                {
                    "name": "theName",
                    "description": "The file name to be processed",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the extension in the given file name. If no extension is found, the\n 'undefined' value is returned.",
                "type": "String"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\renderScript.js",
            "line": 491,
            "description": "Called internally by \"loadParts\". Parses the text stored in \"theXML\" into a tree\n structure composed of nested javascript objects and converts that structure into a\n series of keyframe arrays, each of which are stored alongside their respective\n parts in \"partFrames\". Additionally, generates the path lines for each subassembly\n and inserts those lines into \"scene\".",
            "itemtype": "method",
            "name": "rdr_renderParts",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\renderScript.js",
            "line": 592,
            "description": "Toggles the display of the HTML div element containing the treequence representation of\n the assembly.",
            "itemtype": "method",
            "name": "rdr_showHideTreequence",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\renderScript.js",
            "line": 725,
            "description": "The main portion of the visualization's rendering cycle, managing frame rate,\n input, camera decelleration, keyframe manipulation, model animation, object highlighting,\n and informational display.",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\treequence.js",
            "line": 6,
            "description": "Given a jQuery object, returns a full list of all of its children.",
            "itemtype": "method",
            "name": "whatsIn",
            "params": [
                {
                    "name": "theTree",
                    "description": "The jQuery object whose children should be returned",
                    "type": "JQuery Object"
                }
            ],
            "return": {
                "description": "Array of the object's children",
                "type": "Array"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\treequence.js",
            "line": 27,
            "description": "Given a jQuery object and a string, returns the first child of the given element with\n a tag equivalent to the given string.",
            "itemtype": "method",
            "name": "grab",
            "params": [
                {
                    "name": "theTree",
                    "description": "The jQuery object whose child is to be returned",
                    "type": "JQuery Object"
                },
                {
                    "name": "theMember",
                    "description": "The name of the tag being searched",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The first child with the given tag. If such a child does not \n exist, null is returned.",
                "type": "JQuery Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\treequence.js",
            "line": 55,
            "description": "Given a jQuery object and an integer \"N\", returns the Nth child of the given element with\n the given tag.",
            "itemtype": "method",
            "name": "grabInd",
            "params": [
                {
                    "name": "theTree",
                    "description": "The jQuery object whose child is to be returned",
                    "type": "JQuery Object"
                },
                {
                    "name": "theMember",
                    "description": "The name of the tag being searched",
                    "type": "String"
                },
                {
                    "name": "theIndex",
                    "description": "The ordinal of the matching child to be returned",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The child meeting the tag and ordinal requirement. \n If such a child does not exist, null is returned.",
                "type": "JQuery Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\treequence.js",
            "line": 83,
            "description": "Given a jQuery object derived from parsing an XML document, extracts all information\n relevant to part movement and composes it into an identically structured tree of \n nested javascript objects which is then returned",
            "itemtype": "method",
            "name": "getMovement",
            "params": [
                {
                    "name": "theTree",
                    "description": "The jQuery object to be parsed over",
                    "type": "JQuery Object"
                },
                {
                    "name": "myX",
                    "description": "The X position of the subassembly represented by the root node of theTree",
                    "type": "Float"
                },
                {
                    "name": "myY",
                    "description": "The Y position of the subassembly represented by the root node of theTree",
                    "type": "Float"
                },
                {
                    "name": "myZ",
                    "description": "The Z position of the subassembly represented by the root node of theTree",
                    "type": "Float"
                },
                {
                    "name": "myTime",
                    "description": "The time value of the subassembly represented by the root node of theTree",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "The root node of the tree of extracted movement data",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\treequence.js",
            "line": 159,
            "description": "Given a jQuery Object, will return the first child with the tag \"Reference\" of the first child with\n the tag \"Install\" of the object. If no such child exists, null is returned.",
            "itemtype": "method",
            "name": "getRef",
            "params": [
                {
                    "name": "theTree",
                    "description": "The jQuery object to be accessed",
                    "type": "JQuery Object"
                }
            ],
            "return": {
                "description": "The resulting child",
                "type": "JQuery Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\treequence.js",
            "line": 179,
            "description": "Given a jQuery Object, will return the first child with the tag \"Moving\" of the first child with\n the tag \"Install\" of the object. If no such child exists, null is returned.",
            "itemtype": "method",
            "name": "getMov",
            "params": [
                {
                    "name": "theTree",
                    "description": "The jQuery object to be accessed",
                    "type": "JQuery Object"
                }
            ],
            "return": {
                "description": "The resulting child",
                "type": "JQuery Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\treequence.js",
            "line": 201,
            "description": "Given a jQuery object derived from parsing an XML document, extracts all information\n relevant to installation timing and composes it into an identically structured tree of \n nested javascript objects which is then returned",
            "itemtype": "method",
            "name": "getTimes",
            "params": [
                {
                    "name": "theTree",
                    "description": "The jQuery object to be parsed over",
                    "type": "JQuery Object"
                },
                {
                    "name": "parentTime",
                    "description": "The time value of the subassembly represented by the root node of theTree",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "The root node of the tree of extracted time data",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\treequence.js",
            "line": 232,
            "description": "Given a tree of nested objects, returns the highest \"Time\" value from all the nodes",
            "itemtype": "method",
            "name": "getLongestTime",
            "params": [
                {
                    "name": "timeTree",
                    "description": "The tree of time values",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The highest time value in the tree",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\treequence.js",
            "line": 254,
            "description": "Given a jQuery object derived from parsing an XML document, extracts all part name \n information and composes it into an identically structured tree of nested javascript\n objects which is then returned",
            "itemtype": "method",
            "name": "getNames",
            "params": [
                {
                    "name": "theTree",
                    "description": "The jQuery object to be parsed over",
                    "type": "JQuery Object"
                }
            ],
            "return": {
                "description": "The root node of the tree of extracted name data",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\treequence.js",
            "line": 282,
            "description": "Given a three trees of nested javascript objects, one holding time data, one holding\n movement data, and one holding part name data",
            "itemtype": "method",
            "name": "mergeTrees",
            "params": [
                {
                    "name": "TimeTree",
                    "description": "The root node of the tree containing time data",
                    "type": "Object"
                },
                {
                    "name": "SpaceTree",
                    "description": "The root node of the tree containing movement data",
                    "type": "Object"
                },
                {
                    "name": "NameTree",
                    "description": "The root node of the tree containing name data",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The root node of the resulting tree",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\treequence.js",
            "line": 311,
            "description": "Given a three trees of nested javascript objects, one holding time data, one holding\n movement data, and one holding part name data",
            "itemtype": "method",
            "name": "getNameList",
            "params": [
                {
                    "name": "TimeTree",
                    "description": "The root node of the tree containing time data",
                    "type": "Object"
                },
                {
                    "name": "SpaceTree",
                    "description": "The root node of the tree containing movement data",
                    "type": "Object"
                },
                {
                    "name": "NameTree",
                    "description": "The root node of the tree containing name data",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The root node of the resulting tree",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\treequence.js",
            "line": 346,
            "description": "Given an array of strings, returns the first index at which at least \n two of the included strings are different",
            "itemtype": "method",
            "name": "similarityCutoff",
            "params": [
                {
                    "name": "theList",
                    "description": "The list of strings to be anylized",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The computed index",
                "type": "Index"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\treequence.js",
            "line": 387,
            "description": "Given a tree of nested javascript objects (each with a string attribute \"Name\") and an\n integer \"N\", removes the first N characters of each Name attribute",
            "itemtype": "method",
            "name": "cutOffNames",
            "params": [
                {
                    "name": "theTree",
                    "description": "The structure containing name data",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\treequence.js",
            "line": 429,
            "description": "Given a tree of nested javascript objects (each with a string attribute \"Name\"), and two lists,\n regTreeNames and fstTreeNames, inserts all regular part names into regTreeNames and inserts all\n fastener part names into fstTreeNames",
            "itemtype": "method",
            "name": "getTreeNames",
            "params": [
                {
                    "name": "tree",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "regTreeNames",
                    "description": "",
                    "type": "String List"
                },
                {
                    "name": "fstTreeNames",
                    "description": "",
                    "type": "String List"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\treequence.js",
            "line": 469,
            "description": "Given a list of parts, returns a list of the names of each part",
            "itemtype": "method",
            "name": "getPartNames",
            "params": [
                {
                    "name": "parts",
                    "description": "The list of part objects.",
                    "type": "Part List"
                }
            ],
            "return": {
                "description": "",
                "type": "String List"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\treequence.js",
            "line": 496,
            "description": "Given a tree of nested javascript objects (each with a float attribute \"Time\") and a\n float \"N\", sets each Time value to N minus that value",
            "itemtype": "method",
            "name": "flipTreeTime",
            "params": [
                {
                    "name": "theTree",
                    "description": "The structure containing time data",
                    "type": "Object"
                },
                {
                    "name": "axis",
                    "description": "The value used to mirror the time values",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\treequence.js",
            "line": 531,
            "description": "Given a tree of nested javascript objects, returns the depth of the tree",
            "itemtype": "method",
            "name": "getDepth",
            "params": [
                {
                    "name": "theTree",
                    "description": "The object structure",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The depth of the object",
                "type": "Int"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\treequence.js",
            "line": 556,
            "description": "Given a staggered array of integer pairs, returns a random UTF character with a UTF value\n within one of the given integer ranges (inclusive)",
            "itemtype": "method",
            "name": "getRandomUTF",
            "params": [
                {
                    "name": "selectSpace",
                    "description": "A staggered array of integer range limits",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\treequence.js",
            "line": 606,
            "description": "Given a tree of nested javascript objects and an html element, inserts the contents\n of the root node of the given tree as an html element into the given element. Returns\n the name of the generated node.",
            "itemtype": "method",
            "name": "insertTreequenceHTML",
            "params": [
                {
                    "name": "theTree",
                    "description": "The tree structure",
                    "type": "Object"
                },
                {
                    "name": "parentElement",
                    "description": "The html element to contain the node information",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\treequence.js",
            "line": 710,
            "description": "Given an html node containing a button, hides all child treequence elements\n if the button text is not \"+\" and shows them if it is.",
            "itemtype": "method",
            "name": "swapHiding",
            "params": [
                {
                    "name": "theNode",
                    "description": "The html element whose treequence elements are to be manipulated.",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\treequence.js",
            "line": 747,
            "description": "Given an HTML element, sets the style attributes of that element to display it's contents.",
            "itemtype": "method",
            "name": "show",
            "params": [
                {
                    "name": "theNode",
                    "description": "The HTML element to be shown.",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\treequence.js",
            "line": 769,
            "description": "Given an HTML element, sets the style attributes of that element to hide it's contents.",
            "itemtype": "method",
            "name": "hide",
            "params": [
                {
                    "name": "theNode",
                    "description": "The HTML element to be hidden.",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\treequence.js",
            "line": 803,
            "description": "Given an HTML element, sets the style attributes of that element's children\n to display their contents.",
            "itemtype": "method",
            "name": "showChildren",
            "params": [
                {
                    "name": "theNode",
                    "description": "The HTML element whose children are to be shown.",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\treequence.js",
            "line": 832,
            "description": "Given an HTML element, sets the style attributes of that element's children\n to hide their contents.",
            "itemtype": "method",
            "name": "hideChildren",
            "params": [
                {
                    "name": "theNode",
                    "description": "The HTML element whose children are to be hidden.",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\treequence.js",
            "line": 862,
            "description": "Given an HTML element and a string, returns a list containing all child elements\n of the given element with a tag equivalent to the given string",
            "itemtype": "method",
            "name": "getChildrenByTag",
            "params": [
                {
                    "name": "theNode",
                    "description": "The HTML element whose children are to be searched",
                    "type": "HTML Element"
                },
                {
                    "name": "tag",
                    "description": "The string to be used when searching for element children",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\upload.js",
            "line": 3,
            "description": "Accepts a fileinput event, presumably from a file upload event listener, and assigns\n functions to each file reader listed in the event to be called upon the full loading\n of that given reader's files",
            "itemtype": "method",
            "name": "readMultipleFiles",
            "params": [
                {
                    "name": "evt",
                    "description": "A fileinput event, to be given by a fileinput event listener",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\upload.js",
            "line": 57,
            "description": "Called internally upon every recieved fileload event. Checks if every file reader in the\n array \"fileReaders\" has fully read each of their files. If so, then the function converts\n all recieved stl files into threeJS models and executes \"renderParts\".",
            "itemtype": "method",
            "name": "loadParts",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\uploadScript.js",
            "line": 20,
            "description": "Accepts a fileinput event, presumably from a file upload event listener, and assigns\n functions to each file reader listed in the event to be called upon the full loading\n of that given reader's files",
            "itemtype": "method",
            "name": "readMultipleFiles",
            "params": [
                {
                    "name": "evt",
                    "description": "A fileinput event, to be given by a fileinput event listener",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "workspace\\templates\\uploadScript.js",
            "line": 66,
            "description": "Called internally upon every recieved fileload event. Checks if every file reader in the\n array \"fileReaders\" has fully read each of their files. If so, then the function converts\n all recieved stl files into threeJS models and executes \"renderParts\".",
            "itemtype": "method",
            "name": "loadParts",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: summary",
            "line": "         jquery.dataTables.js:17"
        },
        {
            "message": "unknown tag: version",
            "line": "         jquery.dataTables.js:17"
        },
        {
            "message": "unknown tag: contact",
            "line": "         jquery.dataTables.js:17"
        },
        {
            "message": "unknown tag: copyright",
            "line": "         jquery.dataTables.js:17"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:108"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:108"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:150"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:150"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:223"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:223"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:278"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:315"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:339"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:339"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:369"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:369"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:408"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:428"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:450"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:484"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:484"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:537"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:537"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:565"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:565"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:614"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:614"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:643"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:643"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:683"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:709"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:735"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:735"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:757"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:778"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:800"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:800"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:844"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:844"
        },
        {
            "message": "unknown tag: ignore",
            "line": " workspace\\templates\\datatables.js:1530"
        },
        {
            "message": "unknown tag: ignore",
            "line": " workspace\\templates\\datatables.js:1559"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:1646"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:1659"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:1693"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:1736"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:1851"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:1930"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:1964"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:1995"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:2127"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:2157"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:2157"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:2175"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:2175"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:2192"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:2192"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:2213"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:2213"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:2235"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:2300"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:2378"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:2378"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:2431"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:2431"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:2457"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:2457"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:2470"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:2470"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:2484"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:2484"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:2533"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:2571"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:2571"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:2696"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:2696"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:2816"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:2816"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:2828"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:2842"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:2872"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:2949"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:2949"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:3065"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:3152"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:3194"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:3272"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:3378"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:3517"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:3557"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:3709"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:3785"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:3785"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:3957"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:3957"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:3983"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:3983"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:4091"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:4169"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:4169"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:4256"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:4311"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:4343"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:4376"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:4432"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:4432"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:4471"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:4471"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:4549"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:4549"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:4568"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:4568"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:4585"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:4585"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:4620"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:4685"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:4767"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:4801"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:4801"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:4867"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:4867"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:4925"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:4925"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:5001"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:5001"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:5018"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:5033"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:5033"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:5183"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:5468"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:5510"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:5735"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:5735"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:5746"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:5746"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:5770"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:5770"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:5791"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:5791"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:5817"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:5817"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:5909"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:6086"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:6172"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:6212"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:6289"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:6323"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:6426"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:6426"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:6443"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:6486"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:6519"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:6519"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:6563"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:6592"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:6613"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:6695"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:6695"
        },
        {
            "message": "unknown tag: ignore",
            "line": " workspace\\templates\\datatables.js:6717"
        },
        {
            "message": "unknown tag: ignore",
            "line": " workspace\\templates\\datatables.js:6756"
        },
        {
            "message": "unknown tag: ignore",
            "line": " workspace\\templates\\datatables.js:6765"
        },
        {
            "message": "unknown tag: ignore",
            "line": " workspace\\templates\\datatables.js:7330"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:7363"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:7363"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:7451"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:7525"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:7624"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:7640"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:7684"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:8888"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:8888"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:8888"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:8888"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:8943"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:9087"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:9087"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:9125"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:9125"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:9162"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:9162"
        },
        {
            "message": "replacing incorrect tag: member with method",
            "line": " workspace\\templates\\datatables.js:9420"
        },
        {
            "message": "replacing incorrect tag: member with method",
            "line": " workspace\\templates\\datatables.js:9430"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:9685"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:9860"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:9860"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:9922"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:9922"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:9952"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:9952"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:9975"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:9975"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10132"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10132"
        },
        {
            "message": "replacing incorrect tag: member with method",
            "line": " workspace\\templates\\datatables.js:10158"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10158"
        },
        {
            "message": "replacing incorrect tag: member with method",
            "line": " workspace\\templates\\datatables.js:10172"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10172"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10194"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10194"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10221"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10221"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10242"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10242"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10262"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10262"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10285"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10285"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10313"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10313"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10337"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10337"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10357"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10357"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10376"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10376"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10394"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10394"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10415"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10415"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10453"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10453"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10477"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10477"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10477"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10499"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10499"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10518"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10518"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10538"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10538"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10558"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10558"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10580"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10580"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10605"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10605"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10633"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10633"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10654"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10654"
        },
        {
            "message": "replacing incorrect tag: member with method",
            "line": " workspace\\templates\\datatables.js:10682"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:10682"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10682"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10682"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10717"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10717"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:10746"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10746"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10746"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10776"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10776"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:10801"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10801"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10801"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10827"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10827"
        },
        {
            "message": "replacing incorrect tag: member with method",
            "line": " workspace\\templates\\datatables.js:10856"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10856"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10856"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10856"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:10882"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10882"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10882"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10882"
        },
        {
            "message": "replacing incorrect tag: member with method",
            "line": " workspace\\templates\\datatables.js:10909"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10909"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10909"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10950"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10950"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:10988"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:10988"
        },
        {
            "message": "replacing incorrect tag: member with method",
            "line": " workspace\\templates\\datatables.js:11012"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11012"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11012"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11051"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11051"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11078"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11078"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11098"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11098"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11142"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11142"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11162"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11162"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11183"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11183"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11206"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11217"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11225"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11233"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11233"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11256"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11256"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11280"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11287"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11287"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11310"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11310"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11333"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11333"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11356"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11356"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11379"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11379"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11402"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11402"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11434"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11434"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11455"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11455"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11477"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11477"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11500"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11500"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11531"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11531"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11554"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11554"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11595"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11595"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11619"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11619"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11640"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11640"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11675"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11675"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11686"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11686"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11711"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11711"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11734"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11734"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11758"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11758"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11758"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11779"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11779"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11779"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11798"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11798"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11852"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11852"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11872"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11872"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11900"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11900"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11925"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11925"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11949"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11949"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11973"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:11973"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11973"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:11991"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:12009"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:12034"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:12034"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:12076"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:12076"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:12115"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:12115"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:12148"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:12148"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:12181"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:12181"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:12214"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:12214"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:12246"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:12255"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:12255"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:12427"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:12427"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:12549"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:12549"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:12573"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:12573"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:12607"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:12607"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:12641"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:12641"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:12684"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:12684"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:12728"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:12728"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:12770"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:12770"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:12806"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:12806"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:12847"
        },
        {
            "message": "unknown tag: dtopt",
            "line": " workspace\\templates\\datatables.js:12847"
        },
        {
            "message": "replacing incorrect tag: depreciated with deprecated",
            "line": " workspace\\templates\\datatables.js:14301"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\datatables.js:14950"
        },
        {
            "message": "unknown tag: memberof",
            "line": " workspace\\templates\\datatables.js:14950"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:15093"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:15103"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:15112"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:15120"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:15128"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:15139"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:15151"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:15163"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:15173"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:15185"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:15216"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:15226"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:15236"
        },
        {
            "message": "unknown tag: name",
            "line": " workspace\\templates\\datatables.js:15244"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\jquery.js:890"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\jquery.js:954"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\jquery.js:1054"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\jquery.js:1066"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " workspace\\templates\\jquery.js:1078"
        },
        {
            "message": "Missing item type\nPaginate, search and order HTML tables",
            "line": " jquery.dataTables.js:17"
        },
        {
            "message": "Missing item type\nPerform a jQuery selector action on the table's TR elements (from the tbody) and\nreturn the resulting jQuery object.",
            "line": " workspace\\templates\\datatables.js:108"
        },
        {
            "message": "Missing item type\nAlmost identical to $ in operation, but in this case returns the data for the matched\nrows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes\nrather than any descendants, so the data can be obtained for the row/cell. If matching\nrows are found, the data returned is the original data array/object that was used to\ncreate the row (or a generated array if from a DOM source).\n\nThis method is often useful in-combination with $ where both functions are given the\nsame parameters and the array indexes will match identically.",
            "line": " workspace\\templates\\datatables.js:150"
        },
        {
            "message": "Missing item type\nCreate a DataTables Api instance, with the currently selected tables for\nthe Api's context.",
            "line": " workspace\\templates\\datatables.js:204"
        },
        {
            "message": "Missing item type\nAdd a single new row or multiple rows of data to the table. Please note\nthat this is suitable for client-side processing only - if you are using\nserver-side processing (i.e. \"bServerSide\": true), then to add data, you\nmust add it to the data source, i.e. the server-side, through an Ajax call.",
            "line": " workspace\\templates\\datatables.js:223"
        },
        {
            "message": "Missing item type\nThis function will make DataTables recalculate the column sizes, based on the data\ncontained in the table and the sizes applied to the columns (in the DOM, CSS or\nthrough the sWidth parameter). This can be useful when the width of the table's\nparent element changes (for example a window resize).",
            "line": " workspace\\templates\\datatables.js:278"
        },
        {
            "message": "Missing item type\nQuickly and simply clear a table",
            "line": " workspace\\templates\\datatables.js:315"
        },
        {
            "message": "Missing item type\nThe exact opposite of 'opening' a row, this function will close any rows which\nare currently 'open'.",
            "line": " workspace\\templates\\datatables.js:339"
        },
        {
            "message": "Missing item type\nRemove a row for the table",
            "line": " workspace\\templates\\datatables.js:369"
        },
        {
            "message": "Missing item type\nRestore the table to it's original state in the DOM by removing all of DataTables\nenhancements, alterations to the DOM structure of the table and event listeners.",
            "line": " workspace\\templates\\datatables.js:408"
        },
        {
            "message": "Missing item type\nRedraw the table",
            "line": " workspace\\templates\\datatables.js:428"
        },
        {
            "message": "Missing item type\nFilter the input based on data",
            "line": " workspace\\templates\\datatables.js:450"
        },
        {
            "message": "Missing item type\nGet the data for the whole table, an individual row or an individual cell based on the\nprovided parameters.",
            "line": " workspace\\templates\\datatables.js:484"
        },
        {
            "message": "Missing item type\nGet an array of the TR nodes that are used in the table's body. Note that you will\ntypically want to use the '$' API method in preference to this as it is more\nflexible.",
            "line": " workspace\\templates\\datatables.js:537"
        },
        {
            "message": "Missing item type\nGet the array indexes of a particular cell from it's DOM element\nand column index including hidden columns",
            "line": " workspace\\templates\\datatables.js:565"
        },
        {
            "message": "Missing item type\nCheck to see if a row is 'open' or not.",
            "line": " workspace\\templates\\datatables.js:614"
        },
        {
            "message": "Missing item type\nThis function will place a new row directly after a row which is currently\non display on the page, with the HTML contents that is passed into the\nfunction. This can be used, for example, to ask for confirmation that a\nparticular record should be deleted.",
            "line": " workspace\\templates\\datatables.js:643"
        },
        {
            "message": "Missing item type\nChange the pagination - provides the internal logic for pagination in a simple API\nfunction. With this function you can have a DataTables table go to the next,\nprevious, first or last pages.",
            "line": " workspace\\templates\\datatables.js:683"
        },
        {
            "message": "Missing item type\nShow a particular column",
            "line": " workspace\\templates\\datatables.js:709"
        },
        {
            "message": "Missing item type\nGet the settings for a particular table for external manipulation",
            "line": " workspace\\templates\\datatables.js:735"
        },
        {
            "message": "Missing item type\nSort the table by a particular column",
            "line": " workspace\\templates\\datatables.js:757"
        },
        {
            "message": "Missing item type\nAttach a sort listener to an element for a given column",
            "line": " workspace\\templates\\datatables.js:778"
        },
        {
            "message": "Missing item type\nUpdate a table cell or row - this method will accept either a single value to\nupdate the cell with, an array of values with one element for each column or\nan object in the same format as the original data source. The function is\nself-referencing in order to make the multi column updates easier.",
            "line": " workspace\\templates\\datatables.js:800"
        },
        {
            "message": "Missing item type\nDetermine if all values in the array are unique. This means we can short\ncut the _unique method at the cost of a single loop. A sorted array is used\nto easily check the values.",
            "line": " workspace\\templates\\datatables.js:1530"
        },
        {
            "message": "Missing item type\nFind the unique elements in a source array.",
            "line": " workspace\\templates\\datatables.js:1559"
        },
        {
            "message": "Missing item type\nDataTables utility methods\n\nThis namespace provides helper methods that DataTables uses internally to\ncreate a DataTable, but which are not exclusively used only for DataTables.\nThese methods can be used by extension authors to save the duplication of\ncode.",
            "line": " workspace\\templates\\datatables.js:1599"
        },
        {
            "message": "Missing item type\nThrottle the calls to a function. Arguments and context are maintained\nfor the throttled function.",
            "line": " workspace\\templates\\datatables.js:1610"
        },
        {
            "message": "Missing item type\nEscape a string such that it can be used in a regular expression",
            "line": " workspace\\templates\\datatables.js:1646"
        },
        {
            "message": "Missing item type\nCreate a mapping object that allows camel case parameters to be looked up\nfor their Hungarian counterparts. The mapping is stored in a private\nparameter called `_hungarianMap` which can be accessed on the source object.",
            "line": " workspace\\templates\\datatables.js:1659"
        },
        {
            "message": "Missing item type\nConvert from camel case parameters to Hungarian, based on a Hungarian map\ncreated by _fnHungarianMap.",
            "line": " workspace\\templates\\datatables.js:1693"
        },
        {
            "message": "Missing item type\nLanguage compatibility - when certain options are given, and others aren't, we\nneed to duplicate the values over, in order to provide backwards compatibility\nwith older language files.",
            "line": " workspace\\templates\\datatables.js:1736"
        },
        {
            "message": "Missing item type\nMap one parameter onto another",
            "line": " workspace\\templates\\datatables.js:1776"
        },
        {
            "message": "Missing item type\nProvide backwards compatibility for the main DT options. Note that the new\noptions are mapped onto the old parameters, so this is an external interface\nchange only.",
            "line": " workspace\\templates\\datatables.js:1789"
        },
        {
            "message": "Missing item type\nProvide backwards compatibility for column options. Note that the new options\nare mapped onto the old parameters, so this is an external interface change\nonly.",
            "line": " workspace\\templates\\datatables.js:1830"
        },
        {
            "message": "Missing item type\nBrowser feature detection for capabilities, quirks",
            "line": " workspace\\templates\\datatables.js:1851"
        },
        {
            "message": "Missing item type\nArray.prototype reduce[Right] method, used for browsers which don't support\nJS 1.6. Done this way to reduce code size, since we iterate either way",
            "line": " workspace\\templates\\datatables.js:1930"
        },
        {
            "message": "Missing item type\nAdd a column to the list used for the table with default values",
            "line": " workspace\\templates\\datatables.js:1964"
        },
        {
            "message": "Missing item type\nApply options for a column",
            "line": " workspace\\templates\\datatables.js:1995"
        },
        {
            "message": "Missing item type\nAdjust the table column widths for new data. Note: you would probably want to\ndo a redraw after calling this function!",
            "line": " workspace\\templates\\datatables.js:2127"
        },
        {
            "message": "Missing item type\nCovert the index of a visible column to the index in the data array (take account\nof hidden columns)",
            "line": " workspace\\templates\\datatables.js:2157"
        },
        {
            "message": "Missing item type\nCovert the index of an index in the data array and convert it to the visible\n  column index (take account of hidden columns)",
            "line": " workspace\\templates\\datatables.js:2175"
        },
        {
            "message": "Missing item type\nGet the number of visible columns",
            "line": " workspace\\templates\\datatables.js:2192"
        },
        {
            "message": "Missing item type\nGet an array of column indexes that match a given property",
            "line": " workspace\\templates\\datatables.js:2213"
        },
        {
            "message": "Missing item type\nCalculate the 'type' of a column",
            "line": " workspace\\templates\\datatables.js:2235"
        },
        {
            "message": "Missing item type\nTake the column definitions and static columns arrays and calculate how\nthey relate to column indexes. The callback function will then apply the\ndefinition found for a column to a suitable configuration object.",
            "line": " workspace\\templates\\datatables.js:2300"
        },
        {
            "message": "Missing item type\nAdd a data array to the table, creating DOM node etc. This is the parallel to\n_fnGatherData, but for adding rows from a Javascript source, rather than a\nDOM source.",
            "line": " workspace\\templates\\datatables.js:2378"
        },
        {
            "message": "Missing item type\nAdd one or more TR elements to the table. Generally we'd expect to\nuse this for reading data from a DOM sourced table, but it could be\nused for an TR element. Note that if a TR is given, it is used (i.e.\nit is not cloned).",
            "line": " workspace\\templates\\datatables.js:2431"
        },
        {
            "message": "Missing item type\nTake a TR element and convert it to an index in aoData",
            "line": " workspace\\templates\\datatables.js:2457"
        },
        {
            "message": "Missing item type\nTake a TD element and convert it into a column data index (not the visible index)",
            "line": " workspace\\templates\\datatables.js:2470"
        },
        {
            "message": "Missing item type\nGet the data for a given cell from the internal cache, taking into account data mapping",
            "line": " workspace\\templates\\datatables.js:2484"
        },
        {
            "message": "Missing item type\nSet the value for a specific cell, into the internal data cache",
            "line": " workspace\\templates\\datatables.js:2533"
        },
        {
            "message": "Missing item type\nSplit string on periods, taking into account escaped periods",
            "line": " workspace\\templates\\datatables.js:2558"
        },
        {
            "message": "Missing item type\nReturn a function that can be used to get data from a source object, taking\ninto account the ability to use nested objects as a source",
            "line": " workspace\\templates\\datatables.js:2571"
        },
        {
            "message": "Missing item type\nReturn a function that can be used to set data from a source object, taking\ninto account the ability to use nested objects as a source",
            "line": " workspace\\templates\\datatables.js:2696"
        },
        {
            "message": "Missing item type\nReturn an array with the full table data",
            "line": " workspace\\templates\\datatables.js:2816"
        },
        {
            "message": "Missing item type\nNuke the table",
            "line": " workspace\\templates\\datatables.js:2828"
        },
        {
            "message": "Missing item type\nTake an array of integers (index array) and remove a target integer (value - not\nthe key!)",
            "line": " workspace\\templates\\datatables.js:2842"
        },
        {
            "message": "Missing item type\nMark cached data as invalid such that a re-read of the data will occur when\nthe cached data is next requested. Also update from the data source object.",
            "line": " workspace\\templates\\datatables.js:2872"
        },
        {
            "message": "Missing item type\nBuild a data source object from an HTML row, reading the contents of the\ncells that are in the row.",
            "line": " workspace\\templates\\datatables.js:2949"
        },
        {
            "message": "Missing item type\nCreate a new TR element (and it's TD children) for a row",
            "line": " workspace\\templates\\datatables.js:3065"
        },
        {
            "message": "Missing item type\nAdd attributes to a row based on the special `DT_*` parameters in a data\nsource object.",
            "line": " workspace\\templates\\datatables.js:3152"
        },
        {
            "message": "Missing item type\nCreate the HTML header for the table",
            "line": " workspace\\templates\\datatables.js:3194"
        },
        {
            "message": "Missing item type\nDraw the header (or footer) element based on the column visibility states. The\nmethodology here is to use the layout array from _fnDetectHeader, modified for\nthe instantaneous column visibility, to construct the new layout. The grid is\ntraversed over cell at a time in a rows x columns grid fashion, although each\ncell insert can cover multiple elements in the grid - which is tracks using the\naApplied array. Cell inserts in the grid will only occur where there isn't\nalready a cell in that position.",
            "line": " workspace\\templates\\datatables.js:3272"
        },
        {
            "message": "Missing item type\nInsert the required TR nodes into the table for display",
            "line": " workspace\\templates\\datatables.js:3378"
        },
        {
            "message": "Missing item type\nRedraw the table - taking account of the various features which are enabled",
            "line": " workspace\\templates\\datatables.js:3517"
        },
        {
            "message": "Missing item type\nAdd the options to the page HTML for the table",
            "line": " workspace\\templates\\datatables.js:3557"
        },
        {
            "message": "Missing item type\nUse the DOM source to create up an array of header cells. The idea here is to\ncreate a layout grid (array) of rows x columns, which contains a reference\nto the cell that that point in the grid (regardless of col/rowspan), such that\nany column / row could be removed and the new grid constructed",
            "line": " workspace\\templates\\datatables.js:3709"
        },
        {
            "message": "Missing item type\nGet an array of unique th elements, one for each column",
            "line": " workspace\\templates\\datatables.js:3785"
        },
        {
            "message": "Missing item type\nCreate an Ajax call based on the table's settings, taking into account that\nparameters can have multiple forms, and backwards compatibility.",
            "line": " workspace\\templates\\datatables.js:3821"
        },
        {
            "message": "Missing item type\nUpdate the table using an Ajax call",
            "line": " workspace\\templates\\datatables.js:3957"
        },
        {
            "message": "Missing item type\nBuild up the parameters in an object needed for a server-side processing\nrequest. Note that this is basically done twice, is different ways - a modern\nmethod which is used by default in DataTables 1.10 which uses objects and\narrays, or the 1.9- method with is name / value pairs. 1.9 method is used if\nthe sAjaxSource option is used in the initialisation, or the legacyAjax\noption is set.",
            "line": " workspace\\templates\\datatables.js:3983"
        },
        {
            "message": "Missing item type\nData the data from the server (nuking the old) and redraw the table",
            "line": " workspace\\templates\\datatables.js:4091"
        },
        {
            "message": "Missing item type\nGet the data from the JSON data source to use for drawing a table. Using\n`_fnGetObjectDataFn` allows the data to be sourced from a property of the\nsource object, or from a processing function.",
            "line": " workspace\\templates\\datatables.js:4144"
        },
        {
            "message": "Missing item type\nGenerate the node required for filtering text",
            "line": " workspace\\templates\\datatables.js:4169"
        },
        {
            "message": "Missing item type\nFilter the table using both the global filter and column based filtering",
            "line": " workspace\\templates\\datatables.js:4256"
        },
        {
            "message": "Missing item type\nApply custom filtering functions",
            "line": " workspace\\templates\\datatables.js:4311"
        },
        {
            "message": "Missing item type\nFilter the table on a per-column basis",
            "line": " workspace\\templates\\datatables.js:4343"
        },
        {
            "message": "Missing item type\nFilter the data table based on user input and draw the table",
            "line": " workspace\\templates\\datatables.js:4376"
        },
        {
            "message": "Missing item type\nBuild a regular expression object suitable for searching a table",
            "line": " workspace\\templates\\datatables.js:4432"
        },
        {
            "message": "Missing item type\nEscape a string such that it can be used in a regular expression",
            "line": " workspace\\templates\\datatables.js:4471"
        },
        {
            "message": "Missing item type\nConvert from the internal Hungarian notation to camelCase for external\ninteraction",
            "line": " workspace\\templates\\datatables.js:4549"
        },
        {
            "message": "Missing item type\nConvert from camelCase notation to the internal Hungarian. We could use the\nHungarian convert function here, but this is cleaner",
            "line": " workspace\\templates\\datatables.js:4568"
        },
        {
            "message": "Missing item type\nGenerate the node required for the info display",
            "line": " workspace\\templates\\datatables.js:4585"
        },
        {
            "message": "Missing item type\nUpdate the information elements in the display",
            "line": " workspace\\templates\\datatables.js:4620"
        },
        {
            "message": "Missing item type\nDraw the table for the first time, adding all required features",
            "line": " workspace\\templates\\datatables.js:4685"
        },
        {
            "message": "Missing item type\nDraw the table for the first time, adding all required features",
            "line": " workspace\\templates\\datatables.js:4767"
        },
        {
            "message": "Missing item type\nGenerate the node required for user display length changing",
            "line": " workspace\\templates\\datatables.js:4801"
        },
        {
            "message": "Missing item type\nGenerate the node required for default pagination",
            "line": " workspace\\templates\\datatables.js:4867"
        },
        {
            "message": "Missing item type\nAlter the display settings to change the page",
            "line": " workspace\\templates\\datatables.js:4925"
        },
        {
            "message": "Missing item type\nGenerate the node required for the processing node",
            "line": " workspace\\templates\\datatables.js:5001"
        },
        {
            "message": "Missing item type\nDisplay or hide the processing indicator",
            "line": " workspace\\templates\\datatables.js:5018"
        },
        {
            "message": "Missing item type\nAdd any control elements for the table - specifically scrolling",
            "line": " workspace\\templates\\datatables.js:5033"
        },
        {
            "message": "Missing item type\nUpdate the header, footer and body tables for resizing - i.e. column\nalignment.\n\nWelcome to the most horrible function DataTables. The process that this\nfunction follows is basically:\n  1. Re-create the table inside the scrolling div\n  2. Take live measurements from the DOM\n  3. Apply the measurements to align the columns\n  4. Clean up",
            "line": " workspace\\templates\\datatables.js:5183"
        },
        {
            "message": "Missing item type\nApply a given function to the display child nodes of an element array (typically\nTD children of TR rows",
            "line": " workspace\\templates\\datatables.js:5468"
        },
        {
            "message": "Missing item type\nCalculate the width of columns for the table",
            "line": " workspace\\templates\\datatables.js:5510"
        },
        {
            "message": "Missing item type\nThrottle the calls to a function. Arguments and context are maintained for\nthe throttled function",
            "line": " workspace\\templates\\datatables.js:5735"
        },
        {
            "message": "Missing item type\nConvert a CSS unit width to pixels (e.g. 2em)",
            "line": " workspace\\templates\\datatables.js:5746"
        },
        {
            "message": "Missing item type\nGet the widest node",
            "line": " workspace\\templates\\datatables.js:5770"
        },
        {
            "message": "Missing item type\nGet the maximum strlen for each data column",
            "line": " workspace\\templates\\datatables.js:5791"
        },
        {
            "message": "Missing item type\nAppend a CSS unit (only if required) to a string",
            "line": " workspace\\templates\\datatables.js:5817"
        },
        {
            "message": "Missing item type\nChange the order of the table",
            "line": " workspace\\templates\\datatables.js:5909"
        },
        {
            "message": "Missing item type\nFunction to run on user sort request",
            "line": " workspace\\templates\\datatables.js:6086"
        },
        {
            "message": "Missing item type\nAttach a sort handler (click) to a node",
            "line": " workspace\\templates\\datatables.js:6172"
        },
        {
            "message": "Missing item type\nSet the sorting classes on table's body, Note: it is safe to call this function\nwhen bSort and bSortClasses are false",
            "line": " workspace\\templates\\datatables.js:6212"
        },
        {
            "message": "Missing item type\nSave the state of a table",
            "line": " workspace\\templates\\datatables.js:6289"
        },
        {
            "message": "Missing item type\nAttempt to load a saved table state",
            "line": " workspace\\templates\\datatables.js:6323"
        },
        {
            "message": "Missing item type\nReturn the settings object for a particular table",
            "line": " workspace\\templates\\datatables.js:6426"
        },
        {
            "message": "Missing item type\nLog an error message",
            "line": " workspace\\templates\\datatables.js:6443"
        },
        {
            "message": "Missing item type\nSee if a property is defined on one object, if so assign it to the other object",
            "line": " workspace\\templates\\datatables.js:6486"
        },
        {
            "message": "Missing item type\nExtend objects - very similar to jQuery.extend, but deep copy objects, and\nshallow copy arrays. The reason we need to do this, is that we don't want to\ndeep copy array init values (such as aaSorting) since the dev wouldn't be\nable to override them, but we do want to deep copy arrays.",
            "line": " workspace\\templates\\datatables.js:6519"
        },
        {
            "message": "Missing item type\nBind an event handers to allow a click or return key to activate the callback.\nThis is good for accessibility since a return on the keyboard will have the\nsame effect as a click, if the element has focus.",
            "line": " workspace\\templates\\datatables.js:6563"
        },
        {
            "message": "Missing item type\nRegister a callback function. Easily allows a callback function to be added to\nan array store of callback functions that can then all be called together.",
            "line": " workspace\\templates\\datatables.js:6592"
        },
        {
            "message": "Missing item type\nFire callback functions and trigger events. Note that the loop over the\ncallback array store is done backwards! Further note that you do not want to\nfire off triggers in time sensitive applications (for example cell creation)\nas its slow.",
            "line": " workspace\\templates\\datatables.js:6613"
        },
        {
            "message": "Missing item type\nDetect the data source being used for the table. Used to simplify the code\na little (ajax) and to make it compress a little smaller.",
            "line": " workspace\\templates\\datatables.js:6695"
        },
        {
            "message": "Missing item type\nComputed structure of the DataTables API, defined by the options passed to\n`DataTable.Api.register()` when building the API.\n\nThe structure is built in order to speed creation and extension of the Api\nobjects since the extensions are effectively pre-parsed.\n\nThe array is an array of objects with the following structure, where this\nbase array represents the Api prototype base:\n\n    [\n      {\n        name:      'data'                -- string   - Property name\n        val:       function () {},       -- function - Api method (or undefined if just an object\n        methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n        propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\n      },\n      {\n        name:     'row'\n        val:       {},\n        methodExt: [ ... ],\n        propExt:   [\n          {\n            name:      'data'\n            val:       function () {},\n            methodExt: [ ... ],\n            propExt:   [ ... ]\n          },\n          ...\n        ]\n      }\n    ]",
            "line": " workspace\\templates\\datatables.js:6717"
        },
        {
            "message": "Missing item type\n`Array.prototype` reference.",
            "line": " workspace\\templates\\datatables.js:6756"
        },
        {
            "message": "Missing item type\nAbstraction for `context` parameter of the `Api` constructor to allow it to\ntake several different forms for ease of use.\n\nEach of the input parameter types will be converted to a DataTables settings\nobject where possible.",
            "line": " workspace\\templates\\datatables.js:6765"
        },
        {
            "message": "Missing item type\nSelector for HTML tables. Apply the given selector to the give array of\nDataTables settings objects.",
            "line": " workspace\\templates\\datatables.js:7330"
        },
        {
            "message": "Missing item type\nContext selector for the API's context (i.e. the tables the API instance\nrefers to.",
            "line": " workspace\\templates\\datatables.js:7363"
        },
        {
            "message": "Missing item type\nRedraw the tables in the current context.",
            "line": " workspace\\templates\\datatables.js:7429"
        },
        {
            "message": "Missing item type\nGet the current page index.",
            "line": " workspace\\templates\\datatables.js:7451"
        },
        {
            "message": "Missing item type\nPaging information for the first table in the current context.\n\nIf you require paging information for another table, use the `table()` method\nwith a suitable selector.",
            "line": " workspace\\templates\\datatables.js:7482"
        },
        {
            "message": "Missing item type\nGet the current page length.",
            "line": " workspace\\templates\\datatables.js:7525"
        },
        {
            "message": "Missing item type\nGet the JSON response from the last Ajax request that DataTables made to the\nserver. Note that this returns the JSON from the first table in the current\ncontext.",
            "line": " workspace\\templates\\datatables.js:7592"
        },
        {
            "message": "Missing item type\nGet the data submitted in the last Ajax request",
            "line": " workspace\\templates\\datatables.js:7610"
        },
        {
            "message": "Missing item type\nReload tables from the Ajax data source. Note that this function will\nautomatically re-draw the table when the remote data has been loaded.",
            "line": " workspace\\templates\\datatables.js:7624"
        },
        {
            "message": "Missing item type\nGet the current Ajax URL. Note that this returns the URL from the first\ntable in the current context.",
            "line": " workspace\\templates\\datatables.js:7640"
        },
        {
            "message": "Missing item type\nLoad data from the newly set Ajax URL. Note that this method is only\navailable when `ajax.url()` is used to set a URL. Additionally, this method\nhas the same effect as calling `ajax.reload()` but is provided for\nconvenience when setting a new URL. Like `ajax.reload()` it will\nautomatically redraw the table once the remote data has been loaded.",
            "line": " workspace\\templates\\datatables.js:7684"
        },
        {
            "message": "Missing item type",
            "line": " workspace\\templates\\datatables.js:8107"
        },
        {
            "message": "Missing item type\nGet current ordering (sorting) that has been applied to the table.",
            "line": " workspace\\templates\\datatables.js:8888"
        },
        {
            "message": "Missing item type\nAttach a sort listener to an element for a given column",
            "line": " workspace\\templates\\datatables.js:8943"
        },
        {
            "message": "Missing item type\nProvide a common method for plug-ins to check the version of DataTables being\nused, in order to ensure compatibility.",
            "line": " workspace\\templates\\datatables.js:9087"
        },
        {
            "message": "Missing item type\nCheck if a `<table>` node is a DataTable table already or not.",
            "line": " workspace\\templates\\datatables.js:9125"
        },
        {
            "message": "Missing item type\nGet all DataTable tables that have been initialised - optionally you can\nselect to get only currently visible tables.",
            "line": " workspace\\templates\\datatables.js:9162"
        },
        {
            "message": "Missing item type\nConvert from camel case parameters to Hungarian notation. This is made public\nfor the extensions to provide the same ability as DataTables core to accept\neither the 1.9 style Hungarian notation, or the 1.10+ style camelCase\nparameters.",
            "line": " workspace\\templates\\datatables.js:9199"
        },
        {
            "message": "Missing item type",
            "line": " workspace\\templates\\datatables.js:9216"
        },
        {
            "message": "Missing item type\nObject models container, for the various models that DataTables has\navailable to it. These models define the objects that are used to hold\nthe active state and configuration of the table.",
            "line": " workspace\\templates\\datatables.js:9444"
        },
        {
            "message": "Missing item type\nTemplate object for the way in which DataTables holds information about\nsearch information for the global filter and individual column filters.",
            "line": " workspace\\templates\\datatables.js:9454"
        },
        {
            "message": "Missing item type\nFlag to indicate if the filtering should be case insensitive or not",
            "line": " workspace\\templates\\datatables.js:9460"
        },
        {
            "message": "Missing item type\nApplied search term",
            "line": " workspace\\templates\\datatables.js:9467"
        },
        {
            "message": "Missing item type\nFlag to indicate if the search term should be interpreted as a\nregular expression (true) or not (false) and therefore and special\nregex characters escaped.",
            "line": " workspace\\templates\\datatables.js:9474"
        },
        {
            "message": "Missing item type\nFlag to indicate if DataTables is to use its smart filtering or not.",
            "line": " workspace\\templates\\datatables.js:9483"
        },
        {
            "message": "Missing item type\nTemplate object for the way in which DataTables holds information about\neach individual row. This is the object format used for the settings\naoData array.",
            "line": " workspace\\templates\\datatables.js:9494"
        },
        {
            "message": "Missing item type\nTR element for the row",
            "line": " workspace\\templates\\datatables.js:9501"
        },
        {
            "message": "Missing item type\nArray of TD elements for each row. This is null until the row has been\ncreated.",
            "line": " workspace\\templates\\datatables.js:9508"
        },
        {
            "message": "Missing item type\nData object from the original data source for the row. This is either\nan array if using the traditional form of DataTables, or an object if\nusing mData options. The exact type will depend on the passed in\ndata from the data source, or will be an array if using DOM a data\nsource.",
            "line": " workspace\\templates\\datatables.js:9516"
        },
        {
            "message": "Missing item type\nSorting data cache - this array is ostensibly the same length as the\nnumber of columns (although each index is generated only as it is\nneeded), and holds the data that is used for sorting each column in the\nrow. We do this cache generation at the start of the sort in order that\nthe formatting of the sort data need be done only once for each cell\nper sort. This array should not be read from or written to by anything\nother than the master sorting methods.",
            "line": " workspace\\templates\\datatables.js:9527"
        },
        {
            "message": "Missing item type\nPer cell filtering data cache. As per the sort data cache, used to\nincrease the performance of the filtering in DataTables",
            "line": " workspace\\templates\\datatables.js:9541"
        },
        {
            "message": "Missing item type\nFiltering data cache. This is the same as the cell filtering cache, but\nin this case a string rather than an array. This is easily computed with\na join on `_aFilterData`, but is provided as a cache so the join isn't\nneeded on every search (memory traded for performance)",
            "line": " workspace\\templates\\datatables.js:9550"
        },
        {
            "message": "Missing item type\nCache of the class name that DataTables has applied to the row, so we\ncan quickly look at this variable rather than needing to do a DOM check\non className for the nTr property.",
            "line": " workspace\\templates\\datatables.js:9561"
        },
        {
            "message": "Missing item type\nDenote if the original data source was from the DOM, or the data source\nobject. This is used for invalidating data, so DataTables can\nautomatically read data from the original source, unless uninstructed\notherwise.",
            "line": " workspace\\templates\\datatables.js:9571"
        },
        {
            "message": "Missing item type\nIndex in the aoData array. This saves an indexOf lookup when we have the\nobject, but want to know the index",
            "line": " workspace\\templates\\datatables.js:9582"
        },
        {
            "message": "Missing item type\nTemplate object for the column information object in DataTables. This object\nis held in the settings aoColumns array and contains all the information that\nDataTables needs about each individual column.\n\nNote that this object is related to {@link DataTable.defaults.column}\nbut this one is the internal data store for DataTables's cache of columns.\nIt should NOT be manipulated outside of DataTables. Any configuration should\nbe done through the initialisation options.",
            "line": " workspace\\templates\\datatables.js:9593"
        },
        {
            "message": "Missing item type\nColumn index. This could be worked out on-the-fly with $.inArray, but it\nis faster to just hold it as a variable",
            "line": " workspace\\templates\\datatables.js:9605"
        },
        {
            "message": "Missing item type\nA list of the columns that sorting should occur on when this column\nis sorted. That this property is an array allows multi-column sorting\nto be defined for a column (for example first name / last name columns\nwould benefit from this). The values are integers pointing to the\ncolumns to be sorted on (typically it will be a single integer pointing\nat itself, but that doesn't need to be the case).",
            "line": " workspace\\templates\\datatables.js:9613"
        },
        {
            "message": "Missing item type\nDefine the sorting directions that are applied to the column, in sequence\nas the column is repeatedly sorted upon - i.e. the first value is used\nas the sorting direction when the column if first sorted (clicked on).\nSort it again (click again) and it will move on to the next index.\nRepeat until loop.",
            "line": " workspace\\templates\\datatables.js:9624"
        },
        {
            "message": "Missing item type\nFlag to indicate if the column is searchable, and thus should be included\nin the filtering or not.",
            "line": " workspace\\templates\\datatables.js:9634"
        },
        {
            "message": "Missing item type\nFlag to indicate if the column is sortable or not.",
            "line": " workspace\\templates\\datatables.js:9641"
        },
        {
            "message": "Missing item type\nFlag to indicate if the column is currently visible in the table or not",
            "line": " workspace\\templates\\datatables.js:9647"
        },
        {
            "message": "Missing item type\nStore for manual type assignment using the `column.type` option. This\nis held in store so we can manipulate the column's `sType` property.",
            "line": " workspace\\templates\\datatables.js:9653"
        },
        {
            "message": "Missing item type\nFlag to indicate if HTML5 data attributes should be used as the data\nsource for filtering or sorting. True is either are.",
            "line": " workspace\\templates\\datatables.js:9662"
        },
        {
            "message": "Missing item type\nDeveloper definable function that is called whenever a cell is created (Ajax source,\netc) or processed for input (DOM source). This can be used as a compliment to mRender\nallowing you to modify the DOM element (add background colour for example) when the\nelement is available.",
            "line": " workspace\\templates\\datatables.js:9671"
        },
        {
            "message": "Missing item type\nFunction to get data from a cell in a column. You should <b>never</b>\naccess data directly through _aData internally in DataTables - always use\nthe method attached to this property. It allows mData to function as\nrequired. This function is automatically assigned by the column\ninitialisation method",
            "line": " workspace\\templates\\datatables.js:9685"
        },
        {
            "message": "Missing item type\nFunction to set data for a cell in the column. You should <b>never</b>\nset the data directly to _aData internally in DataTables - always use\nthis method. It allows mData to function as required. This function\nis automatically assigned by the column initialisation method",
            "line": " workspace\\templates\\datatables.js:9701"
        },
        {
            "message": "Missing item type\nProperty to read the value for the cells in the column from the data\nsource array / object. If null, then the default content is used, if a\nfunction is given then the return from the function is used.",
            "line": " workspace\\templates\\datatables.js:9714"
        },
        {
            "message": "Missing item type\nPartner property to mData which is used (only when defined) to get\nthe data - i.e. it is basically the same as mData, but without the\n'set' option, and also the data fed to it is the result from mData.\nThis is the rendering method to match the data method of mData.",
            "line": " workspace\\templates\\datatables.js:9723"
        },
        {
            "message": "Missing item type\nUnique header TH/TD element for this column - this is what the sorting\nlistener is attached to (if sorting is enabled.)",
            "line": " workspace\\templates\\datatables.js:9733"
        },
        {
            "message": "Missing item type\nUnique footer TH/TD element for this column (if there is one). Not used\nin DataTables as such, but can be used for plug-ins to reference the\nfooter for each column.",
            "line": " workspace\\templates\\datatables.js:9741"
        },
        {
            "message": "Missing item type\nThe class to apply to all TD elements in the table's TBODY for the column",
            "line": " workspace\\templates\\datatables.js:9750"
        },
        {
            "message": "Missing item type\nWhen DataTables calculates the column widths to assign to each column,\nit finds the longest string in each column and then constructs a\ntemporary table and reads the widths from that. The problem with this\nis that \"mmm\" is much wider then \"iiii\", but the latter is a longer\nstring - thus the calculation can go wrong (doing it properly and putting\nit into an DOM object and measuring that is horribly(!) slow). Thus as\na \"work around\" we provide this option. It will append its value to the\ntext that is found to be the longest string for the column - i.e. padding.",
            "line": " workspace\\templates\\datatables.js:9757"
        },
        {
            "message": "Missing item type\nAllows a default value to be given for a column's data, and will be used\nwhenever a null data source is encountered (this can be because mData\nis set to null, or because the data source itself is null).",
            "line": " workspace\\templates\\datatables.js:9770"
        },
        {
            "message": "Missing item type\nName for the column, allowing reference to the column by name as well as\nby index (needs a lookup to work by name).",
            "line": " workspace\\templates\\datatables.js:9779"
        },
        {
            "message": "Missing item type\nCustom sorting data type - defines which of the available plug-ins in\nafnSortData the custom sorting will use - if any is defined.",
            "line": " workspace\\templates\\datatables.js:9786"
        },
        {
            "message": "Missing item type\nClass to be applied to the header element when sorting on this column",
            "line": " workspace\\templates\\datatables.js:9794"
        },
        {
            "message": "Missing item type\nClass to be applied to the header element when sorting on this column -\nwhen jQuery UI theming is used.",
            "line": " workspace\\templates\\datatables.js:9801"
        },
        {
            "message": "Missing item type\nTitle of the column - what is seen in the TH element (nTh).",
            "line": " workspace\\templates\\datatables.js:9809"
        },
        {
            "message": "Missing item type\nColumn sorting and filtering type",
            "line": " workspace\\templates\\datatables.js:9815"
        },
        {
            "message": "Missing item type\nWidth of the column",
            "line": " workspace\\templates\\datatables.js:9822"
        },
        {
            "message": "Missing item type\nWidth of the column when it was first \"encountered\"",
            "line": " workspace\\templates\\datatables.js:9829"
        },
        {
            "message": "Missing item type\nInitialisation options that can be given to DataTables at initialisation\ntime.",
            "line": " workspace\\templates\\datatables.js:9854"
        },
        {
            "message": "Missing item type\nAn array of data to use for the table, passed in at initialisation which\nwill be used in preference to any data which is already in the DOM. This is\nparticularly useful for constructing tables purely in Javascript, for\nexample with a custom Ajax call.",
            "line": " workspace\\templates\\datatables.js:9860"
        },
        {
            "message": "Missing item type\nIf ordering is enabled, then DataTables will perform a first pass sort on\ninitialisation. You can define which column(s) the sort is performed\nupon, and the sorting direction, with this variable. The `sorting` array\nshould contain an array for each column to be sorted initially containing\nthe column's index and a direction string ('asc' or 'desc').",
            "line": " workspace\\templates\\datatables.js:9922"
        },
        {
            "message": "Missing item type\nThis parameter is basically identical to the `sorting` parameter, but\ncannot be overridden by user interaction with the table. What this means\nis that you could have a column (visible or hidden) which the sorting\nwill always be forced on first - any sorting after that (from the user)\nwill then be performed as required. This can be useful for grouping rows\ntogether.",
            "line": " workspace\\templates\\datatables.js:9952"
        },
        {
            "message": "Missing item type\nDataTables can be instructed to load data to display in the table from a\nAjax source. This option defines how that Ajax call is made and where to.\n\nThe `ajax` property has three different modes of operation, depending on\nhow it is defined. These are:\n\n* `string` - Set the URL from where the data should be loaded from.\n* `object` - Define properties for `jQuery.ajax`.\n* `function` - Custom data get function\n\n`string`\n--------\n\nAs a string, the `ajax` property simply defines the URL from which\nDataTables will load data.\n\n`object`\n--------\n\nAs an object, the parameters in the object are passed to\n[jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control\nof the Ajax request. DataTables has a number of default parameters which\nyou can override using this option. Please refer to the jQuery\ndocumentation for a full description of the options available, although\nthe following parameters provide additional options in DataTables or\nrequire special consideration:\n\n* `data` - As with jQuery, `data` can be provided as an object, but it\n  can also be used as a function to manipulate the data DataTables sends\n  to the server. The function takes a single parameter, an object of\n  parameters with the values that DataTables has readied for sending. An\n  object may be returned which will be merged into the DataTables\n  defaults, or you can add the items to the object that was passed in and\n  not return anything from the function. This supersedes `fnServerParams`\n  from DataTables 1.9-.\n\n* `dataSrc` - By default DataTables will look for the property `data` (or\n  `aaData` for compatibility with DataTables 1.9-) when obtaining data\n  from an Ajax source or for server-side processing - this parameter\n  allows that property to be changed. You can use Javascript dotted\n  object notation to get a data source for multiple levels of nesting, or\n  it my be used as a function. As a function it takes a single parameter,\n  the JSON returned from the server, which can be manipulated as\n  required, with the returned value being that used by DataTables as the\n  data source for the table. This supersedes `sAjaxDataProp` from\n  DataTables 1.9-.\n\n* `success` - Should not be overridden it is used internally in\n  DataTables. To manipulate / transform the data returned by the server\n  use `ajax.dataSrc`, or use `ajax` as a function (see below).\n\n`function`\n----------\n\nAs a function, making the Ajax call is left up to yourself allowing\ncomplete control of the Ajax request. Indeed, if desired, a method other\nthan Ajax could be used to obtain the required data, such as Web storage\nor an AIR database.\n\nThe function is given four parameters and no return is required. The\nparameters are:\n\n1. _object_ - Data to send to the server\n2. _function_ - Callback function that must be executed when the required\n   data has been obtained. That data should be passed into the callback\n   as the only parameter\n3. _object_ - DataTables settings object for the table\n\nNote that this supersedes `fnServerData` from DataTables 1.9-.",
            "line": " workspace\\templates\\datatables.js:9975"
        },
        {
            "message": "Missing item type\nThis parameter allows you to readily specify the entries in the length drop\ndown menu that DataTables shows when pagination is enabled. It can be\neither a 1D array of options which will be used for both the displayed\noption and the value, or a 2D array which will use the array in the first\nposition as the value, and the array in the second position as the\ndisplayed options (useful for language strings such as 'All').\n\nNote that the `pageLength` property will be automatically set to the\nfirst value given in this array, unless `pageLength` is also provided.",
            "line": " workspace\\templates\\datatables.js:10132"
        },
        {
            "message": "Missing item type\nBasically the same as `search`, this parameter defines the individual column\nfiltering state at initialisation time. The array must be of the same size\nas the number of columns, and each element be an object with the parameters\n`search` and `escapeRegex` (the latter is optional). 'null' is also\naccepted and the default will be used.",
            "line": " workspace\\templates\\datatables.js:10194"
        },
        {
            "message": "Missing item type\nAn array of CSS classes that should be applied to displayed rows. This\narray may be of any length, and DataTables will apply each class\nsequentially, looping when required.",
            "line": " workspace\\templates\\datatables.js:10221"
        },
        {
            "message": "Missing item type\nEnable or disable automatic column width calculation. This can be disabled\nas an optimisation (it takes some time to calculate the widths) if the\ntables widths are passed in using `columns`.",
            "line": " workspace\\templates\\datatables.js:10242"
        },
        {
            "message": "Missing item type\nDeferred rendering can provide DataTables with a huge speed boost when you\nare using an Ajax or JS data source for the table. This option, when set to\ntrue, will cause DataTables to defer the creation of the table elements for\neach row until they are needed for a draw - saving a significant amount of\ntime.",
            "line": " workspace\\templates\\datatables.js:10262"
        },
        {
            "message": "Missing item type\nReplace a DataTable which matches the given selector and replace it with\none which has the properties of the new initialisation object passed. If no\ntable matches the selector, then the new DataTable will be constructed as\nper normal.",
            "line": " workspace\\templates\\datatables.js:10285"
        },
        {
            "message": "Missing item type\nEnable or disable filtering of data. Filtering in DataTables is \"smart\" in\nthat it allows the end user to input multiple words (space separated) and\nwill match a row containing those words, even if not in the order that was\nspecified (this allow matching across multiple columns). Note that if you\nwish to use filtering in DataTables this must remain 'true' - to remove the\ndefault filtering input box and retain filtering abilities, please use\n{@link DataTable.defaults.dom}.",
            "line": " workspace\\templates\\datatables.js:10313"
        },
        {
            "message": "Missing item type\nEnable or disable the table information display. This shows information\nabout the data that is currently visible on the page, including information\nabout filtered data if that action is being performed.",
            "line": " workspace\\templates\\datatables.js:10337"
        },
        {
            "message": "Missing item type\nAllows the end user to select the size of a formatted page from a select\nmenu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).",
            "line": " workspace\\templates\\datatables.js:10357"
        },
        {
            "message": "Missing item type\nEnable or disable pagination.",
            "line": " workspace\\templates\\datatables.js:10376"
        },
        {
            "message": "Missing item type\nEnable or disable the display of a 'processing' indicator when the table is\nbeing processed (e.g. a sort). This is particularly useful for tables with\nlarge amounts of data where it can take a noticeable amount of time to sort\nthe entries.",
            "line": " workspace\\templates\\datatables.js:10394"
        },
        {
            "message": "Missing item type\nRetrieve the DataTables object for the given selector. Note that if the\ntable has already been initialised, this parameter will cause DataTables\nto simply return the object that has already been set up - it will not take\naccount of any changes you might have made to the initialisation object\npassed to DataTables (setting this parameter to true is an acknowledgement\nthat you understand this). `destroy` can be used to reinitialise a table if\nyou need.",
            "line": " workspace\\templates\\datatables.js:10415"
        },
        {
            "message": "Missing item type\nWhen vertical (y) scrolling is enabled, DataTables will force the height of\nthe table's viewport to the given height at all times (useful for layout).\nHowever, this can look odd when filtering data down to a small data set,\nand the footer is left \"floating\" further down. This parameter (when\nenabled) will cause DataTables to collapse the table's viewport down when\nthe result set will fit within the given Y height.",
            "line": " workspace\\templates\\datatables.js:10453"
        },
        {
            "message": "Missing item type\nConfigure DataTables to use server-side processing. Note that the\n`ajax` parameter must also be given in order to give DataTables a\nsource to obtain the required data for each draw.",
            "line": " workspace\\templates\\datatables.js:10477"
        },
        {
            "message": "Missing item type\nEnable or disable sorting of columns. Sorting of individual columns can be\ndisabled by the `sortable` option for each column.",
            "line": " workspace\\templates\\datatables.js:10499"
        },
        {
            "message": "Missing item type\nEnable or display DataTables' ability to sort multiple columns at the\nsame time (activated by shift-click by the user).",
            "line": " workspace\\templates\\datatables.js:10518"
        },
        {
            "message": "Missing item type\nAllows control over whether DataTables should use the top (true) unique\ncell that is found for a single column, or the bottom (false - default).\nThis is useful when using complex headers.",
            "line": " workspace\\templates\\datatables.js:10538"
        },
        {
            "message": "Missing item type\nEnable or disable the addition of the classes `sorting\\_1`, `sorting\\_2` and\n`sorting\\_3` to the columns which are currently being sorted on. This is\npresented as a feature switch as it can increase processing time (while\nclasses are removed and added) so for large data sets you might want to\nturn this off.",
            "line": " workspace\\templates\\datatables.js:10558"
        },
        {
            "message": "Missing item type\nEnable or disable state saving. When enabled HTML5 `localStorage` will be\nused to save table display information such as pagination information,\ndisplay length, filtering and sorting. As such when the end user reloads\nthe page the display display will match what thy had previously set up.\n\nDue to the use of `localStorage` the default state saving is not supported\nin IE6 or 7. If state saving is required in those browsers, use\n`stateSaveCallback` to provide a storage solution such as cookies.",
            "line": " workspace\\templates\\datatables.js:10580"
        },
        {
            "message": "Missing item type\nThis function is called when a TR element is created (and all TD child\nelements have been inserted), or registered if using a DOM source, allowing\nmanipulation of the TR element (adding classes etc).",
            "line": " workspace\\templates\\datatables.js:10605"
        },
        {
            "message": "Missing item type\nThis function is called on every 'draw' event, and allows you to\ndynamically modify any aspect you want about the created DOM.",
            "line": " workspace\\templates\\datatables.js:10633"
        },
        {
            "message": "Missing item type\nIdentical to fnHeaderCallback() but for the table footer this function\nallows you to modify the table footer on every 'draw' event.",
            "line": " workspace\\templates\\datatables.js:10654"
        },
        {
            "message": "Missing item type\nThis function is called on every 'draw' event, and allows you to\ndynamically modify the header row. This can be used to calculate and\ndisplay useful information about the table.",
            "line": " workspace\\templates\\datatables.js:10717"
        },
        {
            "message": "Missing item type\nThe information element can be used to convey information about the current\nstate of the table. Although the internationalisation options presented by\nDataTables are quite capable of dealing with most customisations, there may\nbe times where you wish to customise the string further. This callback\nallows you to do exactly that.",
            "line": " workspace\\templates\\datatables.js:10746"
        },
        {
            "message": "Missing item type\nCalled when the table has been initialised. Normally DataTables will\ninitialise sequentially and there will be no need for this function,\nhowever, this does not hold true when using external language information\nsince that is obtained using an async XHR call.",
            "line": " workspace\\templates\\datatables.js:10776"
        },
        {
            "message": "Missing item type\nCalled at the very start of each table draw and can be used to cancel the\ndraw by returning false, any other return (including undefined) results in\nthe full draw occurring).",
            "line": " workspace\\templates\\datatables.js:10801"
        },
        {
            "message": "Missing item type\nThis function allows you to 'post process' each row after it have been\ngenerated for each table draw, but before it is rendered on screen. This\nfunction might be used for setting the row class name etc.",
            "line": " workspace\\templates\\datatables.js:10827"
        },
        {
            "message": "Missing item type\n__Deprecated__ The functionality provided by this parameter has now been\nsuperseded by that provided through `ajax`, which should be used instead.\n\n It is often useful to send extra data to the server when making an Ajax\nrequest - for example custom filtering information, and this callback\nfunction makes it trivial to send extra information to the server. The\npassed in parameter is the data set that has been constructed by\nDataTables, and you can add to this or modify it as you require.",
            "line": " workspace\\templates\\datatables.js:10882"
        },
        {
            "message": "Missing item type\nCallback which allows modification of the saved state prior to loading that state.\nThis callback is called when the table is loading state from the stored data, but\nprior to the settings object being modified by the saved state. Note that for\nplug-in authors, you should use the `stateLoadParams` event to load parameters for\na plug-in.",
            "line": " workspace\\templates\\datatables.js:10950"
        },
        {
            "message": "Missing item type\nCallback that is called when the state has been loaded from the state saving method\nand the DataTables settings object has been modified as a result of the loaded state.",
            "line": " workspace\\templates\\datatables.js:10988"
        },
        {
            "message": "Missing item type\nCallback which allows modification of the state to be saved. Called when the table\nhas changed state a new state save is required. This method allows modification of\nthe state saving object prior to actually doing the save, including addition or\nother state properties or modification. Note that for plug-in authors, you should\nuse the `stateSaveParams` event to save parameters for a plug-in.",
            "line": " workspace\\templates\\datatables.js:11051"
        },
        {
            "message": "Missing item type\nDuration for which the saved state information is considered valid. After this period\nhas elapsed the state will be returned to the default.\nValue is given in seconds.",
            "line": " workspace\\templates\\datatables.js:11078"
        },
        {
            "message": "Missing item type\nWhen enabled DataTables will not make a request to the server for the first\npage draw - rather it will use the data already on the page (no sorting etc\nwill be applied to it), thus saving on an XHR at load time. `deferLoading`\nis used to indicate that deferred loading is required, but it is also used\nto tell DataTables how many records there are in the full table (allowing\nthe information element and pagination to be displayed correctly). In the case\nwhere a filtering is applied to the table on initial load, this can be\nindicated by giving the parameter as an array, where the first element is\nthe number of records available after filtering and the second element is the\nnumber of records without filtering (allowing the table information element\nto be shown correctly).",
            "line": " workspace\\templates\\datatables.js:11098"
        },
        {
            "message": "Missing item type\nNumber of rows to display on a single page when using pagination. If\nfeature enabled (`lengthChange`) then the end user will be able to override\nthis to a custom setting using a pop-up menu.",
            "line": " workspace\\templates\\datatables.js:11142"
        },
        {
            "message": "Missing item type\nDefine the starting point for data display when using DataTables with\npagination. Note that this parameter is the number of records, rather than\nthe page number, so if you have 10 records per page and want to start on\nthe third page, it should be \"20\".",
            "line": " workspace\\templates\\datatables.js:11162"
        },
        {
            "message": "Missing item type\nBy default DataTables allows keyboard navigation of the table (sorting, paging,\nand filtering) by adding a `tabindex` attribute to the required elements. This\nallows you to tab through the controls and press the enter key to activate them.\nThe tabindex is default 0, meaning that the tab follows the flow of the document.\nYou can overrule this using this parameter if you wish. Use a value of -1 to\ndisable built-in keyboard navigation.",
            "line": " workspace\\templates\\datatables.js:11183"
        },
        {
            "message": "Missing item type\nClasses that DataTables assigns to the various components and features\nthat it adds to the HTML table. This allows classes to be configured\nduring initialisation in addition to through the static\n{@link DataTable.ext.oStdClasses} object).",
            "line": " workspace\\templates\\datatables.js:11206"
        },
        {
            "message": "Missing item type\nAll strings that DataTables uses in the user interface that it creates\nare defined in this object, allowing you to modified them individually or\ncompletely replace them all as required.",
            "line": " workspace\\templates\\datatables.js:11217"
        },
        {
            "message": "Missing item type\nStrings that are used for WAI-ARIA labels and controls only (these are not\nactually visible on the page, but will be read by screenreaders, and thus\nmust be internationalised as well).",
            "line": " workspace\\templates\\datatables.js:11225"
        },
        {
            "message": "Missing item type\nARIA label that is added to the table headers when the column may be\nsorted ascending by activing the column (click or return when focused).\nNote that the column header is prefixed to this string.",
            "line": " workspace\\templates\\datatables.js:11233"
        },
        {
            "message": "Missing item type\nARIA label that is added to the table headers when the column may be\nsorted descending by activing the column (click or return when focused).\nNote that the column header is prefixed to this string.",
            "line": " workspace\\templates\\datatables.js:11256"
        },
        {
            "message": "Missing item type\nPagination string used by DataTables for the built-in pagination\ncontrol types.",
            "line": " workspace\\templates\\datatables.js:11280"
        },
        {
            "message": "Missing item type\nText to use when using the 'full_numbers' type of pagination for the\nbutton to take the user to the first page.",
            "line": " workspace\\templates\\datatables.js:11287"
        },
        {
            "message": "Missing item type\nText to use when using the 'full_numbers' type of pagination for the\nbutton to take the user to the last page.",
            "line": " workspace\\templates\\datatables.js:11310"
        },
        {
            "message": "Missing item type\nText to use for the 'next' pagination button (to take the user to the\nnext page).",
            "line": " workspace\\templates\\datatables.js:11333"
        },
        {
            "message": "Missing item type\nText to use for the 'previous' pagination button (to take the user to\nthe previous page).",
            "line": " workspace\\templates\\datatables.js:11356"
        },
        {
            "message": "Missing item type\nThis string is shown in preference to `zeroRecords` when the table is\nempty of data (regardless of filtering). Note that this is an optional\nparameter - if it is not given, the value of `zeroRecords` will be used\ninstead (either the default or given value).",
            "line": " workspace\\templates\\datatables.js:11379"
        },
        {
            "message": "Missing item type\nThis string gives information to the end user about the information\nthat is current on display on the page. The following tokens can be\nused in the string and will be dynamically replaced as the table\ndisplay updates. This tokens can be placed anywhere in the string, or\nremoved as needed by the language requires:\n\n* `\\_START\\_` - Display index of the first record on the current page\n* `\\_END\\_` - Display index of the last record on the current page\n* `\\_TOTAL\\_` - Number of records in the table after filtering\n* `\\_MAX\\_` - Number of records in the table without filtering\n* `\\_PAGE\\_` - Current page number\n* `\\_PAGES\\_` - Total number of pages of data in the table",
            "line": " workspace\\templates\\datatables.js:11402"
        },
        {
            "message": "Missing item type\nDisplay information string for when the table is empty. Typically the\nformat of this string should match `info`.",
            "line": " workspace\\templates\\datatables.js:11434"
        },
        {
            "message": "Missing item type\nWhen a user filters the information in a table, this string is appended\nto the information (`info`) to give an idea of how strong the filtering\nis. The variable _MAX_ is dynamically updated.",
            "line": " workspace\\templates\\datatables.js:11455"
        },
        {
            "message": "Missing item type\nIf can be useful to append extra information to the info string at times,\nand this variable does exactly that. This information will be appended to\nthe `info` (`infoEmpty` and `infoFiltered` in whatever combination they are\nbeing used) at all times.",
            "line": " workspace\\templates\\datatables.js:11477"
        },
        {
            "message": "Missing item type\nThis decimal place operator is a little different from the other\nlanguage options since DataTables doesn't output floating point\nnumbers, so it won't ever use this for display of a number. Rather,\nwhat this parameter does is modify the sort methods of the table so\nthat numbers which are in a format which has a character other than\na period (`.`) as a decimal place will be sorted numerically.\n\nNote that numbers with different decimal places cannot be shown in\nthe same table and still be sortable, the table must be consistent.\nHowever, multiple different tables on the page can use different\ndecimal place characters.",
            "line": " workspace\\templates\\datatables.js:11500"
        },
        {
            "message": "Missing item type\nDataTables has a build in number formatter (`formatNumber`) which is\nused to format large numbers that are used in the table information.\nBy default a comma is used, but this can be trivially changed to any\ncharacter you wish with this parameter.",
            "line": " workspace\\templates\\datatables.js:11531"
        },
        {
            "message": "Missing item type\nDetail the action that will be taken when the drop down menu for the\npagination length option is changed. The '_MENU_' variable is replaced\nwith a default select list of 10, 25, 50 and 100, and can be replaced\nwith a custom select box if required.",
            "line": " workspace\\templates\\datatables.js:11554"
        },
        {
            "message": "Missing item type\nWhen using Ajax sourced data and during the first draw when DataTables is\ngathering the data, this message is shown in an empty row in the table to\nindicate to the end user the the data is being loaded. Note that this\nparameter is not used when loading data by server-side processing, just\nAjax sourced data with client-side processing.",
            "line": " workspace\\templates\\datatables.js:11595"
        },
        {
            "message": "Missing item type\nText which is displayed when the table is processing a user action\n(usually a sort command or similar).",
            "line": " workspace\\templates\\datatables.js:11619"
        },
        {
            "message": "Missing item type\nDetails the actions that will be taken when the user types into the\nfiltering input text box. The variable \"_INPUT_\", if used in the string,\nis replaced with the HTML text box for the filtering input allowing\ncontrol over where it appears in the string. If \"_INPUT_\" is not given\nthen the input box is appended to the string automatically.",
            "line": " workspace\\templates\\datatables.js:11640"
        },
        {
            "message": "Missing item type\nAssign a `placeholder` attribute to the search `input` element",
            "line": " workspace\\templates\\datatables.js:11675"
        },
        {
            "message": "Missing item type\nAll of the language information can be stored in a file on the\nserver-side, which DataTables will look up if this parameter is passed.\nIt must store the URL of the language file, which is in a JSON format,\nand the object has the same properties as the oLanguage object in the\ninitialiser object (i.e. the above parameters). Please refer to one of\nthe example language files to see how this works in action.",
            "line": " workspace\\templates\\datatables.js:11686"
        },
        {
            "message": "Missing item type\nText shown inside the table records when the is no information to be\ndisplayed after filtering. `emptyTable` is shown when there is simply no\ninformation in the table at all (regardless of filtering).",
            "line": " workspace\\templates\\datatables.js:11711"
        },
        {
            "message": "Missing item type\nThis parameter allows you to have define the global filtering state at\ninitialisation time. As an object the `search` parameter must be\ndefined, but all other parameters are optional. When `regex` is true,\nthe search string will be treated as a regular expression, when false\n(default) it will be treated as a straight string. When `smart`\nDataTables will use it's smart filtering methods (to word match at\nany point in the data), when false this will not be done.",
            "line": " workspace\\templates\\datatables.js:11734"
        },
        {
            "message": "Missing item type\n__Deprecated__ The functionality provided by this parameter has now been\nsuperseded by that provided through `ajax`, which should be used instead.\n\nBy default DataTables will look for the property `data` (or `aaData` for\ncompatibility with DataTables 1.9-) when obtaining data from an Ajax\nsource or for server-side processing - this parameter allows that\nproperty to be changed. You can use Javascript dotted object notation to\nget a data source for multiple levels of nesting.",
            "line": " workspace\\templates\\datatables.js:11758"
        },
        {
            "message": "Missing item type\n__Deprecated__ The functionality provided by this parameter has now been\nsuperseded by that provided through `ajax`, which should be used instead.\n\nYou can instruct DataTables to load data from an external\nsource using this parameter (use aData if you want to pass data in you\nalready have). Simply provide a url a JSON object can be obtained from.",
            "line": " workspace\\templates\\datatables.js:11779"
        },
        {
            "message": "Missing item type\nThis initialisation variable allows you to specify exactly where in the\nDOM you want DataTables to inject the various controls it adds to the page\n(for example you might want the pagination controls at the top of the\ntable). DIV elements (with or without a custom class) can also be added to\naid styling. The follow syntax is used:\n  <ul>\n    <li>The following options are allowed:\n      <ul>\n        <li>'l' - Length changing</li>\n        <li>'f' - Filtering input</li>\n        <li>'t' - The table!</li>\n        <li>'i' - Information</li>\n        <li>'p' - Pagination</li>\n        <li>'r' - pRocessing</li>\n      </ul>\n    </li>\n    <li>The following constants are allowed:\n      <ul>\n        <li>'H' - jQueryUI theme \"header\" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>\n        <li>'F' - jQueryUI theme \"footer\" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>\n      </ul>\n    </li>\n    <li>The following syntax is expected:\n      <ul>\n        <li>'&lt;' and '&gt;' - div elements</li>\n        <li>'&lt;\"class\" and '&gt;' - div with a class</li>\n        <li>'&lt;\"#id\" and '&gt;' - div with an ID</li>\n      </ul>\n    </li>\n    <li>Examples:\n      <ul>\n        <li>'&lt;\"wrapper\"flipt&gt;'</li>\n        <li>'&lt;lf&lt;t&gt;ip&gt;'</li>\n      </ul>\n    </li>\n  </ul>",
            "line": " workspace\\templates\\datatables.js:11798"
        },
        {
            "message": "Missing item type\nSearch delay option. This will throttle full table searches that use the\nDataTables provided search input element (it does not effect calls to\n`dt-api search()`, providing a delay before the search is made.",
            "line": " workspace\\templates\\datatables.js:11852"
        },
        {
            "message": "Missing item type\nDataTables features six different built-in options for the buttons to\ndisplay for pagination control:\n\n* `numbers` - Page number buttons only\n* `simple` - 'Previous' and 'Next' buttons only\n* 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers\n* `full` - 'First', 'Previous', 'Next' and 'Last' buttons\n* `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers\n* `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers\n \nFurther methods can be added using {@link DataTable.ext.oPagination}.",
            "line": " workspace\\templates\\datatables.js:11872"
        },
        {
            "message": "Missing item type\nEnable horizontal scrolling. When a table is too wide to fit into a\ncertain layout, or you have a large number of columns in the table, you\ncan enable x-scrolling to show the table in a viewport, which can be\nscrolled. This property can be `true` which will allow the table to\nscroll horizontally when needed, or any CSS unit, or a number (in which\ncase it will be treated as a pixel measurement). Setting as simply `true`\nis recommended.",
            "line": " workspace\\templates\\datatables.js:11900"
        },
        {
            "message": "Missing item type\nThis property can be used to force a DataTable to use more width than it\nmight otherwise do when x-scrolling is enabled. For example if you have a\ntable which requires to be well spaced, this parameter is useful for\n\"over-sizing\" the table, and thus forcing scrolling. This property can by\nany CSS unit, or a number (in which case it will be treated as a pixel\nmeasurement).",
            "line": " workspace\\templates\\datatables.js:11925"
        },
        {
            "message": "Missing item type\nEnable vertical scrolling. Vertical scrolling will constrain the DataTable\nto the given height, and enable scrolling for any data which overflows the\ncurrent viewport. This can be used as an alternative to paging to display\na lot of data in a small area (although paging and scrolling can both be\nenabled at the same time). This property can be any CSS unit, or a number\n(in which case it will be treated as a pixel measurement).",
            "line": " workspace\\templates\\datatables.js:11949"
        },
        {
            "message": "Missing item type\n__Deprecated__ The functionality provided by this parameter has now been\nsuperseded by that provided through `ajax`, which should be used instead.\n\nSet the HTTP method that is used to make the Ajax call for server-side\nprocessing or Ajax sourced data.",
            "line": " workspace\\templates\\datatables.js:11973"
        },
        {
            "message": "Missing item type\nDataTables makes use of renderers when displaying HTML elements for\na table. These renderers can be added or modified by plug-ins to\ngenerate suitable mark-up for a site. For example the Bootstrap\nintegration plug-in for DataTables uses a paging button renderer to\ndisplay pagination buttons in the mark-up required by Bootstrap.\n\nFor further information about the renderers available see\nDataTable.ext.renderer",
            "line": " workspace\\templates\\datatables.js:11991"
        },
        {
            "message": "Missing item type\nSet the data property name that DataTables should use to get a row's id\nto set as the `id` property in the node.",
            "line": " workspace\\templates\\datatables.js:12009"
        },
        {
            "message": "Missing item type\nColumn options that can be given to DataTables at initialisation time.",
            "line": " workspace\\templates\\datatables.js:12029"
        },
        {
            "message": "Missing item type\nDefine which column(s) an order will occur on for this column. This\nallows a column's ordering to take multiple columns into account when\ndoing a sort or use the data from a different column. For example first\nname / last name columns make sense to do a multi-column sort over the\ntwo columns.",
            "line": " workspace\\templates\\datatables.js:12034"
        },
        {
            "message": "Missing item type\nYou can control the default ordering direction, and even alter the\nbehaviour of the sort handler (i.e. only allow ascending ordering etc)\nusing this parameter.",
            "line": " workspace\\templates\\datatables.js:12076"
        },
        {
            "message": "Missing item type\nEnable or disable filtering on the data in this column.",
            "line": " workspace\\templates\\datatables.js:12115"
        },
        {
            "message": "Missing item type\nEnable or disable ordering on this column.",
            "line": " workspace\\templates\\datatables.js:12148"
        },
        {
            "message": "Missing item type\nEnable or disable the display of this column.",
            "line": " workspace\\templates\\datatables.js:12181"
        },
        {
            "message": "Missing item type\nDeveloper definable function that is called whenever a cell is created (Ajax source,\netc) or processed for input (DOM source). This can be used as a compliment to mRender\nallowing you to modify the DOM element (add background colour for example) when the\nelement is available.",
            "line": " workspace\\templates\\datatables.js:12214"
        },
        {
            "message": "Missing item type\nThis parameter has been replaced by `data` in DataTables to ensure naming\nconsistency. `dataProp` can still be used, as there is backwards\ncompatibility in DataTables for this option, but it is strongly\nrecommended that you use `data` in preference to `dataProp`.",
            "line": " workspace\\templates\\datatables.js:12246"
        },
        {
            "message": "Missing item type\nThis property can be used to read data from any data source property,\nincluding deeply nested objects / properties. `data` can be given in a\nnumber of different ways which effect its behaviour:\n\n* `integer` - treated as an array index for the data source. This is the\n  default that DataTables uses (incrementally increased for each column).\n* `string` - read an object property from the data source. There are\n  three 'special' options that can be used in the string to alter how\n  DataTables reads the data from the source object:\n   * `.` - Dotted Javascript notation. Just as you use a `.` in\n     Javascript to read from nested objects, so to can the options\n     specified in `data`. For example: `browser.version` or\n     `browser.name`. If your object parameter name contains a period, use\n     `\\\\` to escape it - i.e. `first\\\\.name`.\n   * `[]` - Array notation. DataTables can automatically combine data\n     from and array source, joining the data with the characters provided\n     between the two brackets. For example: `name[, ]` would provide a\n     comma-space separated list from the source array. If no characters\n     are provided between the brackets, the original array source is\n     returned.\n   * `()` - Function notation. Adding `()` to the end of a parameter will\n     execute a function of the name given. For example: `browser()` for a\n     simple function on the data source, `browser.version()` for a\n     function in a nested property or even `browser().version` to get an\n     object property if the function called returns an object. Note that\n     function notation is recommended for use in `render` rather than\n     `data` as it is much simpler to use as a renderer.\n* `null` - use the original data source for the row rather than plucking\n  data directly from it. This action has effects on two other\n  initialisation options:\n   * `defaultContent` - When null is given as the `data` option and\n     `defaultContent` is specified for the column, the value defined by\n     `defaultContent` will be used for the cell.\n   * `render` - When null is used for the `data` option and the `render`\n     option is specified for the column, the whole data source for the\n     row is used for the renderer.\n* `function` - the function given will be executed whenever DataTables\n  needs to set or get the data for a cell in the column. The function\n  takes three parameters:\n   * Parameters:\n     * `{array|object}` The data source for the row\n     * `{string}` The type call data requested - this will be 'set' when\n       setting data or 'filter', 'display', 'type', 'sort' or undefined\n       when gathering data. Note that when `undefined` is given for the\n       type DataTables expects to get the raw data for the object back<\n     * `{*}` Data to set when the second parameter is 'set'.\n   * Return:\n     * The return value from the function is not required when 'set' is\n       the type of call, but otherwise the return is what will be used\n       for the data requested.\n\nNote that `data` is a getter and setter option. If you just require\nformatting of data for output, you will likely want to use `render` which\nis simply a getter and thus simpler to use.\n\nNote that prior to DataTables 1.9.2 `data` was called `mDataProp`. The\nname change reflects the flexibility of this property and is consistent\nwith the naming of mRender. If 'mDataProp' is given, then it will still\nbe used by DataTables, as it automatically maps the old name to the new\nif required.",
            "line": " workspace\\templates\\datatables.js:12255"
        },
        {
            "message": "Missing item type\nThis property is the rendering partner to `data` and it is suggested that\nwhen you want to manipulate data for display (including filtering,\nsorting etc) without altering the underlying data for the table, use this\nproperty. `render` can be considered to be the the read only companion to\n`data` which is read / write (then as such more complex). Like `data`\nthis option can be given in a number of different ways to effect its\nbehaviour:\n\n* `integer` - treated as an array index for the data source. This is the\n  default that DataTables uses (incrementally increased for each column).\n* `string` - read an object property from the data source. There are\n  three 'special' options that can be used in the string to alter how\n  DataTables reads the data from the source object:\n   * `.` - Dotted Javascript notation. Just as you use a `.` in\n     Javascript to read from nested objects, so to can the options\n     specified in `data`. For example: `browser.version` or\n     `browser.name`. If your object parameter name contains a period, use\n     `\\\\` to escape it - i.e. `first\\\\.name`.\n   * `[]` - Array notation. DataTables can automatically combine data\n     from and array source, joining the data with the characters provided\n     between the two brackets. For example: `name[, ]` would provide a\n     comma-space separated list from the source array. If no characters\n     are provided between the brackets, the original array source is\n     returned.\n   * `()` - Function notation. Adding `()` to the end of a parameter will\n     execute a function of the name given. For example: `browser()` for a\n     simple function on the data source, `browser.version()` for a\n     function in a nested property or even `browser().version` to get an\n     object property if the function called returns an object.\n* `object` - use different data for the different data types requested by\n  DataTables ('filter', 'display', 'type' or 'sort'). The property names\n  of the object is the data type the property refers to and the value can\n  defined using an integer, string or function using the same rules as\n  `render` normally does. Note that an `_` option _must_ be specified.\n  This is the default value to use if you haven't specified a value for\n  the data type requested by DataTables.\n* `function` - the function given will be executed whenever DataTables\n  needs to set or get the data for a cell in the column. The function\n  takes three parameters:\n   * Parameters:\n     * {array|object} The data source for the row (based on `data`)\n     * {string} The type call data requested - this will be 'filter',\n       'display', 'type' or 'sort'.\n     * {array|object} The full data source for the row (not based on\n       `data`)\n   * Return:\n     * The return value from the function is what will be used for the\n       data requested.",
            "line": " workspace\\templates\\datatables.js:12427"
        },
        {
            "message": "Missing item type\nChange the cell type created for the column - either TD cells or TH cells. This\ncan be useful as TH cells have semantic meaning in the table body, allowing them\nto act as a header for a row (you may wish to add scope='row' to the TH elements).",
            "line": " workspace\\templates\\datatables.js:12549"
        },
        {
            "message": "Missing item type\nClass to give to each cell in this column.",
            "line": " workspace\\templates\\datatables.js:12573"
        },
        {
            "message": "Missing item type\nWhen DataTables calculates the column widths to assign to each column,\nit finds the longest string in each column and then constructs a\ntemporary table and reads the widths from that. The problem with this\nis that \"mmm\" is much wider then \"iiii\", but the latter is a longer\nstring - thus the calculation can go wrong (doing it properly and putting\nit into an DOM object and measuring that is horribly(!) slow). Thus as\na \"work around\" we provide this option. It will append its value to the\ntext that is found to be the longest string for the column - i.e. padding.\nGenerally you shouldn't need this!",
            "line": " workspace\\templates\\datatables.js:12607"
        },
        {
            "message": "Missing item type\nAllows a default value to be given for a column's data, and will be used\nwhenever a null data source is encountered (this can be because `data`\nis set to null, or because the data source itself is null).",
            "line": " workspace\\templates\\datatables.js:12641"
        },
        {
            "message": "Missing item type\nThis parameter is only used in DataTables' server-side processing. It can\nbe exceptionally useful to know what columns are being displayed on the\nclient side, and to map these to database fields. When defined, the names\nalso allow DataTables to reorder information from the server if it comes\nback in an unexpected order (i.e. if you switch your columns around on the\nclient-side, your server-side code does not also need updating).",
            "line": " workspace\\templates\\datatables.js:12684"
        },
        {
            "message": "Missing item type\nDefines a data source type for the ordering which can be used to read\nreal-time information from the table (updating the internally cached\nversion) prior to ordering. This allows ordering to occur on user\neditable elements such as form inputs.",
            "line": " workspace\\templates\\datatables.js:12728"
        },
        {
            "message": "Missing item type\nThe title of this column.",
            "line": " workspace\\templates\\datatables.js:12770"
        },
        {
            "message": "Missing item type\nThe type allows you to specify how the data for this column will be\nordered. Four types (string, numeric, date and html (which will strip\nHTML tags before ordering)) are currently available. Note that only date\nformats understood by Javascript's Date() object will be accepted as type\ndate. For example: \"Mar 26, 2008 5:03 PM\". May take the values: 'string',\n'numeric', 'date' or 'html' (by default). Further types can be adding\nthrough plug-ins.",
            "line": " workspace\\templates\\datatables.js:12806"
        },
        {
            "message": "Missing item type\nDefining the width of the column, this parameter may take any CSS value\n(3em, 20px etc). DataTables applies 'smart' widths to columns which have not\nbeen given a specific width through this interface ensuring that the table\nremains readable.",
            "line": " workspace\\templates\\datatables.js:12847"
        },
        {
            "message": "Missing item type\nDataTables settings object - this holds all the information needed for a\ngiven table, including configuration, data and current application of the\ntable options. DataTables does not have a single instance for each DataTable\nwith the settings attached to that instance, but rather instances of the\nDataTable \"class\" are created on-the-fly as needed (typically by a\n$().dataTable() call) and the settings object is then applied to that\ninstance.\n\nNote that this object is related to {@link DataTable.defaults} but this\none is the internal data store for DataTables's cache of columns. It should\nNOT be manipulated outside of DataTables. Any configuration should be done\nthrough the initialisation options.",
            "line": " workspace\\templates\\datatables.js:12889"
        },
        {
            "message": "Missing item type\nPrimary features of DataTables and their enablement state.",
            "line": " workspace\\templates\\datatables.js:12912"
        },
        {
            "message": "Missing item type\nFlag to say if DataTables should automatically try to calculate the\noptimum table and columns widths (true) or not (false).\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:12918"
        },
        {
            "message": "Missing item type\nDelay the creation of TR and TD elements until they are actually\nneeded by a driven page draw. This can give a significant speed\nincrease for Ajax source and Javascript source data, but makes no\ndifference at all fro DOM and server-side processing tables.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:12927"
        },
        {
            "message": "Missing item type\nEnable filtering on the table or not. Note that if this is disabled\nthen there is no filtering at all on the table, including fnFilter.\nTo just remove the filtering input use sDom and remove the 'f' option.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:12938"
        },
        {
            "message": "Missing item type\nTable information element (the 'Showing x of y records' div) enable\nflag.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:12948"
        },
        {
            "message": "Missing item type\nPresent a user control allowing the end user to change the page size\nwhen pagination is enabled.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:12957"
        },
        {
            "message": "Missing item type\nPagination enabled or not. Note that if this is disabled then length\nchanging must also be disabled.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:12966"
        },
        {
            "message": "Missing item type\nProcessing indicator enable flag whenever DataTables is enacting a\nuser request - typically an Ajax request for server-side processing.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:12975"
        },
        {
            "message": "Missing item type\nServer-side processing enabled flag - when enabled DataTables will\nget all data from the server for every draw - there is no filtering,\nsorting or paging done on the client-side.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:12984"
        },
        {
            "message": "Missing item type\nSorting enablement flag.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:12994"
        },
        {
            "message": "Missing item type\nMulti-column sorting\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:13002"
        },
        {
            "message": "Missing item type\nApply a class to the columns which are being sorted to provide a\nvisual highlight or not. This can slow things down when enabled since\nthere is a lot of DOM interaction.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:13010"
        },
        {
            "message": "Missing item type\nState saving enablement flag.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:13020"
        },
        {
            "message": "Missing item type\nScrolling settings for a table.",
            "line": " workspace\\templates\\datatables.js:13030"
        },
        {
            "message": "Missing item type\nWhen the table is shorter in height than sScrollY, collapse the\ntable container down to the height of the table (when true).\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:13035"
        },
        {
            "message": "Missing item type\nWidth of the scrollbar for the web-browser's platform. Calculated\nduring table initialisation.",
            "line": " workspace\\templates\\datatables.js:13044"
        },
        {
            "message": "Missing item type\nViewport width for horizontal scrolling. Horizontal scrolling is\ndisabled if an empty string.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:13052"
        },
        {
            "message": "Missing item type\nWidth to expand the table to when using x-scrolling. Typically you\nshould not need to use this.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:13061"
        },
        {
            "message": "Missing item type\nViewport height for vertical scrolling. Vertical scrolling is disabled\nif an empty string.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:13071"
        },
        {
            "message": "Missing item type\nLanguage information for the table.",
            "line": " workspace\\templates\\datatables.js:13081"
        },
        {
            "message": "Missing item type\nInformation callback function. See\n{@link DataTable.defaults.fnInfoCallback}",
            "line": " workspace\\templates\\datatables.js:13087"
        },
        {
            "message": "Missing item type\nBrowser support parameters",
            "line": " workspace\\templates\\datatables.js:13096"
        },
        {
            "message": "Missing item type\nIndicate if the browser incorrectly calculates width:100% inside a\nscrolling element (IE6/7)",
            "line": " workspace\\templates\\datatables.js:13101"
        },
        {
            "message": "Missing item type\nDetermine if the vertical scrollbar is on the right or left of the\nscrolling container - needed for rtl language layout, although not\nall browsers move the scrollbar (Safari).",
            "line": " workspace\\templates\\datatables.js:13109"
        },
        {
            "message": "Missing item type\nFlag for if `getBoundingClientRect` is fully supported or not",
            "line": " workspace\\templates\\datatables.js:13118"
        },
        {
            "message": "Missing item type\nBrowser scrollbar width",
            "line": " workspace\\templates\\datatables.js:13125"
        },
        {
            "message": "Missing item type\nArray referencing the nodes which are used for the features. The\nparameters of this object match what is allowed by sDom - i.e.\n  <ul>\n    <li>'l' - Length changing</li>\n    <li>'f' - Filtering input</li>\n    <li>'t' - The table!</li>\n    <li>'i' - Information</li>\n    <li>'p' - Pagination</li>\n    <li>'r' - pRocessing</li>\n  </ul>",
            "line": " workspace\\templates\\datatables.js:13137"
        },
        {
            "message": "Missing item type\nStore data information - see {@link DataTable.models.oRow} for detailed\ninformation.",
            "line": " workspace\\templates\\datatables.js:13153"
        },
        {
            "message": "Missing item type\nArray of indexes which are in the current display (after filtering etc)",
            "line": " workspace\\templates\\datatables.js:13161"
        },
        {
            "message": "Missing item type\nArray of indexes for display - no filtering",
            "line": " workspace\\templates\\datatables.js:13168"
        },
        {
            "message": "Missing item type\nMap of row ids to data indexes",
            "line": " workspace\\templates\\datatables.js:13175"
        },
        {
            "message": "Missing item type\nStore information about each column that is in use",
            "line": " workspace\\templates\\datatables.js:13182"
        },
        {
            "message": "Missing item type\nStore information about the table's header",
            "line": " workspace\\templates\\datatables.js:13189"
        },
        {
            "message": "Missing item type\nStore information about the table's footer",
            "line": " workspace\\templates\\datatables.js:13196"
        },
        {
            "message": "Missing item type\nStore the applied global search information in case we want to force a\nresearch or compare the old search to a new one.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:13203"
        },
        {
            "message": "Missing item type\nStore the applied search for each column - see\n{@link DataTable.models.oSearch} for the format that is used for the\nfiltering information for each column.",
            "line": " workspace\\templates\\datatables.js:13213"
        },
        {
            "message": "Missing item type\nSorting that is applied to the table. Note that the inner arrays are\nused in the following manner:\n<ul>\n  <li>Index 0 - column number</li>\n  <li>Index 1 - current sorting direction</li>\n</ul>\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:13222"
        },
        {
            "message": "Missing item type\nSorting that is always applied to the table (i.e. prefixed in front of\naaSorting).\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:13236"
        },
        {
            "message": "Missing item type\nClasses to use for the striping of a table.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:13246"
        },
        {
            "message": "Missing item type\nIf restoring a table - we should restore its striping classes as well",
            "line": " workspace\\templates\\datatables.js:13255"
        },
        {
            "message": "Missing item type\nIf restoring a table - we should restore its width",
            "line": " workspace\\templates\\datatables.js:13262"
        },
        {
            "message": "Missing item type\nCallback functions array for every time a row is inserted (i.e. on a draw).",
            "line": " workspace\\templates\\datatables.js:13269"
        },
        {
            "message": "Missing item type\nCallback functions for the header on each draw.",
            "line": " workspace\\templates\\datatables.js:13276"
        },
        {
            "message": "Missing item type\nCallback function for the footer on each draw.",
            "line": " workspace\\templates\\datatables.js:13283"
        },
        {
            "message": "Missing item type\nArray of callback functions for draw callback functions",
            "line": " workspace\\templates\\datatables.js:13290"
        },
        {
            "message": "Missing item type\nArray of callback functions for row created function",
            "line": " workspace\\templates\\datatables.js:13297"
        },
        {
            "message": "Missing item type\nCallback functions for just before the table is redrawn. A return of\nfalse will be used to cancel the draw.",
            "line": " workspace\\templates\\datatables.js:13304"
        },
        {
            "message": "Missing item type\nCallback functions for when the table has been initialised.",
            "line": " workspace\\templates\\datatables.js:13312"
        },
        {
            "message": "Missing item type\nCallbacks for modifying the settings to be stored for state saving, prior to\nsaving state.",
            "line": " workspace\\templates\\datatables.js:13320"
        },
        {
            "message": "Missing item type\nCallbacks for modifying the settings that have been stored for state saving\nprior to using the stored values to restore the state.",
            "line": " workspace\\templates\\datatables.js:13328"
        },
        {
            "message": "Missing item type\nCallbacks for operating on the settings object once the saved state has been\nloaded",
            "line": " workspace\\templates\\datatables.js:13336"
        },
        {
            "message": "Missing item type\nCache the table ID for quick access",
            "line": " workspace\\templates\\datatables.js:13344"
        },
        {
            "message": "Missing item type\nThe TABLE node for the main table",
            "line": " workspace\\templates\\datatables.js:13351"
        },
        {
            "message": "Missing item type\nPermanent ref to the thead element",
            "line": " workspace\\templates\\datatables.js:13358"
        },
        {
            "message": "Missing item type\nPermanent ref to the tfoot element - if it exists",
            "line": " workspace\\templates\\datatables.js:13365"
        },
        {
            "message": "Missing item type\nPermanent ref to the tbody element",
            "line": " workspace\\templates\\datatables.js:13372"
        },
        {
            "message": "Missing item type\nCache the wrapper node (contains all DataTables controlled elements)",
            "line": " workspace\\templates\\datatables.js:13379"
        },
        {
            "message": "Missing item type\nIndicate if when using server-side processing the loading of data\nshould be deferred until the second draw.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:13386"
        },
        {
            "message": "Missing item type\nIndicate if all required information has been read in",
            "line": " workspace\\templates\\datatables.js:13396"
        },
        {
            "message": "Missing item type\nInformation about open rows. Each object in the array has the parameters\n'nTr' and 'nParent'",
            "line": " workspace\\templates\\datatables.js:13403"
        },
        {
            "message": "Missing item type\nDictate the positioning of DataTables' control elements - see\n{@link DataTable.model.oInit.sDom}.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:13411"
        },
        {
            "message": "Missing item type\nSearch delay (in mS)",
            "line": " workspace\\templates\\datatables.js:13421"
        },
        {
            "message": "Missing item type\nWhich type of pagination should be used.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:13428"
        },
        {
            "message": "Missing item type\nThe state duration (for `stateSave`) in seconds.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:13437"
        },
        {
            "message": "Missing item type\nArray of callback functions for state saving. Each array element is an\nobject with the following parameters:\n  <ul>\n    <li>function:fn - function to call. Takes two parameters, oSettings\n      and the JSON string to save that has been thus far created. Returns\n      a JSON string to be inserted into a json object\n      (i.e. '\"param\": [ 0, 1, 2]')</li>\n    <li>string:sName - name of callback</li>\n  </ul>",
            "line": " workspace\\templates\\datatables.js:13446"
        },
        {
            "message": "Missing item type\nArray of callback functions for state loading. Each array element is an\nobject with the following parameters:\n  <ul>\n    <li>function:fn - function to call. Takes two parameters, oSettings\n      and the object stored. May return false to cancel state loading</li>\n    <li>string:sName - name of callback</li>\n  </ul>",
            "line": " workspace\\templates\\datatables.js:13461"
        },
        {
            "message": "Missing item type\nState that was saved. Useful for back reference",
            "line": " workspace\\templates\\datatables.js:13474"
        },
        {
            "message": "Missing item type\nState that was loaded. Useful for back reference",
            "line": " workspace\\templates\\datatables.js:13481"
        },
        {
            "message": "Missing item type\nSource url for AJAX data for the table.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:13488"
        },
        {
            "message": "Missing item type\nProperty from a given object from which to read the table data from. This\ncan be an empty string (when not server-side processing), in which case\nit is  assumed an an array is given directly.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:13497"
        },
        {
            "message": "Missing item type\nNote if draw should be blocked while getting data",
            "line": " workspace\\templates\\datatables.js:13507"
        },
        {
            "message": "Missing item type\nThe last jQuery XHR object that was used for server-side data gathering.\nThis can be used for working with the XHR information in one of the\ncallbacks",
            "line": " workspace\\templates\\datatables.js:13514"
        },
        {
            "message": "Missing item type\nJSON returned from the server in the last Ajax request",
            "line": " workspace\\templates\\datatables.js:13523"
        },
        {
            "message": "Missing item type\nData submitted as part of the last Ajax request",
            "line": " workspace\\templates\\datatables.js:13530"
        },
        {
            "message": "Missing item type\nFunction to get the server-side data.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:13537"
        },
        {
            "message": "Missing item type\nFunctions which are called prior to sending an Ajax request so extra\nparameters can easily be sent to the server",
            "line": " workspace\\templates\\datatables.js:13545"
        },
        {
            "message": "Missing item type\nSend the XHR HTTP method - GET or POST (could be PUT or DELETE if\nrequired).\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:13553"
        },
        {
            "message": "Missing item type\nFormat numbers for display.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:13562"
        },
        {
            "message": "Missing item type\nList of options that can be used for the user selectable length menu.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:13570"
        },
        {
            "message": "Missing item type\nCounter for the draws that the table does. Also used as a tracker for\nserver-side processing",
            "line": " workspace\\templates\\datatables.js:13579"
        },
        {
            "message": "Missing item type\nIndicate if a redraw is being done - useful for Ajax",
            "line": " workspace\\templates\\datatables.js:13587"
        },
        {
            "message": "Missing item type\nDraw index (iDraw) of the last error when parsing the returned data",
            "line": " workspace\\templates\\datatables.js:13594"
        },
        {
            "message": "Missing item type\nPaging display length",
            "line": " workspace\\templates\\datatables.js:13601"
        },
        {
            "message": "Missing item type\nPaging start point - aiDisplay index",
            "line": " workspace\\templates\\datatables.js:13608"
        },
        {
            "message": "Missing item type\nServer-side processing - number of records in the result set\n(i.e. before filtering), Use fnRecordsTotal rather than\nthis property to get the value of the number of records, regardless of\nthe server-side processing setting.",
            "line": " workspace\\templates\\datatables.js:13615"
        },
        {
            "message": "Missing item type\nServer-side processing - number of records in the current display set\n(i.e. after filtering). Use fnRecordsDisplay rather than\nthis property to get the value of the number of records, regardless of\nthe server-side processing setting.",
            "line": " workspace\\templates\\datatables.js:13626"
        },
        {
            "message": "Missing item type\nThe classes to use for the table",
            "line": " workspace\\templates\\datatables.js:13637"
        },
        {
            "message": "Missing item type\nFlag attached to the settings object so you can check in the draw\ncallback if filtering has been done in the draw. Deprecated in favour of\nevents.",
            "line": " workspace\\templates\\datatables.js:13644"
        },
        {
            "message": "Missing item type\nFlag attached to the settings object so you can check in the draw\ncallback if sorting has been done in the draw. Deprecated in favour of\nevents.",
            "line": " workspace\\templates\\datatables.js:13654"
        },
        {
            "message": "Missing item type\nIndicate that if multiple rows are in the header and there is more than\none unique cell per column, if the top one (true) or bottom one (false)\nshould be used for sorting / title by DataTables.\nNote that this parameter will be set by the initialisation routine. To\nset a default use {@link DataTable.defaults}.",
            "line": " workspace\\templates\\datatables.js:13664"
        },
        {
            "message": "Missing item type\nInitialisation object that is used for the table",
            "line": " workspace\\templates\\datatables.js:13674"
        },
        {
            "message": "Missing item type\nDestroy callback functions - for plug-ins to attach themselves to the\ndestroy so they can clean up markup and events.",
            "line": " workspace\\templates\\datatables.js:13681"
        },
        {
            "message": "Missing item type\nGet the number of records in the current record set, before filtering",
            "line": " workspace\\templates\\datatables.js:13690"
        },
        {
            "message": "Missing item type\nGet the number of records in the current record set, after filtering",
            "line": " workspace\\templates\\datatables.js:13701"
        },
        {
            "message": "Missing item type\nGet the display end point - aiDisplay index",
            "line": " workspace\\templates\\datatables.js:13712"
        },
        {
            "message": "Missing item type\nThe DataTables object for this table",
            "line": " workspace\\templates\\datatables.js:13738"
        },
        {
            "message": "Missing item type\nUnique identifier for each instance of the DataTables object. If there\nis an ID on the table node, then it takes that value, otherwise an\nincrementing internal counter is used.",
            "line": " workspace\\templates\\datatables.js:13745"
        },
        {
            "message": "Missing item type\ntabindex attribute value that is added to DataTables control elements, allowing\nkeyboard navigation of the table and its controls.",
            "line": " workspace\\templates\\datatables.js:13754"
        },
        {
            "message": "Missing item type\nDIV container for the footer scrolling table if scrolling",
            "line": " workspace\\templates\\datatables.js:13760"
        },
        {
            "message": "Missing item type\nDIV container for the footer scrolling table if scrolling",
            "line": " workspace\\templates\\datatables.js:13765"
        },
        {
            "message": "Missing item type\nLast applied sort",
            "line": " workspace\\templates\\datatables.js:13770"
        },
        {
            "message": "Missing item type\nStored plug-in instances",
            "line": " workspace\\templates\\datatables.js:13777"
        },
        {
            "message": "Missing item type\nFunction used to get a row's id from the row's data",
            "line": " workspace\\templates\\datatables.js:13784"
        },
        {
            "message": "Missing item type\nData location where to store a row's id",
            "line": " workspace\\templates\\datatables.js:13791"
        },
        {
            "message": "Missing item type\nExtension object for DataTables that is used to provide all extension\noptions.\n\nNote that the `DataTable.ext` object is available through\n`jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is\nalso aliased to `jQuery.fn.dataTableExt` for historic reasons.",
            "line": " workspace\\templates\\datatables.js:13799"
        },
        {
            "message": "Missing item type\nDataTables extensions\n\nThis namespace acts as a collection area for plug-ins that can be used to\nextend DataTables capabilities. Indeed many of the build in methods\nuse this method to provide their own capabilities (sorting methods for\nexample).\n\nNote that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy\nreasons",
            "line": " workspace\\templates\\datatables.js:13811"
        },
        {
            "message": "Missing item type\nButtons. For use with the Buttons extension for DataTables. This is\ndefined here so other extensions can define buttons regardless of load\norder. It is _not_ used by DataTables core.",
            "line": " workspace\\templates\\datatables.js:13825"
        },
        {
            "message": "Missing item type\nElement class names",
            "line": " workspace\\templates\\datatables.js:13836"
        },
        {
            "message": "Missing item type\nDataTables build type (expanded by the download builder)",
            "line": " workspace\\templates\\datatables.js:13845"
        },
        {
            "message": "Missing item type\nError reporting.\n\nHow should DataTables report an error. Can take the value 'alert',\n'throw', 'none' or a function.",
            "line": " workspace\\templates\\datatables.js:13853"
        },
        {
            "message": "Missing item type\nFeature plug-ins.\n\nThis is an array of objects which describe the feature plug-ins that are\navailable to DataTables. These feature plug-ins are then available for\nuse through the `dom` initialisation option.\n\nEach feature plug-in is described by an object which must have the\nfollowing properties:\n\n* `fnInit` - function that is used to initialise the plug-in,\n* `cFeature` - a character so the feature can be enabled by the `dom`\n  instillation option. This is case sensitive.\n\nThe `fnInit` function has the following input parameters:\n\n1. `{object}` DataTables settings object: see\n   {@link DataTable.models.oSettings}\n\nAnd the following return is expected:\n\n* {node|null} The element which contains your feature. Note that the\n  return may also be void if your plug-in does not require to inject any\n  DOM elements into DataTables control (`dom`) - for example this might\n  be useful when developing a plug-in which allows table control via\n  keyboard entry",
            "line": " workspace\\templates\\datatables.js:13865"
        },
        {
            "message": "Missing item type\nRow searching.\n\nThis method of searching is complimentary to the default type based\nsearching, and a lot more comprehensive as it allows you complete control\nover the searching logic. Each element in this array is a function\n(parameters described below) that is called for every row in the table,\nand your logic decides if it should be included in the searching data set\nor not.\n\nSearching functions have the following input parameters:\n\n1. `{object}` DataTables settings object: see\n   {@link DataTable.models.oSettings}\n2. `{array|object}` Data for the row to be processed (same as the\n   original format that was passed in as the data source, or an array\n   from a DOM data source\n3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which\n   can be useful to retrieve the `TR` element if you need DOM interaction.\n\nAnd the following return is expected:\n\n* {boolean} Include the row in the searched result set (true) or not\n  (false)\n\nNote that as with the main search ability in DataTables, technically this\nis \"filtering\", since it is subtractive. However, for consistency in\nnaming we call it searching here.",
            "line": " workspace\\templates\\datatables.js:13905"
        },
        {
            "message": "Missing item type\nSelector extensions\n\nThe `selector` option can be used to extend the options available for the\nselector modifier options (`selector-modifier` object data type) that\neach of the three built in selector types offer (row, column and cell +\ntheir plural counterparts). For example the Select extension uses this\nmechanism to provide an option to select only rows, columns and cells\nthat have been marked as selected by the end user (`{selected: true}`),\nwhich can be used in conjunction with the existing built in selector\noptions.\n\nEach property is an array to which functions can be pushed. The functions\ntake three attributes:\n\n* Settings object for the host table\n* Options object (`selector-modifier` object type)\n* Array of selected item indexes\n\nThe return is an array of the resulting item indexes after the custom\nselector has been applied.",
            "line": " workspace\\templates\\datatables.js:13966"
        },
        {
            "message": "Missing item type\nInternal functions, exposed for used in plug-ins.\n\nPlease note that you should not need to use the internal methods for\nanything other than a plug-in (and even then, try to avoid if possible).\nThe internal function may change between releases.",
            "line": " workspace\\templates\\datatables.js:13997"
        },
        {
            "message": "Missing item type\nLegacy configuration options. Enable and disable legacy options that\nare available in DataTables.",
            "line": " workspace\\templates\\datatables.js:14010"
        },
        {
            "message": "Missing item type\nEnable / disable DataTables 1.9 compatible server-side processing\nrequests",
            "line": " workspace\\templates\\datatables.js:14017"
        },
        {
            "message": "Missing item type\nPagination plug-in methods.\n\nEach entry in this object is a function and defines which buttons should\nbe shown by the pagination rendering method that is used for the table:\n{@link DataTable.ext.renderer.pageButton}. The renderer addresses how the\nbuttons are displayed in the document, while the functions here tell it\nwhat buttons to display. This is done by returning an array of button\ndescriptions (what each button will do).\n\nPagination types (the four built in options and any additional plug-in\noptions defined here) can be used through the `paginationType`\ninitialisation parameter.\n\nThe functions defined take two parameters:\n\n1. `{int} page` The current page index\n2. `{int} pages` The number of pages in the table\n\nEach function is expected to return an array where each element of the\narray can be one of:\n\n* `first` - Jump to first page when activated\n* `last` - Jump to last page when activated\n* `previous` - Show previous page when activated\n* `next` - Show next page when activated\n* `{int}` - Show page of the index given\n* `{array}` - A nested array containing the above elements to add a\n  containing 'DIV' element (might be useful for styling).\n\nNote that DataTables v1.9- used this object slightly differently whereby\nan object with two functions would be defined for each plug-in. That\nability is still supported by DataTables 1.10+ to provide backwards\ncompatibility, but this option of use is now decremented and no longer\ndocumented in DataTables 1.10+.",
            "line": " workspace\\templates\\datatables.js:14028"
        },
        {
            "message": "Missing item type\nOrdering plug-ins - custom data source\n\nThe extension options for ordering of data available here is complimentary\nto the default type based ordering that DataTables typically uses. It\nallows much greater control over the the data that is being used to\norder a column, but is necessarily therefore more complex.\n\nThis type of ordering is useful if you want to do ordering based on data\nlive from the DOM (for example the contents of an 'input' element) rather\nthan just the static string that DataTables knows of.\n\nThe way these plug-ins work is that you create an array of the values you\nwish to be ordering for the column in question and then return that\narray. The data in the array much be in the index order of the rows in\nthe table (not the currently ordering order!). Which order data gathering\nfunction is run here depends on the `dt-init columns.orderDataType`\nparameter that is used for the column (if any).\n\nThe functions defined take two parameters:\n\n1. `{object}` DataTables settings object: see\n   {@link DataTable.models.oSettings}\n2. `{int}` Target column index\n\nEach function is expected to return an array:\n\n* `{array}` Data for the column to be ordering upon",
            "line": " workspace\\templates\\datatables.js:14082"
        },
        {
            "message": "Missing item type\nType based plug-ins.\n\nEach column in DataTables has a type assigned to it, either by automatic\ndetection or by direct assignment using the `type` option for the column.\nThe type of a column will effect how it is ordering and search (plug-ins\ncan also make use of the column type if required).",
            "line": " workspace\\templates\\datatables.js:14125"
        },
        {
            "message": "Missing item type\nType detection functions.\n\nThe functions defined in this object are used to automatically detect\na column's type, making initialisation of DataTables super easy, even\nwhen complex data is in the table.\n\nThe functions defined take two parameters:\n\n 1. `{*}` Data from the column cell to be analysed\n 2. `{settings}` DataTables settings object. This can be used to\n    perform context specific type detection - for example detection\n    based on language settings such as using a comma for a decimal\n    place. Generally speaking the options from the settings will not\n    be required\n\nEach function is expected to return:\n\n* `{string|null}` Data type detected, or null if unknown (and thus\n  pass it on to the other type detection functions.",
            "line": " workspace\\templates\\datatables.js:14136"
        },
        {
            "message": "Missing item type\nType based search formatting.\n\nThe type based searching functions can be used to pre-format the\ndata to be search on. For example, it can be used to strip HTML\ntags or to de-format telephone numbers for numeric only searching.\n\nNote that is a search is not defined for a column of a given type,\nno search formatting will be performed.\n\nPre-processing of searching data plug-ins - When you assign the sType\nfor a column (or have it automatically detected for you by DataTables\nor a type detection plug-in), you will typically be using this for\ncustom sorting, but it can also be used to provide custom searching\nby allowing you to pre-processing the data and returning the data in\nthe format that should be searched upon. This is done by adding\nfunctions this object with a parameter name which matches the sType\nfor that target column. This is the corollary of <i>afnSortData</i>\nfor searching data.\n\nThe functions defined take a single parameter:\n\n 1. `{*}` Data from the column cell to be prepared for searching\n\nEach function is expected to return:\n\n* `{string|null}` Formatted string that will be used for the searching.",
            "line": " workspace\\templates\\datatables.js:14179"
        },
        {
            "message": "Missing item type\nType based ordering.\n\nThe column type tells DataTables what ordering to apply to the table\nwhen a column is sorted upon. The order for each type that is defined,\nis defined by the functions available in this object.\n\nEach ordering option can be described by three properties added to\nthis object:\n\n* `{type}-pre` - Pre-formatting function\n* `{type}-asc` - Ascending order function\n* `{type}-desc` - Descending order function\n\nAll three can be used together, only `{type}-pre` or only\n`{type}-asc` and `{type}-desc` together. It is generally recommended\nthat only `{type}-pre` is used, as this provides the optimal\nimplementation in terms of speed, although the others are provided\nfor compatibility with existing Javascript sort functions.\n\n`{type}-pre`: Functions defined take a single parameter:\n\n 1. `{*}` Data from the column cell to be prepared for ordering\n\nAnd return:\n\n* `{*}` Data to be sorted upon\n\n`{type}-asc` and `{type}-desc`: Functions are typical Javascript sort\nfunctions, taking two parameters:\n\n 1. `{*}` Data to compare to the second parameter\n 2. `{*}` Data to compare to the first parameter\n\nAnd returning:\n\n* `{*}` Ordering match: <0 if first parameter should be sorted lower\n  than the second parameter, ===0 if the two parameters are equal and\n  >0 if the first parameter should be sorted height than the second\n  parameter.",
            "line": " workspace\\templates\\datatables.js:14218"
        },
        {
            "message": "Missing item type\nUnique DataTables instance counter",
            "line": " workspace\\templates\\datatables.js:14285"
        },
        {
            "message": "Missing item type\nVersion check function.",
            "line": " workspace\\templates\\datatables.js:14301"
        },
        {
            "message": "Missing item type\nIndex for what 'this' index API functions should use",
            "line": " workspace\\templates\\datatables.js:14309"
        },
        {
            "message": "Missing item type\njQuery UI class container",
            "line": " workspace\\templates\\datatables.js:14317"
        },
        {
            "message": "Missing item type\nSoftware version",
            "line": " workspace\\templates\\datatables.js:14325"
        },
        {
            "message": "Missing item type\nHelpers for `columns.render`.\n\nThe options defined here can be used with the `columns.render` initialisation\noption to provide a display renderer. The following functions are defined:\n\n* `number` - Will format numeric data (defined by `columns.data`) for\n  display, retaining the original unformatted data for sorting and filtering.\n  It takes 5 parameters:\n  * `string` - Thousands grouping separator\n  * `string` - Decimal point indicator\n  * `integer` - Number of decimal points to show\n  * `string` (optional) - Prefix.\n  * `string` (optional) - Postfix (/suffix).\n* `text` - Escape HTML to help prevent XSS attacks. It has no optional\n  parameters.",
            "line": " workspace\\templates\\datatables.js:14874"
        },
        {
            "message": "Missing item type\nCreate a wrapper function for exporting an internal functions to an external API.",
            "line": " workspace\\templates\\datatables.js:14950"
        },
        {
            "message": "Missing item type\nReference to internal functions for use by plug-in developers. Note that\nthese methods are references to internal functions and are considered to be\nprivate. If you use these methods, be aware that they are liable to change\nbetween versions.",
            "line": " workspace\\templates\\datatables.js:14967"
        },
        {
            "message": "Missing item type\nThe dir_rendering function for the webpage",
            "line": " workspace\\templates\\dirConScript.js:203"
        },
        {
            "message": "Missing item type\nCreate key-value caches of limited size",
            "line": " workspace\\templates\\jquery.js:890"
        },
        {
            "message": "Missing item type\nMark a function for special use by Sizzle",
            "line": " workspace\\templates\\jquery.js:910"
        },
        {
            "message": "Missing item type\nSupport testing using an element",
            "line": " workspace\\templates\\jquery.js:919"
        },
        {
            "message": "Missing item type\nAdds the same handler for all of the specified attrs",
            "line": " workspace\\templates\\jquery.js:940"
        },
        {
            "message": "Missing item type\nChecks document order of two siblings",
            "line": " workspace\\templates\\jquery.js:954"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for input types",
            "line": " workspace\\templates\\jquery.js:982"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for buttons",
            "line": " workspace\\templates\\jquery.js:993"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for :enabled/:disabled",
            "line": " workspace\\templates\\jquery.js:1004"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for positionals",
            "line": " workspace\\templates\\jquery.js:1032"
        },
        {
            "message": "Missing item type\nChecks a node for validity as a Sizzle context",
            "line": " workspace\\templates\\jquery.js:1054"
        },
        {
            "message": "Missing item type\nDetects XML nodes",
            "line": " workspace\\templates\\jquery.js:1066"
        },
        {
            "message": "Missing item type\nSets document-related variables once based on the current document",
            "line": " workspace\\templates\\jquery.js:1078"
        },
        {
            "message": "Missing item type\nDocument sorting and removing duplicates",
            "line": " workspace\\templates\\jquery.js:1532"
        },
        {
            "message": "Missing item type\nUtility function for retrieving the text value of an array of DOM nodes",
            "line": " workspace\\templates\\jquery.js:1565"
        },
        {
            "message": "Missing item type\nA low-level selection function that works with Sizzle's compiled\n selector functions",
            "line": " workspace\\templates\\jquery.js:2594"
        },
        {
            "message": "Missing item type\nLoad a url into a page",
            "line": " workspace\\templates\\jquery.js:9606"
        },
        {
            "message": "Missing item type\nGets a window from an element",
            "line": " workspace\\templates\\jquery.js:9698"
        }
    ]
}