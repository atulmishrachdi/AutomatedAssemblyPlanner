{
    "project": {},
    "files": {
        "..\\src\\webVis\\dirConfirmScript.js": {
            "name": "..\\src\\webVis\\dirConfirmScript.js",
            "modules": {},
            "classes": {},
            "fors": {
                "directionConfirmGlobal": 1
            },
            "namespaces": {}
        },
        "..\\src\\webVis\\jquery.js": {
            "name": "..\\src\\webVis\\jquery.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "..\\src\\webVis\\jsstl.js": {
            "name": "..\\src\\webVis\\jsstl.js",
            "modules": {},
            "classes": {},
            "fors": {
                "renderGlobal": 1
            },
            "namespaces": {}
        },
        "..\\src\\webVis\\partRender.js": {
            "name": "..\\src\\webVis\\partRender.js",
            "modules": {},
            "classes": {},
            "fors": {
                "renderGlobal": 1
            },
            "namespaces": {}
        },
        "..\\src\\webVis\\partTableScript.js": {
            "name": "..\\src\\webVis\\partTableScript.js",
            "modules": {},
            "classes": {},
            "fors": {
                "partTableGlobal": 1
            },
            "namespaces": {}
        },
        "..\\src\\webVis\\renderScript.js": {
            "name": "..\\src\\webVis\\renderScript.js",
            "modules": {},
            "classes": {
                "renderGlobal": 1
            },
            "fors": {
                "renderGlobal": 1
            },
            "namespaces": {}
        },
        "..\\src\\webVis\\sigma.canvas.edges.curvedArrow.js": {
            "name": "..\\src\\webVis\\sigma.canvas.edges.curvedArrow.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "..\\src\\webVis\\treequence.js": {
            "name": "..\\src\\webVis\\treequence.js",
            "modules": {},
            "classes": {},
            "fors": {
                "renderGlobal": 1
            },
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "directionConfirmGlobal": {
            "name": "directionConfirmGlobal",
            "shortname": "directionConfirmGlobal",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": []
        },
        "renderGlobal": {
            "name": "renderGlobal",
            "shortname": "renderGlobal",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\src\\webVis\\renderScript.js",
            "line": 6,
            "description": "Class containing all the methods used in the 3d visual assembly",
            "static": 1
        },
        "partTableGlobal": {
            "name": "partTableGlobal",
            "shortname": "partTableGlobal",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": []
        }
    },
    "elements": {
        "inputState": {
            "name": "inputState",
            "attributes": [],
            "file": "..\\src\\webVis\\renderScript.js",
            "line": 120,
            "description": "Contains a representation of the last keyboard events reported by the \n web page for each given key that acts as input for manipulating the\n visulization: 'W','A','S','D','R','F', and the 'Space' key",
            "return": {
                "description": "",
                "type": "Void"
            }
        }
    },
    "classitems": [
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 122,
            "description": "Given an HTML element corresponding to a \"confirm\" button, moves the parent element\n to the confirmed section of the webpage",
            "itemtype": "method",
            "name": "confirmPair",
            "params": [
                {
                    "name": "theButton",
                    "description": "The confirm button of the element to be moved",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 143,
            "description": "Given an HTML element corresponding to a \"unconfirm\" button, moves the parent element\n to the unconfirmed section of the webpage",
            "itemtype": "method",
            "name": "deconfirmPair",
            "params": [
                {
                    "name": "theButton",
                    "description": "The unconfirm button of the element to be moved",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 164,
            "description": "Given an HTML element corresponding to a \"focus\" button, makes the corresponding pair\n of parts to be displayed",
            "itemtype": "method",
            "name": "changeCurrentPair",
            "params": [
                {
                    "name": "theButton",
                    "description": "The confirm button of the element to be moved",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 196,
            "description": "Given a jQuery object and a string, returns the first child of the given element with\n a tag equivalent to the given string.",
            "itemtype": "method",
            "name": "grab",
            "params": [
                {
                    "name": "theTree",
                    "description": "The jQuery object whose child is to be returned",
                    "type": "JQuery Object"
                },
                {
                    "name": "theMember",
                    "description": "The name of the tag being searched",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The first child with the given tag. If such a child does not \n exist, null is returned.",
                "type": "JQuery Object"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 226,
            "description": "The rendering function for the webpage",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 293,
            "description": "Accepts a string and outputs the string of all characters following the final '.' symbol\n in the string. This is used internally to extract file extensions from file names.",
            "itemtype": "method",
            "name": "grabExtension",
            "params": [
                {
                    "name": "theName",
                    "description": "The file name to be processed",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the extension in the given file name. If no extension is found, the \n 'undefined' value is returned.",
                "type": "String"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 314,
            "description": "Outputs through the console the list of FileReaders in theReaders which have \n not yet completed their loading",
            "itemtype": "method",
            "name": "whoIsLeft",
            "params": [
                {
                    "name": "theReaders",
                    "description": "The list of FileReaders to be checked",
                    "type": "FileReader Object List"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 343,
            "description": "Accepts a fileinput event, presumably from a file upload event listener, and assigns\n functions to each file reader listed in the event to be called upon the full loading\n of that given reader's files",
            "itemtype": "method",
            "name": "readMultipleFiles",
            "params": [
                {
                    "name": "evt",
                    "description": "A fileinput event, to be given by a fileinput event listener",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 413,
            "description": "Called internally upon every recieved fileload event. Checks if every file reader in the \n array \"fileReaders\" has fully read each of their files. If so, then the function converts\n all recieved stl files into threeJS models and executes \"renderParts\".",
            "itemtype": "method",
            "name": "loadParts",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 494,
            "description": "Accepts two strings, a and b, and a vector, vec, and outputs a\n constructed part pair object if the two strings correspond to two\n extant parts",
            "itemtype": "method",
            "name": "linkPair",
            "params": [
                {
                    "name": "a",
                    "description": "The first part name",
                    "type": "String"
                },
                {
                    "name": "b",
                    "description": "The second part name",
                    "type": "String"
                },
                {
                    "name": "vec",
                    "description": "The vector to be added to the pair",
                    "type": "Vector3"
                }
            ],
            "return": {
                "description": "The resulting pair object",
                "type": "Object"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 542,
            "description": "Links together the pairs of parts corresponding to the strings present in\n the namePairs array.",
            "itemtype": "method",
            "name": "linkParts",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 571,
            "description": "Populates the webpage with data stored int the global variable theSML",
            "itemtype": "method",
            "name": "parseData",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 699,
            "description": "Populates the webpage with graphical representations of the assembly pairs\n stored in the global variable assemblyPairs",
            "itemtype": "method",
            "name": "insertAssemblyPairs",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 753,
            "description": "Dehighlights the given pair of parts",
            "itemtype": "method",
            "name": "deHighlight",
            "params": [
                {
                    "name": "thePair",
                    "description": "The pair object to be dehighlighted",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 772,
            "description": "Highlights the given pair of parts",
            "itemtype": "method",
            "name": "highlight",
            "params": [
                {
                    "name": "thePair",
                    "description": "The pair object to be highlighted",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 841,
            "description": "Sets the opacity of each (non-highlighted) mesh object to the value of the\n slider element provided",
            "itemtype": "method",
            "name": "fixOpacity",
            "params": [
                {
                    "name": "theSlider",
                    "description": "The slider which is to be referenced when setting object opacity",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 870,
            "description": "Given a mouseup event, sets corresponding internal button states for mouse-related controls",
            "itemtype": "method",
            "name": "doMouseUp",
            "params": [
                {
                    "name": "theEvent",
                    "description": "",
                    "type": "Mouseup event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 890,
            "description": "Given a mousedown event, sets corresponding internal button states for mouse-related controls",
            "itemtype": "method",
            "name": "doMouseDown",
            "params": [
                {
                    "name": "theEvent",
                    "description": "",
                    "type": "Mousedown event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 910,
            "description": "Given a mouseleave event, sets corresponding internal button states for mouse-related controls",
            "itemtype": "method",
            "name": "doMouseLeave",
            "params": [
                {
                    "name": "theEvent",
                    "description": "",
                    "type": "Mouseup event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 927,
            "description": "Prevents the default response of the given event (used to prevent dropdown menus when right\n clicking on the display).",
            "itemtype": "method",
            "name": "justDont",
            "params": [
                {
                    "name": "theEvent",
                    "description": "The event to suppress the default response of.",
                    "type": "Event Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 943,
            "description": "Given a mousedrag event, rotates the camera or adds a vector to the currently displayed pair,\n depending upon whether or not the left or right mouse button is depressed",
            "itemtype": "method",
            "name": "doDrag",
            "params": [
                {
                    "name": "theEvent",
                    "description": "",
                    "type": "Mouseup event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 969,
            "description": "Given a mousewheel event, changes the distance of the camera from the center of the scene",
            "itemtype": "method",
            "name": "doMouseUp",
            "params": [
                {
                    "name": "theEvent",
                    "description": "",
                    "type": "Mouseup event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 988,
            "description": "Inserts the vector view into the webpage",
            "itemtype": "method",
            "name": "insertVectorView",
            "params": [
                {
                    "name": "theButton",
                    "description": "The vector viewing button",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 1090,
            "description": "Removes the vector view from the webpage",
            "itemtype": "method",
            "name": "removeVectorView",
            "params": [
                {
                    "name": "theButton",
                    "description": "The vector viewing button",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 1146,
            "description": "Inserts a blank vector widget into the vector view element",
            "itemtype": "method",
            "name": "addVectorToPair",
            "params": [
                {
                    "name": "theButton",
                    "description": "The \"add vector\" button",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 1209,
            "description": "Removes a vector widget from the vector view element",
            "itemtype": "method",
            "name": "remVectorFromPair",
            "params": [
                {
                    "name": "theButton",
                    "description": "The \"remove\" button of the widget to be removed",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 1235,
            "description": "Updates a vector to match the values in its corresponding widget",
            "itemtype": "method",
            "name": "vecEntryUpdate",
            "params": [
                {
                    "name": "theInput",
                    "description": "An input element of the vector's widget",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 1315,
            "description": "Finds and returns the index of the direction in the list of usable vector directions\n which best matches the given vector",
            "itemtype": "method",
            "name": "getDir",
            "params": [
                {
                    "name": "theVec",
                    "description": "The vector to be searched with",
                    "type": "Vector3"
                }
            ],
            "return": {
                "description": "The index of the best matching direction in the list of usable vector directions",
                "type": "Int"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 1347,
            "description": "Processes the information in the webpage into an XML string and inserts a download link \n for the data into the top of the page",
            "itemtype": "method",
            "name": "renderXML",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 1429,
            "description": "Initializes the lines for the XYZ compass in the display",
            "itemtype": "method",
            "name": "initAxisLines",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 1464,
            "description": "Updates the lines for the XYZ compass in the display",
            "itemtype": "method",
            "name": "updateAxisLines",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 1509,
            "description": "Maps a given mouse X position and mouse Y position to a point on a unit hemisphere facing\n towards the user then returns the index of the closest valid direction",
            "itemtype": "method",
            "name": "getDirectionFromMouse",
            "params": [
                {
                    "name": "mouseX",
                    "description": "",
                    "type": "Float"
                },
                {
                    "name": "mouseY",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\dirConfirmScript.js",
            "line": 1541,
            "description": "Adds a vector to the currently displayed pair based off of camera position, mouse X and mouse Y",
            "itemtype": "method",
            "name": "addVectorFromMouse",
            "params": [
                {
                    "name": "mouseX",
                    "description": "The X position of the mouse",
                    "type": "Float"
                },
                {
                    "name": "mouseY",
                    "description": "The Y position of the mouse",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "directionConfirmGlobal"
        },
        {
            "file": "..\\src\\webVis\\jquery.js",
            "line": 890,
            "description": "Create key-value caches of limited size",
            "return": {
                "description": "Returns the Object data after storing it on itself with\n\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n\tdeleting the oldest entry",
                "type": "Function(string, object)"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\jquery.js",
            "line": 910,
            "description": "Mark a function for special use by Sizzle",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to mark",
                    "type": "Function"
                }
            ],
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\jquery.js",
            "line": 919,
            "description": "Support testing using an element",
            "params": [
                {
                    "name": "fn",
                    "description": "Passed the created element and returns a boolean result",
                    "type": "Function"
                }
            ],
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\jquery.js",
            "line": 940,
            "description": "Adds the same handler for all of the specified attrs",
            "params": [
                {
                    "name": "attrs",
                    "description": "Pipe-separated list of attributes",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "The method that will be applied",
                    "type": "Function"
                }
            ],
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\jquery.js",
            "line": 954,
            "description": "Checks document order of two siblings",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Element"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "Returns less than 0 if a precedes b, greater than 0 if a follows b",
                "type": "Number"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\jquery.js",
            "line": 982,
            "description": "Returns a function to use in pseudos for input types",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\jquery.js",
            "line": 993,
            "description": "Returns a function to use in pseudos for buttons",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\jquery.js",
            "line": 1004,
            "description": "Returns a function to use in pseudos for :enabled/:disabled",
            "params": [
                {
                    "name": "disabled",
                    "description": "true for :disabled; false for :enabled",
                    "type": "Boolean"
                }
            ],
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\jquery.js",
            "line": 1032,
            "description": "Returns a function to use in pseudos for positionals",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\jquery.js",
            "line": 1054,
            "description": "Checks a node for validity as a Sizzle context",
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Element|Object="
                }
            ],
            "return": {
                "description": "The input node if acceptable, otherwise a falsy value",
                "type": "Element|Object|Boolean"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\jquery.js",
            "line": 1066,
            "description": "Detects XML nodes",
            "params": [
                {
                    "name": "elem",
                    "description": "An element or a document",
                    "type": "Element|Object"
                }
            ],
            "return": {
                "description": "True iff elem is a non-HTML XML node",
                "type": "Boolean"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\jquery.js",
            "line": 1078,
            "description": "Sets document-related variables once based on the current document",
            "params": [
                {
                    "name": "doc",
                    "description": "An element or document object to use to set the document",
                    "type": "Element|Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the current document",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\jquery.js",
            "line": 1532,
            "description": "Document sorting and removing duplicates",
            "params": [
                {
                    "name": "results",
                    "description": "",
                    "type": "ArrayLike"
                }
            ],
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\jquery.js",
            "line": 1565,
            "description": "Utility function for retrieving the text value of an array of DOM nodes",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Array|Element"
                }
            ],
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\jquery.js",
            "line": 2594,
            "description": "A low-level selection function that works with Sizzle's compiled\n selector functions",
            "params": [
                {
                    "name": "selector",
                    "description": "A selector or a pre-compiled\n selector function built with Sizzle.compile",
                    "type": "String|Function"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Element"
                },
                {
                    "name": "results",
                    "description": "",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "seed",
                    "description": "A set of elements to match against",
                    "type": "Array",
                    "optional": true
                }
            ],
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\jquery.js",
            "line": 9606,
            "description": "Load a url into a page",
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\jquery.js",
            "line": 9698,
            "description": "Gets a window from an element",
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\jsstl.js",
            "line": 14,
            "description": "Converts a given block of binary stl data (as an arraybuffer) to a threeJS representation\n of the geometry. Function courtesy of 'tonylukasavage' from Github, who released this to\n the public domain.",
            "itemtype": "method",
            "name": "parseStlBinary",
            "params": [
                {
                    "name": "stl",
                    "description": "The binary stl data",
                    "type": "Arraybuffer"
                }
            ],
            "return": {
                "description": "threeJS geometry object",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\jsstl.js",
            "line": 71,
            "description": "Processes a given string to make it parsible for parseStl and returns\n the results",
            "itemtype": "method",
            "name": "trim",
            "params": [
                {
                    "name": "str",
                    "description": "ASCII STL data",
                    "type": "String"
                }
            ],
            "return": {
                "description": "processed string",
                "type": "String"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\jsstl.js",
            "line": 96,
            "description": "Converts an arraybuffer into a string of equivalent binary content",
            "itemtype": "method",
            "name": "arrayToString",
            "params": [
                {
                    "name": "buf",
                    "description": "The arraybuffer",
                    "type": "Arraybuffer"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\jsstl.js",
            "line": 119,
            "description": "Converts a given block of ASCII stl data (as an arraybuffer) to a threeJS representation\n of the geometry. Function courtesy of 'tonylukasavage' from Github, who released this to\n the public domain.",
            "itemtype": "method",
            "name": "parseStl",
            "params": [
                {
                    "name": "stl",
                    "description": "The ASCII stl data",
                    "type": "Arraybuffer"
                }
            ],
            "return": {
                "description": "threeJS geometry object",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 7,
            "description": "Returns a normal material for meshes if the global variable \"standard\" is false. If \"standard\"\n is set to true, returns a chromadepth material instead.",
            "itemtype": "method",
            "name": "getStdMaterial",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 44,
            "description": "Returns a normal material for lines if the global variable \"standard\" is false. If \"standard\"\n is set to true, returns a chromadepth material instead.",
            "itemtype": "method",
            "name": "getStdMaterial",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 83,
            "description": "Accepts an array of objects containing a string property called \"Name\" and returns\n the first index where any two \"Name\" properties in the array have different characters.",
            "itemtype": "method",
            "name": "getPartNameCutoff",
            "params": [
                {
                    "name": "partFrames",
                    "description": "An array of objects, each of which should containin\n a property called \"Name\" with a non-null string.",
                    "type": "Object Array"
                }
            ],
            "return": {
                "description": "The first index where any two \"Name\" properties in the array are different.",
                "type": "Int"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 118,
            "description": "Accepts an array of objects containing a string property called \"Name\" removes\n the first N characters in each string, where N is the first index where any two\n \"Name\" properties in the array have different characters.",
            "itemtype": "method",
            "name": "cutoffPartNames",
            "params": [
                {
                    "name": "partFrames",
                    "description": "An array of objects, each of which should containin\n a property called \"Name\" with a non-null string.",
                    "type": "Object Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 146,
            "description": "Finds the average position of all the vertices in a given threeJS Geometry model.",
            "itemtype": "method",
            "name": "centerGeometry",
            "params": [
                {
                    "name": "theGeo",
                    "description": "",
                    "type": "ThreeJS Geometry Object"
                }
            ],
            "return": {
                "description": "A 3d coordinate, with each component being the unweighted\n average of the corresponding component in each vector in the provided geometry object. If nodeName\n vertices are present in the object, a zeroed vector is returned.",
                "type": "ThreeJS Vector3 Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 196,
            "description": "Accepts a list of binary stl buffer objects and returns a corresponding list\n of ThreeJS objects.",
            "itemtype": "method",
            "name": "getGeometries",
            "params": [
                {
                    "name": "theSTLs",
                    "description": "",
                    "type": "Buffer Object List"
                }
            ],
            "return": {
                "description": "",
                "type": "ThreeJS Object List"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 223,
            "description": "Combines a given array of objects (each associating an array of keyframes to name) with a \n given array of objects (each associating a threeJS mesh with a name), creating an array\n of objects with keyFrame arrays and threeJS meshes associated with the same name",
            "itemtype": "method",
            "name": "bindPartsToKeyFrames",
            "params": [
                {
                    "name": "theKeyFrameLists",
                    "description": "An array of objects, each containing an array of keyframe objects \n called \"Frames\" and a string property called \"Name\")",
                    "type": "Array"
                },
                {
                    "name": "theParts",
                    "description": "An array of objects, each containing a threeJS mesh object called \"Mesh\" and\n a string property called \"Name\"",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 288,
            "description": "Combines a jagged array of objects, each object at least possessing a numeric\n property called \"Time\", returns the value of the greatest \"Time\" property",
            "itemtype": "method",
            "name": "longestTimeFromFrames",
            "params": [
                {
                    "name": "partFrames",
                    "description": "The jagged array",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The greatest \"Time\" value in the jagged array",
                "type": "Int"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 321,
            "description": "Given a jagged array of objects, each object at least possessing a numeric\n property called \"Time\", sets each Time property to the greatest Time value in\n the jagged array minus the origional value, thus effectively reversing the\n temporal order of each object",
            "itemtype": "method",
            "name": "flipTheTimes",
            "params": [
                {
                    "name": "partFrames",
                    "description": "The jagged array",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The greatest \"Time\" value in the jagged array",
                "type": "Int"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 356,
            "description": "Logs the contents of the given jagged array of keyFrame objects, each containing numeric properties \"X\",\n \"Y\", \"Z\", and \"Time\", to the console as a string.",
            "itemtype": "method",
            "name": "showFrames",
            "params": [
                {
                    "name": "partFrames",
                    "description": "A jagged array of keyframe objects",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 394,
            "description": "Logs the contents of a given keyFrame object, containing numeric properties \"X\",\n \"Y\", \"Z\", and \"Time\", to the console as a string.",
            "itemtype": "method",
            "name": "showFrame",
            "params": [
                {
                    "name": "theFrame",
                    "description": "the keyFrame object to be logged",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 412,
            "description": "Returns true if any position component of the given keyframe object is NaN",
            "itemtype": "method",
            "name": "hasNaN",
            "params": [
                {
                    "name": "theFrame",
                    "description": "A keyFrame object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 429,
            "description": "Returns a copy of the provided keyframe object",
            "itemtype": "method",
            "name": "copyFrame",
            "params": [
                {
                    "name": "theFrame",
                    "description": "A keyFrame object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The copy",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 453,
            "description": "Returns a copy of the provided array of keyframe objects",
            "itemtype": "method",
            "name": "copyFrameList",
            "params": [
                {
                    "name": "partFrames",
                    "description": "A keyFrame object array",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The copy",
                "type": "Array"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 481,
            "description": "Creates a keyframe list for the given fastener object and adds it to currentFrameList",
            "itemtype": "method",
            "name": "makeFastenerKeyFrames",
            "params": [
                {
                    "name": "theFst",
                    "description": "The object representation of the fastener being keyframed",
                    "type": "Object"
                },
                {
                    "name": "runningList",
                    "description": "The current running list of keyframes",
                    "type": "Object List"
                },
                {
                    "name": "currentFrameList",
                    "description": "The list of part-keyframe list objects",
                    "type": "Object List"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 528,
            "description": "Given a tree representation of the assembly process through nested javascript objects, returns an array\n of keyframe array objects, with each keyframe array object being a representation of the movement of each part \n in the tree representation throughout the assembly proceess, with a list of keyframe objects and a given part name",
            "itemtype": "method",
            "name": "makeKeyFrames",
            "params": [
                {
                    "name": "theTree",
                    "description": "Tree representation of the assembly process through nested javascript objects",
                    "type": "Object"
                },
                {
                    "name": "runningList",
                    "description": "Internally used variable. Should be an empty array for outside use.",
                    "type": "Array"
                },
                {
                    "name": "currentFrameList",
                    "description": "Internally used variable. Should be an empty array for outside use.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The jagged array of keyFrame objects",
                "type": "Array"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 595,
            "description": "Given two keyFrames and a normalized float \"proportion\", returns an interpolation\n between the two keyframes with a weight towards the second keyframe proportional\n to \"proportion\"",
            "itemtype": "method",
            "name": "interpolate",
            "params": [
                {
                    "name": "keyFrame1",
                    "description": "The earlier keyFrame",
                    "type": "Object"
                },
                {
                    "name": "keyFrame2",
                    "description": "The later keyFrame",
                    "type": "Object"
                },
                {
                    "name": "proportion",
                    "description": "A normalized value representing what proportion of the path of\n interpolation is between the result and the earlier keyFrame",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "The jagged array of keyFrame objects",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 637,
            "description": "Given a list of keyframes and a time quantity, returns a keyframe object interpolating\n between the two temporally closest keyframes. In cases where the provide time is beyond the\n range of times represented by the list, returns the closest keyframe",
            "itemtype": "method",
            "name": "grabInterp",
            "params": [
                {
                    "name": "frameList",
                    "description": "A list of keyframes. Must be organized from least time value to greatest time value",
                    "type": "Array"
                },
                {
                    "name": "time",
                    "description": "Floating-point representation of what time in the keyframe progression the interpolation\n should occur",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "The interpolated keyframe",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 693,
            "description": "Given an array of objects (each containing a threeJS mesh object and an array of \n keyFrame objects), and two floating points \"time\" and \"timeWarp\", will animate each\n mesh in the array along the keyframes in their associate objects according to the \n given \"time\" and returns the new time as given by the standard time step multiplied\n by \"timeWarp\"",
            "itemtype": "method",
            "name": "animate",
            "params": [
                {
                    "name": "partFrames",
                    "description": "List of objects relating threeJS mesh objects with their \n respective keyframe arrays",
                    "type": "Array"
                },
                {
                    "name": "time",
                    "description": "The time to be used when interpolating keyFrames for the models",
                    "type": "Float"
                },
                {
                    "name": "timeWarp",
                    "description": "The coefficeint to be applied to the timestep in the\n animation",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "The new value of time in the animation",
                "type": "Float"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 742,
            "description": "Given two threeJS boundingBox objects, returns the smallest bounding box\n encompassing the two",
            "itemtype": "method",
            "name": "combineBounds",
            "params": [
                {
                    "name": "a",
                    "description": "The first bounding box",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "The second bounding box",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The combined bounds",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 771,
            "description": "Given two threeJS boundingBox objects, returns the smallest bounding box\n encompassing the two",
            "itemtype": "method",
            "name": "getGlobBounds",
            "params": [
                {
                    "name": "a",
                    "description": "The first bounding box",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "The second bounding box",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The combined bounds",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 805,
            "description": "Given an object, containing a threeJS mesh object as \"Mesh\", will\n return the center of the mesh's bounding box",
            "itemtype": "method",
            "name": "getPartCenter",
            "params": [
                {
                    "name": "a",
                    "description": "The object containing the threeJS mesh object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The center of the mesh's bounding box, represented as\n a threeJS Vector3 object",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 833,
            "description": "Aligns the camera to look at the point at the average of the centers of all the parts bounding boxes",
            "itemtype": "method",
            "name": "alignAssemblyCenter",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 860,
            "description": "Given a threeJS scene object, a threeJS camera object, and an array of objects containing\n threeJS mesh objects, finds the first mesh in the scene which is intersected the ray extending\n through the center of the camera's field of vision. If this mesh is in the provided array of \n objects, then that object is returned, otherwise null is returned instead",
            "itemtype": "method",
            "name": "getFirstIntersect",
            "params": [
                {
                    "name": "theScene",
                    "description": "The threeJS scene object in which intersections should\n be tested",
                    "type": "Object"
                },
                {
                    "name": "theCamera",
                    "description": "The threeJS camera object to be used to test for \n ray intersections",
                    "type": "Object"
                },
                {
                    "name": "partFrames",
                    "description": "An array containing a series of objects, each of which\n contain a threeJS mesh object (under the property \"Mesh\") to be tested for intersections",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The intersecting mesh (or null in case of no valid intersection)",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 911,
            "description": "Given an tree representation of the movement of parts in an assembly sequence, the\n parent node of that node, and a threeJS scene object, inserts a line for each subassembly\n path along the path of movement",
            "itemtype": "method",
            "name": "addLines",
            "params": [
                {
                    "name": "movTree",
                    "description": "Tree of nested objects representing the movement of each subassembly\n in it's assembly sequence",
                    "type": "Object"
                },
                {
                    "name": "parentNode",
                    "description": "Used for internal use. Null should be applied for external use.",
                    "type": "Object"
                },
                {
                    "name": "theScene",
                    "description": "the threeJS scene to which the line representations will be added",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 968,
            "description": "Given an tree representation of the movement of parts in an assembly sequence, an \n array of Objects each associating a list of keyframes with a threeJS mesh object and aLinkcolor\n string, and the index of the keyframe associated with the tree's root node, displaces the movement\n line points associated with that particular part of the assembly to match the displacement of the\n model",
            "itemtype": "method",
            "name": "addDisplacement",
            "params": [
                {
                    "name": "movTree",
                    "description": "Tree of nested objects representing the movement of each subassembly\n in it's assembly sequence",
                    "type": "Object"
                },
                {
                    "name": "partFrames",
                    "description": "An array of Objects each associating a list of keyframes with a threeJS\n mesh object and a string",
                    "type": "Array"
                },
                {
                    "name": "it",
                    "description": "The index of the keyframe associated with the root node of movTree. Used internally.\n For external use, apply 0.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 1023,
            "description": "Given an tree representation of the movement of parts in an assembly sequence, the\n parent node of that node, and the current time in the animation, updates the ends of the\n movement lines such that the portion of lines which have already been traversed are not shown",
            "itemtype": "method",
            "name": "updateLines",
            "params": [
                {
                    "name": "movTree",
                    "description": "Tree of nested objects representing the movement of each subassembly\n in it's assembly sequence",
                    "type": "Object"
                },
                {
                    "name": "parentNode",
                    "description": "Used for internal use. Null should be applied for external use.",
                    "type": "Object"
                },
                {
                    "name": "theTime",
                    "description": "the threeeJS scene to which the line representations will be added",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 1086,
            "description": "Initializes the axis lines for the bottom-left of the screen",
            "itemtype": "method",
            "name": "initAxisLines",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 1133,
            "description": "Updates the axis line dispay",
            "itemtype": "method",
            "name": "updateAxisLines",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 1204,
            "description": "Performs a bezier curve interpolation of the control points in pointlist given \n the time value T, and returns a ThreeJS Vector3 object with the interpolated coordinates.",
            "itemtype": "method",
            "name": "interp",
            "params": [
                {
                    "name": "pointList",
                    "description": "A list of control points for use in interpolation.",
                    "type": "Vector3 Array"
                },
                {
                    "name": "T",
                    "description": "A normalized value for use as a time value in interpolation.",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 1239,
            "description": "Returns a string describing the x, y, and z coordinates of theVec.",
            "itemtype": "method",
            "name": "vecDesc",
            "params": [
                {
                    "name": "theVec",
                    "description": "The ThreeJS Vector3 object to be described by the output string",
                    "type": "Vector3"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 1257,
            "description": "Recursively adds Vector3 objects onto the Vector3 list, target, interpolating from startDisp\n and endDisp in an arc centered at the Vector3 object center. Each layer of recursion\n adds the midpoint of the arc from startDisp to endDisp until level = 0.",
            "itemtype": "method",
            "name": "addArcSubDiv",
            "params": [
                {
                    "name": "target",
                    "description": "The list where the calculated Vector3 objects should be added",
                    "type": "Vector3 Array"
                },
                {
                    "name": "center",
                    "description": "The point which the generated arc should be centered on",
                    "type": "Vector3"
                },
                {
                    "name": "startDisp",
                    "description": "The starting point of the arc",
                    "type": "Vector3"
                },
                {
                    "name": "endDisp",
                    "description": "The ending point of the arc",
                    "type": "Vector3"
                },
                {
                    "name": "level",
                    "description": "The desired levels of recursion in the point interpolation",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 1307,
            "description": "Returns a list of 2^(resolution+1) points which trace an arc beginning at startPoint,\n terminating at endpoint, and centered around center",
            "itemtype": "method",
            "name": "makeArcPointList",
            "params": [
                {
                    "name": "startPoint",
                    "description": "The starting point of the arc",
                    "type": "Vector3"
                },
                {
                    "name": "center",
                    "description": "The point which the generated arc should be centered on",
                    "type": "Vector3"
                },
                {
                    "name": "endPoint",
                    "description": "The ending point of the arc",
                    "type": "Vector3"
                },
                {
                    "name": "resolution",
                    "description": "The desired levels of recursion in the point interpolation",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "Vector3 Array"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 1368,
            "description": "Adds keyframes onto the keyframe lists provided so that the keyframed parts begin their\n animation at start location and move in an arc to their previously defined start position",
            "itemtype": "method",
            "name": "addCurveKeyFrames",
            "params": [
                {
                    "name": "theFrameLists",
                    "description": "A list of keyframe lists describing the movement of 3d models",
                    "type": "Object List"
                },
                {
                    "name": "startLocation",
                    "description": "The desired new start location of the 3d models in the animation",
                    "type": "Vector3"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 1423,
            "description": "Adds a simple square grid of width equal to theSize and a number of lines equal to theDivs at Y=-1000",
            "itemtype": "method",
            "name": "addGrid",
            "params": [
                {
                    "name": "theSize",
                    "description": "The desired grid width",
                    "type": "Int"
                },
                {
                    "name": "theDivs",
                    "description": "The desired number of lines per side of the grid",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partRender.js",
            "line": 1460,
            "description": "Adds a simple vertical column with a radius of theRad, a base Y value of theBot, a top terminating at\n theTop, an x and z position equal to theX and theZ, a line color of theColor, a number of vertical \n segmentations equal to stacks, and a number of radial segmentations equal to slices",
            "itemtype": "method",
            "name": "addGrid",
            "params": [
                {
                    "name": "theRad",
                    "description": "The desired radius of the column",
                    "type": "Float"
                },
                {
                    "name": "theBot",
                    "description": "The desired bottom y value of the column",
                    "type": "Float"
                },
                {
                    "name": "theTop",
                    "description": "The desired top y value of the column",
                    "type": "Float"
                },
                {
                    "name": "theX",
                    "description": "The desired x value of the column",
                    "type": "Float"
                },
                {
                    "name": "theZ",
                    "description": "The desired z value of the column",
                    "type": "Float"
                },
                {
                    "name": "slices",
                    "description": "The desired number of radial segmentations",
                    "type": "Float"
                },
                {
                    "name": "stacks",
                    "description": "The desired z value of vertical segmentations",
                    "type": "Float"
                },
                {
                    "name": "theColor",
                    "description": "The desired color of the column",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\partTableScript.js",
            "line": 15,
            "description": "Given the contents of a part table XML file (as a string), fills out the table in the web page.",
            "itemtype": "method",
            "name": "recieveData",
            "params": [
                {
                    "name": "theXMLText",
                    "description": "The contents of a part table",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "..\\src\\webVis\\partTableScript.js",
            "line": 45,
            "description": "Is called whenever the user submits the part table and every entry has been\n properly filled out.",
            "itemtype": "method",
            "name": "sendData",
            "params": [
                {
                    "name": "theXMLText",
                    "description": "The contents of the part table in the webpage, as a string\n in XML formatting",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "..\\src\\webVis\\partTableScript.js",
            "line": 136,
            "description": "Accepts a string and outputs the string of all characters following the final '.' symbol\n in the string. This is used internally to extract file extensions from file names.",
            "itemtype": "method",
            "name": "grabExtension",
            "params": [
                {
                    "name": "theName",
                    "description": "The file name to be processed",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the extension in the given file name. If no extension is found, the \n 'undefined' value is returned.",
                "type": "String"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "..\\src\\webVis\\partTableScript.js",
            "line": 154,
            "description": "Given an HTML element and a string, returns a list containing all child elements\n of the given element with a tag equivalent to the given string",
            "itemtype": "method",
            "name": "getChildrenByTag",
            "params": [
                {
                    "name": "theNode",
                    "description": "The HTML element whose children are to be searched",
                    "type": "HTML Element"
                },
                {
                    "name": "tag",
                    "description": "The string to be used when searching for element children",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "..\\src\\webVis\\partTableScript.js",
            "line": 184,
            "description": "Accepts a fileinput event, presumably from a file upload event listener, and assigns\n functions to each file reader listed in the event to be called upon the full loading\n of that given reader's files",
            "itemtype": "method",
            "name": "readMultipleFiles",
            "params": [
                {
                    "name": "evt",
                    "description": "A fileinput event, to be given by a fileinput event listener",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "..\\src\\webVis\\partTableScript.js",
            "line": 243,
            "description": "Called internally upon every recieved fileload event. Checks if every file reader in the \n array \"fileReaders\" has fully read each of their files. If so, then the function calls\n \"recieveData\".",
            "itemtype": "method",
            "name": "loadParts",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "..\\src\\webVis\\partTableScript.js",
            "line": 273,
            "description": "Given a jQuery object and a string, returns the first child of the given element with\n a tag equivalent to the given string.",
            "itemtype": "method",
            "name": "grab",
            "params": [
                {
                    "name": "theTree",
                    "description": "The jQuery object whose child is to be returned",
                    "type": "JQuery Object"
                },
                {
                    "name": "theMember",
                    "description": "The name of the tag being searched",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The first child with the given tag. If such a child does not \n exist, null is returned.",
                "type": "JQuery Object"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "..\\src\\webVis\\partTableScript.js",
            "line": 297,
            "description": "Given a jQuery object and an integer \"N\", returns the Nth child of the given element with\n the given tag.",
            "itemtype": "method",
            "name": "grabInd",
            "params": [
                {
                    "name": "theTree",
                    "description": "The jQuery object whose child is to be returned",
                    "type": "JQuery Object"
                },
                {
                    "name": "theMember",
                    "description": "The name of the tag being searched",
                    "type": "String"
                },
                {
                    "name": "theIndex",
                    "description": "The ordinal of the matching child to be returned",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The child meeting the tag and ordinal requirement. \n If such a child does not exist, null is returned.",
                "type": "JQuery Object"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "..\\src\\webVis\\partTableScript.js",
            "line": 323,
            "description": "Given a jQuery object representation of a part entry, inserts an html representation\n of that entry in the table",
            "itemtype": "method",
            "name": "addEntry",
            "params": [
                {
                    "name": "theEntry",
                    "description": "The jQuery object containing the representation of a table\n entry, as extracted from an XML document",
                    "type": "JQuery Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "..\\src\\webVis\\partTableScript.js",
            "line": 374,
            "description": "Parses through each entry in the table and, if all entries are fully filled out, converts the table into an\n XML file and adds a download link for that file to the webpage",
            "itemtype": "method",
            "name": "renderXML",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "..\\src\\webVis\\partTableScript.js",
            "line": 447,
            "description": "Given an html row element containing data regarding a part, converts the information into an\n xml formatted string and returns it",
            "itemtype": "method",
            "name": "renderEntry",
            "params": [
                {
                    "name": "theCells",
                    "description": "An html row element containing information about a part",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "XML representation of the table entry",
                "type": "String"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "..\\src\\webVis\\partTableScript.js",
            "line": 535,
            "description": "A function automatically called by button elements associated with the mass option\n in an entry's mass section when pressed. Changes the parent mass section to contain a\n text input element and a button allowing the user to switch over to density input.",
            "itemtype": "method",
            "name": "insertMassInput",
            "params": [
                {
                    "name": "theButton",
                    "description": "The button that calls this function",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "..\\src\\webVis\\partTableScript.js",
            "line": 556,
            "description": "A function automatically called by button elements associated with the density option\n in an entry's mass section when pressed. Changes the parent mass section to contain a\n text input element and a button allowing the user to switch over to mass input.",
            "itemtype": "method",
            "name": "insertDensityInput",
            "params": [
                {
                    "name": "theButton",
                    "description": "The button that calls this function",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "..\\src\\webVis\\partTableScript.js",
            "line": 579,
            "description": "A function automatically called by button elements associated with the hollow option\n in an entry's volume section when pressed. Changes the parent volume section to contain a\n text input element and a button allowing the user to indicate the part is not hollow.",
            "itemtype": "method",
            "name": "insertHollowInput",
            "params": [
                {
                    "name": "theButton",
                    "description": "The button that calls this function",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "..\\src\\webVis\\partTableScript.js",
            "line": 601,
            "description": "A function automatically called by button elements associated with the hollow option\n in an entry's volume section when pressed. Changes the parent volume section to contain\n only a mass value and a button allowing the user to indicate the part is hollow.",
            "itemtype": "method",
            "name": "removeHollowInput",
            "params": [
                {
                    "name": "theButton",
                    "description": "The button that calls this function",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "..\\src\\webVis\\partTableScript.js",
            "line": 623,
            "description": "A function automatically called by text input elements associated with the hollow option\n in an entry's volume section when changed. Changes the currently displayed volume to \n match the given thickness",
            "itemtype": "method",
            "name": "updateVolumeDisplay",
            "params": [
                {
                    "name": "theBox",
                    "description": "The text input element that calls this function",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "..\\src\\webVis\\partTableScript.js",
            "line": 644,
            "description": "A function automatically called by text input elements associated with the density option\n in an entry's mass section when changed. Changes the currently displayed mass to \n match the given density",
            "itemtype": "method",
            "name": "updateMassDisplay",
            "params": [
                {
                    "name": "theBox",
                    "description": "The text input element that calls this function",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "..\\src\\webVis\\partTableScript.js",
            "line": 667,
            "description": "A function automatically called by button elements associated with accessing sample densities.\n Adds a div element containing several sample density options.",
            "itemtype": "method",
            "name": "doDensityDrop",
            "params": [
                {
                    "name": "theButton",
                    "description": "The button element that called this function",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "..\\src\\webVis\\partTableScript.js",
            "line": 684,
            "description": "A function automatically called by button elements associated with accessing sample densities.\n Removes the sample density option div element.",
            "itemtype": "method",
            "name": "undoDensityDrop",
            "params": [
                {
                    "name": "theButton",
                    "description": "The button element that called this function",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "..\\src\\webVis\\partTableScript.js",
            "line": 703,
            "description": "A function automatically called by button elements associated with sample densities. Will fill\n the associated density input box with the value associated with the inner text of the button.",
            "itemtype": "method",
            "name": "changeDensity",
            "params": [
                {
                    "name": "theButton",
                    "description": "The button element that called this function",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "..\\src\\webVis\\partTableScript.js",
            "line": 757,
            "description": "A function automatically called by text box elements upon becoming checked/unchecked.\n Sets an internal value to indicate the checked state of the element.",
            "itemtype": "method",
            "name": "flipCheck",
            "params": [
                {
                    "name": "theBox",
                    "description": "The checkbox element calling this function",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "..\\src\\webVis\\partTableScript.js",
            "line": 781,
            "description": "Takes the value present in the global density input textbox and applies it to all \n parts currently in the table.",
            "itemtype": "method",
            "name": "fillGlobalDensity",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "..\\src\\webVis\\partTableScript.js",
            "line": 821,
            "description": "Accepts a string and outputs a conversion value for the string's described unit to the standard\n units of this application. If no suitable unit is identified in the string, the conversion value\n returned is 0.",
            "itemtype": "method",
            "name": "conversion",
            "params": [
                {
                    "name": "theString",
                    "description": "A string representation of the unit being looked up",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the unit conversion value",
                "type": "Float"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "..\\src\\webVis\\partTableScript.js",
            "line": 873,
            "description": "Returns a blank mass input element for use in the table",
            "itemtype": "method",
            "name": "makeMassElem",
            "return": {
                "description": "a blank mass input element",
                "type": "HTML element"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "..\\src\\webVis\\partTableScript.js",
            "line": 902,
            "description": "Returns a blank volume input element for use in the table",
            "itemtype": "method",
            "name": "makeVolElem",
            "return": {
                "description": "a blank volume input element",
                "type": "HTML element"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "..\\src\\webVis\\partTableScript.js",
            "line": 924,
            "description": "Returns a standard button for a density dropdown menu",
            "itemtype": "method",
            "name": "makeDropButton",
            "return": {
                "description": "a standard density dropdown button",
                "type": "HTML element"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "..\\src\\webVis\\partTableScript.js",
            "line": 945,
            "description": "Returns a standard button to remove a density dropdown element",
            "itemtype": "method",
            "name": "makeUndropButton",
            "return": {
                "description": "a standard density dropdown removal button",
                "type": "HTML element"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "..\\src\\webVis\\partTableScript.js",
            "line": 980,
            "description": "Returns a standard sample density dropdown menu",
            "itemtype": "method",
            "name": "makeDensityDiv",
            "return": {
                "description": "a sample density dropdown menu",
                "type": "HTML element"
            },
            "class": "partTableGlobal"
        },
        {
            "file": "..\\src\\webVis\\renderScript.js",
            "line": 26,
            "description": "The function which handles the actual rendering of the solution file animation\n and loading in the models",
            "itemtype": "method",
            "name": "renderData",
            "params": [
                {
                    "name": "theXMLFile",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "theSTLFiles",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\renderScript.js",
            "line": 287,
            "description": "Attempts to lock the mouse for camera manupulation",
            "itemtype": "method",
            "name": "tryMouseLock",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\renderScript.js",
            "line": 309,
            "description": "Adds or Removes event listeners for input meant for camera manipulation.\n Is triggered by a change in the state of the mouse locking or unlocking. \n The mouse locking results in input listeners being added to the webpage,\n whereas the unlocking of the mouse results in the removal of appropriate\n listeners.",
            "itemtype": "method",
            "name": "lockChange",
            "params": [
                {
                    "name": "e",
                    "description": "The event that is to be applied to the function by event listeners upon\n a change in the state of mouselock",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\renderScript.js",
            "line": 349,
            "description": "Changes the orientation of the camera based off of the mouse movement\n contained in the supplied mouse movement event. X-axis movement\n corresponds to change in the yaw of the camera whereas Y-axis movement\n corresponds to a change in the pitch of the camera.",
            "itemtype": "method",
            "name": "mouseMoved",
            "params": [
                {
                    "name": "e",
                    "description": "The mouse movement event to be supplied to the function by a mouse \n movement event listener on the web page",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\renderScript.js",
            "line": 396,
            "description": "Accepts a key press event and, if the key press corresponds to one\n of the keys used for manipulating the view, sets the proper components\n of \"inputState\" to true.",
            "itemtype": "method",
            "name": "registerDown",
            "params": [
                {
                    "name": "e",
                    "description": "The key down event to be supplied to the function by a key down event \n listener on the web page",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\renderScript.js",
            "line": 455,
            "description": "Accepts a key press release and, if the key release corresponds to one\n of the keys used for manipulating the view, sets the proper components\n of \"inputState\" to false",
            "itemtype": "method",
            "name": "registerUp",
            "params": [
                {
                    "name": "e",
                    "description": "The key up event to be supplied to the function by a key up event \n listener on the web page",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\renderScript.js",
            "line": 512,
            "description": "Once called, interprets the current state of registered inputs and manipulates \n the visualization accordingly, including the accelleration of the camera, as\n affected by the W,S,A, and D keys, and the rotation of the camera if the F key\n is depressed and there currently is a highlighted object of interest",
            "itemtype": "method",
            "name": "manageControls",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\renderScript.js",
            "line": 615,
            "description": "The main portion of the visualization's rendering cycle, managing frame rate,\n input, camera decelleration, keyframe manipulation, model animation, object highlighting,\n and informational display.",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\renderScript.js",
            "line": 707,
            "description": "Accepts a string and outputs the string of all characters following the final '.' symbol\n in the string. This is used internally to extract file extensions from file names.",
            "itemtype": "method",
            "name": "grabExtension",
            "params": [
                {
                    "name": "theName",
                    "description": "The file name to be processed",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the extension in the given file name. If no extension is found, the \n 'undefined' value is returned.",
                "type": "String"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\renderScript.js",
            "line": 740,
            "description": "Accepts a fileinput event, presumably from a file upload event listener, and assigns\n functions to each file reader listed in the event to be called upon the full loading\n of that given reader's files",
            "itemtype": "method",
            "name": "readMultipleFiles",
            "params": [
                {
                    "name": "evt",
                    "description": "A fileinput event, to be given by a fileinput event listener",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\renderScript.js",
            "line": 810,
            "description": "Called internally upon every recieved fileload event. Checks if every file reader in the \n array \"fileReaders\" has fully read each of their files. If so, then the function converts\n all recieved stl files into threeJS models and executes \"renderParts\".",
            "itemtype": "method",
            "name": "loadParts",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\renderScript.js",
            "line": 883,
            "description": "Called internally by \"loadParts\". Parses the text stored in \"theXML\" into a tree\n structure composed of nested javascript objects and converts that structure into a\n series of keyframe arrays, each of which are stored alongside their respective \n parts in \"partFrames\". Additionally, generates the path lines for each subassembly\n and inserts those lines into \"scene\".",
            "itemtype": "method",
            "name": "renderParts",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\renderScript.js",
            "line": 981,
            "description": "Toggles the display of the HTML div element containing the treequence representation of\n the assembly.",
            "itemtype": "method",
            "name": "showHideTreequence",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\sigma.canvas.edges.curvedArrow.js",
            "line": 6,
            "description": "This edge renderer will display edges as curves with arrow heading.",
            "params": [
                {
                    "name": "edge",
                    "description": "The edge object.",
                    "type": "Object"
                },
                {
                    "name": "source",
                    "description": "node  The edge source node.",
                    "type": "Object"
                },
                {
                    "name": "target",
                    "description": "node  The edge target node.",
                    "type": "Object"
                },
                {
                    "name": "context",
                    "description": "The canvas context.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "settings",
                    "description": "The settings function.",
                    "type": "Configurable"
                }
            ],
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\treequence.js",
            "line": 6,
            "description": "Given a jQuery object, returns a full list of all of its children.",
            "itemtype": "method",
            "name": "whatsIn",
            "params": [
                {
                    "name": "theTree",
                    "description": "The jQuery object whose children should be returned",
                    "type": "JQuery Object"
                }
            ],
            "return": {
                "description": "Array of the object's children",
                "type": "Array"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\treequence.js",
            "line": 27,
            "description": "Given a jQuery object and a string, returns the first child of the given element with\n a tag equivalent to the given string.",
            "itemtype": "method",
            "name": "grab",
            "params": [
                {
                    "name": "theTree",
                    "description": "The jQuery object whose child is to be returned",
                    "type": "JQuery Object"
                },
                {
                    "name": "theMember",
                    "description": "The name of the tag being searched",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The first child with the given tag. If such a child does not \n exist, null is returned.",
                "type": "JQuery Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\treequence.js",
            "line": 55,
            "description": "Given a jQuery object and an integer \"N\", returns the Nth child of the given element with\n the given tag.",
            "itemtype": "method",
            "name": "grabInd",
            "params": [
                {
                    "name": "theTree",
                    "description": "The jQuery object whose child is to be returned",
                    "type": "JQuery Object"
                },
                {
                    "name": "theMember",
                    "description": "The name of the tag being searched",
                    "type": "String"
                },
                {
                    "name": "theIndex",
                    "description": "The ordinal of the matching child to be returned",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The child meeting the tag and ordinal requirement. \n If such a child does not exist, null is returned.",
                "type": "JQuery Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\treequence.js",
            "line": 83,
            "description": "Given a jQuery object derived from parsing an XML document, extracts all information\n relevant to part movement and composes it into an identically structured tree of \n nested javascript objects which is then returned",
            "itemtype": "method",
            "name": "getMovement",
            "params": [
                {
                    "name": "theTree",
                    "description": "The jQuery object to be parsed over",
                    "type": "JQuery Object"
                },
                {
                    "name": "myX",
                    "description": "The X position of the subassembly represented by the root node of theTree",
                    "type": "Float"
                },
                {
                    "name": "myY",
                    "description": "The Y position of the subassembly represented by the root node of theTree",
                    "type": "Float"
                },
                {
                    "name": "myZ",
                    "description": "The Z position of the subassembly represented by the root node of theTree",
                    "type": "Float"
                },
                {
                    "name": "myTime",
                    "description": "The time value of the subassembly represented by the root node of theTree",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "The root node of the tree of extracted movement data",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\treequence.js",
            "line": 159,
            "description": "Given a jQuery Object, will return the first child with the tag \"Reference\" of the first child with\n the tag \"Install\" of the object. If no such child exists, null is returned.",
            "itemtype": "method",
            "name": "getRef",
            "params": [
                {
                    "name": "theTree",
                    "description": "The jQuery object to be accessed",
                    "type": "JQuery Object"
                }
            ],
            "return": {
                "description": "The resulting child",
                "type": "JQuery Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\treequence.js",
            "line": 179,
            "description": "Given a jQuery Object, will return the first child with the tag \"Moving\" of the first child with\n the tag \"Install\" of the object. If no such child exists, null is returned.",
            "itemtype": "method",
            "name": "getMov",
            "params": [
                {
                    "name": "theTree",
                    "description": "The jQuery object to be accessed",
                    "type": "JQuery Object"
                }
            ],
            "return": {
                "description": "The resulting child",
                "type": "JQuery Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\treequence.js",
            "line": 201,
            "description": "Given a jQuery object derived from parsing an XML document, extracts all information\n relevant to installation timing and composes it into an identically structured tree of \n nested javascript objects which is then returned",
            "itemtype": "method",
            "name": "getTimes",
            "params": [
                {
                    "name": "theTree",
                    "description": "The jQuery object to be parsed over",
                    "type": "JQuery Object"
                },
                {
                    "name": "parentTime",
                    "description": "The time value of the subassembly represented by the root node of theTree",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "The root node of the tree of extracted time data",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\treequence.js",
            "line": 232,
            "description": "Given a tree of nested objects, returns the highest \"Time\" value from all the nodes",
            "itemtype": "method",
            "name": "getLongestTime",
            "params": [
                {
                    "name": "timeTree",
                    "description": "The tree of time values",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The highest time value in the tree",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\treequence.js",
            "line": 254,
            "description": "Given a jQuery object derived from parsing an XML document, extracts all part name \n information and composes it into an identically structured tree of nested javascript\n objects which is then returned",
            "itemtype": "method",
            "name": "getNames",
            "params": [
                {
                    "name": "theTree",
                    "description": "The jQuery object to be parsed over",
                    "type": "JQuery Object"
                }
            ],
            "return": {
                "description": "The root node of the tree of extracted name data",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\treequence.js",
            "line": 282,
            "description": "Given a three trees of nested javascript objects, one holding time data, one holding\n movement data, and one holding part name data",
            "itemtype": "method",
            "name": "mergeTrees",
            "params": [
                {
                    "name": "TimeTree",
                    "description": "The root node of the tree containing time data",
                    "type": "Object"
                },
                {
                    "name": "SpaceTree",
                    "description": "The root node of the tree containing movement data",
                    "type": "Object"
                },
                {
                    "name": "NameTree",
                    "description": "The root node of the tree containing name data",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The root node of the resulting tree",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\treequence.js",
            "line": 311,
            "description": "Given a three trees of nested javascript objects, one holding time data, one holding\n movement data, and one holding part name data",
            "itemtype": "method",
            "name": "getNameList",
            "params": [
                {
                    "name": "TimeTree",
                    "description": "The root node of the tree containing time data",
                    "type": "Object"
                },
                {
                    "name": "SpaceTree",
                    "description": "The root node of the tree containing movement data",
                    "type": "Object"
                },
                {
                    "name": "NameTree",
                    "description": "The root node of the tree containing name data",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The root node of the resulting tree",
                "type": "Object"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\treequence.js",
            "line": 346,
            "description": "Given an array of strings, returns the first index at which at least \n two of the included strings are different",
            "itemtype": "method",
            "name": "similarityCutoff",
            "params": [
                {
                    "name": "theList",
                    "description": "The list of strings to be anylized",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The computed index",
                "type": "Index"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\treequence.js",
            "line": 387,
            "description": "Given a tree of nested javascript objects (each with a string attribute \"Name\") and an\n integer \"N\", removes the first N characters of each Name attribute",
            "itemtype": "method",
            "name": "cutOffNames",
            "params": [
                {
                    "name": "theTree",
                    "description": "The structure containing name data",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\treequence.js",
            "line": 429,
            "description": "Given a tree of nested javascript objects (each with a string attribute \"Name\"), and two lists,\n regTreeNames and fstTreeNames, inserts all regular part names into regTreeNames and inserts all\n fastener part names into fstTreeNames",
            "itemtype": "method",
            "name": "getTreeNames",
            "params": [
                {
                    "name": "tree",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "regTreeNames",
                    "description": "",
                    "type": "String List"
                },
                {
                    "name": "fstTreeNames",
                    "description": "",
                    "type": "String List"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\treequence.js",
            "line": 469,
            "description": "Given a list of parts, returns a list of the names of each part",
            "itemtype": "method",
            "name": "getPartNames",
            "params": [
                {
                    "name": "parts",
                    "description": "The list of part objects.",
                    "type": "Part List"
                }
            ],
            "return": {
                "description": "",
                "type": "String List"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\treequence.js",
            "line": 496,
            "description": "Given a tree of nested javascript objects (each with a float attribute \"Time\") and a\n float \"N\", sets each Time value to N minus that value",
            "itemtype": "method",
            "name": "flipTreeTime",
            "params": [
                {
                    "name": "theTree",
                    "description": "The structure containing time data",
                    "type": "Object"
                },
                {
                    "name": "axis",
                    "description": "The value used to mirror the time values",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\treequence.js",
            "line": 531,
            "description": "Given a tree of nested javascript objects, returns the depth of the tree",
            "itemtype": "method",
            "name": "getDepth",
            "params": [
                {
                    "name": "theTree",
                    "description": "The object structure",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The depth of the object",
                "type": "Int"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\treequence.js",
            "line": 556,
            "description": "Given a staggered array of integer pairs, returns a random UTF character with a UTF value\n within one of the given integer ranges (inclusive)",
            "itemtype": "method",
            "name": "getRandomUTF",
            "params": [
                {
                    "name": "selectSpace",
                    "description": "A staggered array of integer range limits",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\treequence.js",
            "line": 606,
            "description": "Given a tree of nested javascript objects and an html element, inserts the contents\n of the root node of the given tree as an html element into the given element. Returns\n the name of the generated node.",
            "itemtype": "method",
            "name": "insertTreequenceHTML",
            "params": [
                {
                    "name": "theTree",
                    "description": "The tree structure",
                    "type": "Object"
                },
                {
                    "name": "parentElement",
                    "description": "The html element to contain the node information",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\treequence.js",
            "line": 710,
            "description": "Given an html node containing a button, hides all child treequence elements\n if the button text is not \"+\" and shows them if it is.",
            "itemtype": "method",
            "name": "swapHiding",
            "params": [
                {
                    "name": "theNode",
                    "description": "The html element whose treequence elements are to be manipulated.",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\treequence.js",
            "line": 747,
            "description": "Given an HTML element, sets the style attributes of that element to display it's contents.",
            "itemtype": "method",
            "name": "show",
            "params": [
                {
                    "name": "theNode",
                    "description": "The HTML element to be shown.",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\treequence.js",
            "line": 769,
            "description": "Given an HTML element, sets the style attributes of that element to hide it's contents.",
            "itemtype": "method",
            "name": "hide",
            "params": [
                {
                    "name": "theNode",
                    "description": "The HTML element to be hidden.",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\treequence.js",
            "line": 803,
            "description": "Given an HTML element, sets the style attributes of that element's children\n to display their contents.",
            "itemtype": "method",
            "name": "showChildren",
            "params": [
                {
                    "name": "theNode",
                    "description": "The HTML element whose children are to be shown.",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\treequence.js",
            "line": 832,
            "description": "Given an HTML element, sets the style attributes of that element's children\n to hide their contents.",
            "itemtype": "method",
            "name": "hideChildren",
            "params": [
                {
                    "name": "theNode",
                    "description": "The HTML element whose children are to be hidden.",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        },
        {
            "file": "..\\src\\webVis\\treequence.js",
            "line": 862,
            "description": "Given an HTML element and a string, returns a list containing all child elements\n of the given element with a tag equivalent to the given string",
            "itemtype": "method",
            "name": "getChildrenByTag",
            "params": [
                {
                    "name": "theNode",
                    "description": "The HTML element whose children are to be searched",
                    "type": "HTML Element"
                },
                {
                    "name": "tag",
                    "description": "The string to be used when searching for element children",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "renderGlobal"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\src\\webVis\\jquery.js:890"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\src\\webVis\\jquery.js:954"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\src\\webVis\\jquery.js:1054"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\src\\webVis\\jquery.js:1066"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\src\\webVis\\jquery.js:1078"
        },
        {
            "message": "Missing item type\nThe rendering function for the webpage",
            "line": " ..\\src\\webVis\\dirConfirmScript.js:226"
        },
        {
            "message": "Missing item type\nCreate key-value caches of limited size",
            "line": " ..\\src\\webVis\\jquery.js:890"
        },
        {
            "message": "Missing item type\nMark a function for special use by Sizzle",
            "line": " ..\\src\\webVis\\jquery.js:910"
        },
        {
            "message": "Missing item type\nSupport testing using an element",
            "line": " ..\\src\\webVis\\jquery.js:919"
        },
        {
            "message": "Missing item type\nAdds the same handler for all of the specified attrs",
            "line": " ..\\src\\webVis\\jquery.js:940"
        },
        {
            "message": "Missing item type\nChecks document order of two siblings",
            "line": " ..\\src\\webVis\\jquery.js:954"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for input types",
            "line": " ..\\src\\webVis\\jquery.js:982"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for buttons",
            "line": " ..\\src\\webVis\\jquery.js:993"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for :enabled/:disabled",
            "line": " ..\\src\\webVis\\jquery.js:1004"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for positionals",
            "line": " ..\\src\\webVis\\jquery.js:1032"
        },
        {
            "message": "Missing item type\nChecks a node for validity as a Sizzle context",
            "line": " ..\\src\\webVis\\jquery.js:1054"
        },
        {
            "message": "Missing item type\nDetects XML nodes",
            "line": " ..\\src\\webVis\\jquery.js:1066"
        },
        {
            "message": "Missing item type\nSets document-related variables once based on the current document",
            "line": " ..\\src\\webVis\\jquery.js:1078"
        },
        {
            "message": "Missing item type\nDocument sorting and removing duplicates",
            "line": " ..\\src\\webVis\\jquery.js:1532"
        },
        {
            "message": "Missing item type\nUtility function for retrieving the text value of an array of DOM nodes",
            "line": " ..\\src\\webVis\\jquery.js:1565"
        },
        {
            "message": "Missing item type\nA low-level selection function that works with Sizzle's compiled\n selector functions",
            "line": " ..\\src\\webVis\\jquery.js:2594"
        },
        {
            "message": "Missing item type\nLoad a url into a page",
            "line": " ..\\src\\webVis\\jquery.js:9606"
        },
        {
            "message": "Missing item type\nGets a window from an element",
            "line": " ..\\src\\webVis\\jquery.js:9698"
        },
        {
            "message": "Missing item type\nThis edge renderer will display edges as curves with arrow heading.",
            "line": " ..\\src\\webVis\\sigma.canvas.edges.curvedArrow.js:6"
        }
    ]
}